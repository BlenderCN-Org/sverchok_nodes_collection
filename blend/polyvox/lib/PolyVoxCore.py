# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_PolyVoxCore', [dirname(__file__)])
        except ImportError:
            import _PolyVoxCore
            return _PolyVoxCore
        if fp is not None:
            try:
                _mod = imp.load_module('_PolyVoxCore', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _PolyVoxCore = swig_import_helper()
    del swig_import_helper
else:
    import _PolyVoxCore
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PolyVoxCore.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        """value(SwigPyIterator self) -> PyObject *"""
        return _PolyVoxCore.SwigPyIterator_value(self)


    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator
        """
        return _PolyVoxCore.SwigPyIterator_incr(self, n)


    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator
        """
        return _PolyVoxCore.SwigPyIterator_decr(self, n)


    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _PolyVoxCore.SwigPyIterator_distance(self, x)


    def equal(self, x: 'SwigPyIterator') -> "bool":
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _PolyVoxCore.SwigPyIterator_equal(self, x)


    def copy(self) -> "swig::SwigPyIterator *":
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _PolyVoxCore.SwigPyIterator_copy(self)


    def next(self) -> "PyObject *":
        """next(SwigPyIterator self) -> PyObject *"""
        return _PolyVoxCore.SwigPyIterator_next(self)


    def __next__(self) -> "PyObject *":
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _PolyVoxCore.SwigPyIterator___next__(self)


    def previous(self) -> "PyObject *":
        """previous(SwigPyIterator self) -> PyObject *"""
        return _PolyVoxCore.SwigPyIterator_previous(self)


    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _PolyVoxCore.SwigPyIterator_advance(self, n)


    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _PolyVoxCore.SwigPyIterator___eq__(self, x)


    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _PolyVoxCore.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _PolyVoxCore.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _PolyVoxCore.SwigPyIterator___isub__(self, n)


    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _PolyVoxCore.SwigPyIterator___add__(self, n)


    def __sub__(self, *args) -> "ptrdiff_t":
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _PolyVoxCore.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator_swigregister = _PolyVoxCore.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Vector3Dfloat(_object):
    """Proxy of C++ PolyVox::Vector<(3,float,float)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector3Dfloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector3Dfloat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::Vector<(3,float,float)> self) -> Vector3Dfloat
        __init__(PolyVox::Vector<(3,float,float)> self, float tFillValue) -> Vector3Dfloat
        __init__(PolyVox::Vector<(3,float,float)> self, float x, float y, float z) -> Vector3Dfloat
        __init__(PolyVox::Vector<(3,float,float)> self, Vector3Dfloat vector) -> Vector3Dfloat
        """
        this = _PolyVoxCore.new_Vector3Dfloat(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _PolyVoxCore.delete_Vector3Dfloat
    __del__ = lambda self: None

    def assign(self, rhs: 'Vector3Dfloat') -> "PolyVox::Vector< 3,float,float > &":
        """assign(Vector3Dfloat self, Vector3Dfloat rhs) -> Vector3Dfloat"""
        return _PolyVoxCore.Vector3Dfloat_assign(self, rhs)


    def __eq__(self, rhs: 'Vector3Dfloat') -> "bool":
        """__eq__(Vector3Dfloat self, Vector3Dfloat rhs) -> bool"""
        return _PolyVoxCore.Vector3Dfloat___eq__(self, rhs)


    def __ne__(self, rhs: 'Vector3Dfloat') -> "bool":
        """__ne__(Vector3Dfloat self, Vector3Dfloat rhs) -> bool"""
        return _PolyVoxCore.Vector3Dfloat___ne__(self, rhs)


    def __lt__(self, rhs: 'Vector3Dfloat') -> "bool":
        """__lt__(Vector3Dfloat self, Vector3Dfloat rhs) -> bool"""

        import warnings
        warnings.warn("deprecated", DeprecationWarning)


        return _PolyVoxCore.Vector3Dfloat___lt__(self, rhs)


    def __iadd__(self, rhs: 'Vector3Dfloat') -> "PolyVox::Vector< 3,float,float > &":
        """__iadd__(Vector3Dfloat self, Vector3Dfloat rhs) -> Vector3Dfloat"""
        return _PolyVoxCore.Vector3Dfloat___iadd__(self, rhs)


    def __isub__(self, rhs: 'Vector3Dfloat') -> "PolyVox::Vector< 3,float,float > &":
        """__isub__(Vector3Dfloat self, Vector3Dfloat rhs) -> Vector3Dfloat"""
        return _PolyVoxCore.Vector3Dfloat___isub__(self, rhs)


    def __imul__(self, *args) -> "PolyVox::Vector< 3,float,float > &":
        """
        __imul__(Vector3Dfloat self, Vector3Dfloat rhs) -> Vector3Dfloat
        __imul__(Vector3Dfloat self, float const & rhs) -> Vector3Dfloat
        """
        return _PolyVoxCore.Vector3Dfloat___imul__(self, *args)


    def __idiv__(self, *args) -> "PolyVox::Vector< 3,float,float > &":
        """
        __idiv__(Vector3Dfloat self, Vector3Dfloat rhs) -> Vector3Dfloat
        __idiv__(Vector3Dfloat self, float const & rhs) -> Vector3Dfloat
        """
        return _PolyVoxCore.Vector3Dfloat___idiv__(self, *args)


    def getElement(self, index: 'uint32_t') -> "float":
        """getElement(Vector3Dfloat self, uint32_t index) -> float"""
        return _PolyVoxCore.Vector3Dfloat_getElement(self, index)


    def getX(self) -> "float":
        """getX(Vector3Dfloat self) -> float"""
        return _PolyVoxCore.Vector3Dfloat_getX(self)


    def getY(self) -> "float":
        """getY(Vector3Dfloat self) -> float"""
        return _PolyVoxCore.Vector3Dfloat_getY(self)


    def getZ(self) -> "float":
        """getZ(Vector3Dfloat self) -> float"""
        return _PolyVoxCore.Vector3Dfloat_getZ(self)


    def setElement(self, index: 'uint32_t', tValue: 'float') -> "void":
        """setElement(Vector3Dfloat self, uint32_t index, float tValue)"""
        return _PolyVoxCore.Vector3Dfloat_setElement(self, index, tValue)


    def setElements(self, *args) -> "void":
        """
        setElements(Vector3Dfloat self, float x, float y)
        setElements(Vector3Dfloat self, float x, float y, float z)
        """
        return _PolyVoxCore.Vector3Dfloat_setElements(self, *args)


    def setX(self, tX: 'float') -> "void":
        """setX(Vector3Dfloat self, float tX)"""
        return _PolyVoxCore.Vector3Dfloat_setX(self, tX)


    def setY(self, tY: 'float') -> "void":
        """setY(Vector3Dfloat self, float tY)"""
        return _PolyVoxCore.Vector3Dfloat_setY(self, tY)


    def setZ(self, tZ: 'float') -> "void":
        """setZ(Vector3Dfloat self, float tZ)"""
        return _PolyVoxCore.Vector3Dfloat_setZ(self, tZ)


    def length(self) -> "float":
        """length(Vector3Dfloat self) -> float"""
        return _PolyVoxCore.Vector3Dfloat_length(self)


    def lengthSquared(self) -> "float":
        """lengthSquared(Vector3Dfloat self) -> float"""
        return _PolyVoxCore.Vector3Dfloat_lengthSquared(self)


    def angleTo(self, vector: 'Vector3Dfloat') -> "float":
        """angleTo(Vector3Dfloat self, Vector3Dfloat vector) -> float"""
        return _PolyVoxCore.Vector3Dfloat_angleTo(self, vector)


    def cross(self, vector: 'Vector3Dfloat') -> "PolyVox::Vector< 3,float,float >":
        """cross(Vector3Dfloat self, Vector3Dfloat vector) -> Vector3Dfloat"""
        return _PolyVoxCore.Vector3Dfloat_cross(self, vector)


    def dot(self, rhs: 'Vector3Dfloat') -> "float":
        """dot(Vector3Dfloat self, Vector3Dfloat rhs) -> float"""
        return _PolyVoxCore.Vector3Dfloat_dot(self, rhs)


    def normalise(self) -> "void":
        """normalise(Vector3Dfloat self)"""
        return _PolyVoxCore.Vector3Dfloat_normalise(self)


    __swig_getmethods__["x"] = getX
    __swig_setmethods__["x"] = setX
    if _newclass: x = property(getX, setX)


    __swig_getmethods__["y"] = getY
    __swig_setmethods__["y"] = setY
    if _newclass: y = property(getY, setY)


    __swig_getmethods__["z"] = getZ
    __swig_setmethods__["z"] = setZ
    if _newclass: z = property(getZ, setZ)


    def __add__(self, rhs: 'Vector3Dfloat') -> "PolyVox::Vector< 3,float,float >":
        """__add__(Vector3Dfloat self, Vector3Dfloat rhs) -> Vector3Dfloat"""
        return _PolyVoxCore.Vector3Dfloat___add__(self, rhs)


    def __sub__(self, rhs: 'Vector3Dfloat') -> "PolyVox::Vector< 3,float,float >":
        """__sub__(Vector3Dfloat self, Vector3Dfloat rhs) -> Vector3Dfloat"""
        return _PolyVoxCore.Vector3Dfloat___sub__(self, rhs)


    def __div__(self, *args) -> "PolyVox::Vector< 3,float,float >":
        """
        __div__(Vector3Dfloat self, Vector3Dfloat rhs) -> Vector3Dfloat
        __div__(Vector3Dfloat self, float const & rhs) -> Vector3Dfloat
        """
        return _PolyVoxCore.Vector3Dfloat___div__(self, *args)


    def __mul__(self, *args) -> "PolyVox::Vector< 3,float,float >":
        """
        __mul__(Vector3Dfloat self, Vector3Dfloat rhs) -> Vector3Dfloat
        __mul__(Vector3Dfloat self, float const & rhs) -> Vector3Dfloat
        """
        return _PolyVoxCore.Vector3Dfloat___mul__(self, *args)


    def __str__(self) -> "char const *":
        """__str__(Vector3Dfloat self) -> char const *"""
        return _PolyVoxCore.Vector3Dfloat___str__(self)

Vector3Dfloat_swigregister = _PolyVoxCore.Vector3Dfloat_swigregister
Vector3Dfloat_swigregister(Vector3Dfloat)

class Vector3Ddouble(_object):
    """Proxy of C++ PolyVox::Vector<(3,double,double)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector3Ddouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector3Ddouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::Vector<(3,double,double)> self) -> Vector3Ddouble
        __init__(PolyVox::Vector<(3,double,double)> self, double tFillValue) -> Vector3Ddouble
        __init__(PolyVox::Vector<(3,double,double)> self, double x, double y, double z) -> Vector3Ddouble
        __init__(PolyVox::Vector<(3,double,double)> self, Vector3Ddouble vector) -> Vector3Ddouble
        """
        this = _PolyVoxCore.new_Vector3Ddouble(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _PolyVoxCore.delete_Vector3Ddouble
    __del__ = lambda self: None

    def assign(self, rhs: 'Vector3Ddouble') -> "PolyVox::Vector< 3,double,double > &":
        """assign(Vector3Ddouble self, Vector3Ddouble rhs) -> Vector3Ddouble"""
        return _PolyVoxCore.Vector3Ddouble_assign(self, rhs)


    def __eq__(self, rhs: 'Vector3Ddouble') -> "bool":
        """__eq__(Vector3Ddouble self, Vector3Ddouble rhs) -> bool"""
        return _PolyVoxCore.Vector3Ddouble___eq__(self, rhs)


    def __ne__(self, rhs: 'Vector3Ddouble') -> "bool":
        """__ne__(Vector3Ddouble self, Vector3Ddouble rhs) -> bool"""
        return _PolyVoxCore.Vector3Ddouble___ne__(self, rhs)


    def __lt__(self, rhs: 'Vector3Ddouble') -> "bool":
        """__lt__(Vector3Ddouble self, Vector3Ddouble rhs) -> bool"""

        import warnings
        warnings.warn("deprecated", DeprecationWarning)


        return _PolyVoxCore.Vector3Ddouble___lt__(self, rhs)


    def __iadd__(self, rhs: 'Vector3Ddouble') -> "PolyVox::Vector< 3,double,double > &":
        """__iadd__(Vector3Ddouble self, Vector3Ddouble rhs) -> Vector3Ddouble"""
        return _PolyVoxCore.Vector3Ddouble___iadd__(self, rhs)


    def __isub__(self, rhs: 'Vector3Ddouble') -> "PolyVox::Vector< 3,double,double > &":
        """__isub__(Vector3Ddouble self, Vector3Ddouble rhs) -> Vector3Ddouble"""
        return _PolyVoxCore.Vector3Ddouble___isub__(self, rhs)


    def __imul__(self, *args) -> "PolyVox::Vector< 3,double,double > &":
        """
        __imul__(Vector3Ddouble self, Vector3Ddouble rhs) -> Vector3Ddouble
        __imul__(Vector3Ddouble self, double const & rhs) -> Vector3Ddouble
        """
        return _PolyVoxCore.Vector3Ddouble___imul__(self, *args)


    def __idiv__(self, *args) -> "PolyVox::Vector< 3,double,double > &":
        """
        __idiv__(Vector3Ddouble self, Vector3Ddouble rhs) -> Vector3Ddouble
        __idiv__(Vector3Ddouble self, double const & rhs) -> Vector3Ddouble
        """
        return _PolyVoxCore.Vector3Ddouble___idiv__(self, *args)


    def getElement(self, index: 'uint32_t') -> "double":
        """getElement(Vector3Ddouble self, uint32_t index) -> double"""
        return _PolyVoxCore.Vector3Ddouble_getElement(self, index)


    def getX(self) -> "double":
        """getX(Vector3Ddouble self) -> double"""
        return _PolyVoxCore.Vector3Ddouble_getX(self)


    def getY(self) -> "double":
        """getY(Vector3Ddouble self) -> double"""
        return _PolyVoxCore.Vector3Ddouble_getY(self)


    def getZ(self) -> "double":
        """getZ(Vector3Ddouble self) -> double"""
        return _PolyVoxCore.Vector3Ddouble_getZ(self)


    def setElement(self, index: 'uint32_t', tValue: 'double') -> "void":
        """setElement(Vector3Ddouble self, uint32_t index, double tValue)"""
        return _PolyVoxCore.Vector3Ddouble_setElement(self, index, tValue)


    def setElements(self, *args) -> "void":
        """
        setElements(Vector3Ddouble self, double x, double y)
        setElements(Vector3Ddouble self, double x, double y, double z)
        """
        return _PolyVoxCore.Vector3Ddouble_setElements(self, *args)


    def setX(self, tX: 'double') -> "void":
        """setX(Vector3Ddouble self, double tX)"""
        return _PolyVoxCore.Vector3Ddouble_setX(self, tX)


    def setY(self, tY: 'double') -> "void":
        """setY(Vector3Ddouble self, double tY)"""
        return _PolyVoxCore.Vector3Ddouble_setY(self, tY)


    def setZ(self, tZ: 'double') -> "void":
        """setZ(Vector3Ddouble self, double tZ)"""
        return _PolyVoxCore.Vector3Ddouble_setZ(self, tZ)


    def length(self) -> "float":
        """length(Vector3Ddouble self) -> float"""
        return _PolyVoxCore.Vector3Ddouble_length(self)


    def lengthSquared(self) -> "double":
        """lengthSquared(Vector3Ddouble self) -> double"""
        return _PolyVoxCore.Vector3Ddouble_lengthSquared(self)


    def angleTo(self, vector: 'Vector3Ddouble') -> "float":
        """angleTo(Vector3Ddouble self, Vector3Ddouble vector) -> float"""
        return _PolyVoxCore.Vector3Ddouble_angleTo(self, vector)


    def cross(self, vector: 'Vector3Ddouble') -> "PolyVox::Vector< 3,double,double >":
        """cross(Vector3Ddouble self, Vector3Ddouble vector) -> Vector3Ddouble"""
        return _PolyVoxCore.Vector3Ddouble_cross(self, vector)


    def dot(self, rhs: 'Vector3Ddouble') -> "double":
        """dot(Vector3Ddouble self, Vector3Ddouble rhs) -> double"""
        return _PolyVoxCore.Vector3Ddouble_dot(self, rhs)


    def normalise(self) -> "void":
        """normalise(Vector3Ddouble self)"""
        return _PolyVoxCore.Vector3Ddouble_normalise(self)


    __swig_getmethods__["x"] = getX
    __swig_setmethods__["x"] = setX
    if _newclass: x = property(getX, setX)


    __swig_getmethods__["y"] = getY
    __swig_setmethods__["y"] = setY
    if _newclass: y = property(getY, setY)


    __swig_getmethods__["z"] = getZ
    __swig_setmethods__["z"] = setZ
    if _newclass: z = property(getZ, setZ)


    def __add__(self, rhs: 'Vector3Ddouble') -> "PolyVox::Vector< 3,double,double >":
        """__add__(Vector3Ddouble self, Vector3Ddouble rhs) -> Vector3Ddouble"""
        return _PolyVoxCore.Vector3Ddouble___add__(self, rhs)


    def __sub__(self, rhs: 'Vector3Ddouble') -> "PolyVox::Vector< 3,double,double >":
        """__sub__(Vector3Ddouble self, Vector3Ddouble rhs) -> Vector3Ddouble"""
        return _PolyVoxCore.Vector3Ddouble___sub__(self, rhs)


    def __div__(self, *args) -> "PolyVox::Vector< 3,double,double >":
        """
        __div__(Vector3Ddouble self, Vector3Ddouble rhs) -> Vector3Ddouble
        __div__(Vector3Ddouble self, double const & rhs) -> Vector3Ddouble
        """
        return _PolyVoxCore.Vector3Ddouble___div__(self, *args)


    def __mul__(self, *args) -> "PolyVox::Vector< 3,double,double >":
        """
        __mul__(Vector3Ddouble self, Vector3Ddouble rhs) -> Vector3Ddouble
        __mul__(Vector3Ddouble self, double const & rhs) -> Vector3Ddouble
        """
        return _PolyVoxCore.Vector3Ddouble___mul__(self, *args)


    def __str__(self) -> "char const *":
        """__str__(Vector3Ddouble self) -> char const *"""
        return _PolyVoxCore.Vector3Ddouble___str__(self)

Vector3Ddouble_swigregister = _PolyVoxCore.Vector3Ddouble_swigregister
Vector3Ddouble_swigregister(Vector3Ddouble)

class Vector3Dint8_t(_object):
    """Proxy of C++ PolyVox::Vector<(3,int8_t,int32_t)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector3Dint8_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector3Dint8_t, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::Vector<(3,int8_t,int32_t)> self) -> Vector3Dint8_t
        __init__(PolyVox::Vector<(3,int8_t,int32_t)> self, signed char tFillValue) -> Vector3Dint8_t
        __init__(PolyVox::Vector<(3,int8_t,int32_t)> self, signed char x, signed char y, signed char z) -> Vector3Dint8_t
        __init__(PolyVox::Vector<(3,int8_t,int32_t)> self, Vector3Dint8_t vector) -> Vector3Dint8_t
        """
        this = _PolyVoxCore.new_Vector3Dint8_t(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _PolyVoxCore.delete_Vector3Dint8_t
    __del__ = lambda self: None

    def assign(self, rhs: 'Vector3Dint8_t') -> "PolyVox::Vector< 3,signed char,int > &":
        """assign(Vector3Dint8_t self, Vector3Dint8_t rhs) -> Vector3Dint8_t"""
        return _PolyVoxCore.Vector3Dint8_t_assign(self, rhs)


    def __eq__(self, rhs: 'Vector3Dint8_t') -> "bool":
        """__eq__(Vector3Dint8_t self, Vector3Dint8_t rhs) -> bool"""
        return _PolyVoxCore.Vector3Dint8_t___eq__(self, rhs)


    def __ne__(self, rhs: 'Vector3Dint8_t') -> "bool":
        """__ne__(Vector3Dint8_t self, Vector3Dint8_t rhs) -> bool"""
        return _PolyVoxCore.Vector3Dint8_t___ne__(self, rhs)


    def __lt__(self, rhs: 'Vector3Dint8_t') -> "bool":
        """__lt__(Vector3Dint8_t self, Vector3Dint8_t rhs) -> bool"""

        import warnings
        warnings.warn("deprecated", DeprecationWarning)


        return _PolyVoxCore.Vector3Dint8_t___lt__(self, rhs)


    def __iadd__(self, rhs: 'Vector3Dint8_t') -> "PolyVox::Vector< 3,signed char,int > &":
        """__iadd__(Vector3Dint8_t self, Vector3Dint8_t rhs) -> Vector3Dint8_t"""
        return _PolyVoxCore.Vector3Dint8_t___iadd__(self, rhs)


    def __isub__(self, rhs: 'Vector3Dint8_t') -> "PolyVox::Vector< 3,signed char,int > &":
        """__isub__(Vector3Dint8_t self, Vector3Dint8_t rhs) -> Vector3Dint8_t"""
        return _PolyVoxCore.Vector3Dint8_t___isub__(self, rhs)


    def __imul__(self, *args) -> "PolyVox::Vector< 3,signed char,int > &":
        """
        __imul__(Vector3Dint8_t self, Vector3Dint8_t rhs) -> Vector3Dint8_t
        __imul__(Vector3Dint8_t self, signed char const & rhs) -> Vector3Dint8_t
        """
        return _PolyVoxCore.Vector3Dint8_t___imul__(self, *args)


    def __idiv__(self, *args) -> "PolyVox::Vector< 3,signed char,int > &":
        """
        __idiv__(Vector3Dint8_t self, Vector3Dint8_t rhs) -> Vector3Dint8_t
        __idiv__(Vector3Dint8_t self, signed char const & rhs) -> Vector3Dint8_t
        """
        return _PolyVoxCore.Vector3Dint8_t___idiv__(self, *args)


    def getElement(self, index: 'uint32_t') -> "signed char":
        """getElement(Vector3Dint8_t self, uint32_t index) -> signed char"""
        return _PolyVoxCore.Vector3Dint8_t_getElement(self, index)


    def getX(self) -> "signed char":
        """getX(Vector3Dint8_t self) -> signed char"""
        return _PolyVoxCore.Vector3Dint8_t_getX(self)


    def getY(self) -> "signed char":
        """getY(Vector3Dint8_t self) -> signed char"""
        return _PolyVoxCore.Vector3Dint8_t_getY(self)


    def getZ(self) -> "signed char":
        """getZ(Vector3Dint8_t self) -> signed char"""
        return _PolyVoxCore.Vector3Dint8_t_getZ(self)


    def setElement(self, index: 'uint32_t', tValue: 'signed char') -> "void":
        """setElement(Vector3Dint8_t self, uint32_t index, signed char tValue)"""
        return _PolyVoxCore.Vector3Dint8_t_setElement(self, index, tValue)


    def setElements(self, *args) -> "void":
        """
        setElements(Vector3Dint8_t self, signed char x, signed char y)
        setElements(Vector3Dint8_t self, signed char x, signed char y, signed char z)
        """
        return _PolyVoxCore.Vector3Dint8_t_setElements(self, *args)


    def setX(self, tX: 'signed char') -> "void":
        """setX(Vector3Dint8_t self, signed char tX)"""
        return _PolyVoxCore.Vector3Dint8_t_setX(self, tX)


    def setY(self, tY: 'signed char') -> "void":
        """setY(Vector3Dint8_t self, signed char tY)"""
        return _PolyVoxCore.Vector3Dint8_t_setY(self, tY)


    def setZ(self, tZ: 'signed char') -> "void":
        """setZ(Vector3Dint8_t self, signed char tZ)"""
        return _PolyVoxCore.Vector3Dint8_t_setZ(self, tZ)


    def length(self) -> "float":
        """length(Vector3Dint8_t self) -> float"""
        return _PolyVoxCore.Vector3Dint8_t_length(self)


    def lengthSquared(self) -> "int":
        """lengthSquared(Vector3Dint8_t self) -> int"""
        return _PolyVoxCore.Vector3Dint8_t_lengthSquared(self)


    def angleTo(self, vector: 'Vector3Dint8_t') -> "float":
        """angleTo(Vector3Dint8_t self, Vector3Dint8_t vector) -> float"""
        return _PolyVoxCore.Vector3Dint8_t_angleTo(self, vector)


    def cross(self, vector: 'Vector3Dint8_t') -> "PolyVox::Vector< 3,signed char,int >":
        """cross(Vector3Dint8_t self, Vector3Dint8_t vector) -> Vector3Dint8_t"""
        return _PolyVoxCore.Vector3Dint8_t_cross(self, vector)


    def dot(self, rhs: 'Vector3Dint8_t') -> "int":
        """dot(Vector3Dint8_t self, Vector3Dint8_t rhs) -> int"""
        return _PolyVoxCore.Vector3Dint8_t_dot(self, rhs)


    def normalise(self) -> "void":
        """normalise(Vector3Dint8_t self)"""
        return _PolyVoxCore.Vector3Dint8_t_normalise(self)


    __swig_getmethods__["x"] = getX
    __swig_setmethods__["x"] = setX
    if _newclass: x = property(getX, setX)


    __swig_getmethods__["y"] = getY
    __swig_setmethods__["y"] = setY
    if _newclass: y = property(getY, setY)


    __swig_getmethods__["z"] = getZ
    __swig_setmethods__["z"] = setZ
    if _newclass: z = property(getZ, setZ)


    def __add__(self, rhs: 'Vector3Dint8_t') -> "PolyVox::Vector< 3,int8_t,int32_t >":
        """__add__(Vector3Dint8_t self, Vector3Dint8_t rhs) -> Vector3Dint8_t"""
        return _PolyVoxCore.Vector3Dint8_t___add__(self, rhs)


    def __sub__(self, rhs: 'Vector3Dint8_t') -> "PolyVox::Vector< 3,int8_t,int32_t >":
        """__sub__(Vector3Dint8_t self, Vector3Dint8_t rhs) -> Vector3Dint8_t"""
        return _PolyVoxCore.Vector3Dint8_t___sub__(self, rhs)


    def __div__(self, *args) -> "PolyVox::Vector< 3,int8_t,int32_t >":
        """
        __div__(Vector3Dint8_t self, Vector3Dint8_t rhs) -> Vector3Dint8_t
        __div__(Vector3Dint8_t self, signed char const & rhs) -> Vector3Dint8_t
        """
        return _PolyVoxCore.Vector3Dint8_t___div__(self, *args)


    def __mul__(self, *args) -> "PolyVox::Vector< 3,int8_t,int32_t >":
        """
        __mul__(Vector3Dint8_t self, Vector3Dint8_t rhs) -> Vector3Dint8_t
        __mul__(Vector3Dint8_t self, signed char const & rhs) -> Vector3Dint8_t
        """
        return _PolyVoxCore.Vector3Dint8_t___mul__(self, *args)


    def __str__(self) -> "char const *":
        """__str__(Vector3Dint8_t self) -> char const *"""
        return _PolyVoxCore.Vector3Dint8_t___str__(self)

Vector3Dint8_t_swigregister = _PolyVoxCore.Vector3Dint8_t_swigregister
Vector3Dint8_t_swigregister(Vector3Dint8_t)

class Vector3Duint8_t(_object):
    """Proxy of C++ PolyVox::Vector<(3,uint8_t,int32_t)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector3Duint8_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector3Duint8_t, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::Vector<(3,uint8_t,int32_t)> self) -> Vector3Duint8_t
        __init__(PolyVox::Vector<(3,uint8_t,int32_t)> self, unsigned char tFillValue) -> Vector3Duint8_t
        __init__(PolyVox::Vector<(3,uint8_t,int32_t)> self, unsigned char x, unsigned char y, unsigned char z) -> Vector3Duint8_t
        __init__(PolyVox::Vector<(3,uint8_t,int32_t)> self, Vector3Duint8_t vector) -> Vector3Duint8_t
        """
        this = _PolyVoxCore.new_Vector3Duint8_t(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _PolyVoxCore.delete_Vector3Duint8_t
    __del__ = lambda self: None

    def assign(self, rhs: 'Vector3Duint8_t') -> "PolyVox::Vector< 3,unsigned char,int > &":
        """assign(Vector3Duint8_t self, Vector3Duint8_t rhs) -> Vector3Duint8_t"""
        return _PolyVoxCore.Vector3Duint8_t_assign(self, rhs)


    def __eq__(self, rhs: 'Vector3Duint8_t') -> "bool":
        """__eq__(Vector3Duint8_t self, Vector3Duint8_t rhs) -> bool"""
        return _PolyVoxCore.Vector3Duint8_t___eq__(self, rhs)


    def __ne__(self, rhs: 'Vector3Duint8_t') -> "bool":
        """__ne__(Vector3Duint8_t self, Vector3Duint8_t rhs) -> bool"""
        return _PolyVoxCore.Vector3Duint8_t___ne__(self, rhs)


    def __lt__(self, rhs: 'Vector3Duint8_t') -> "bool":
        """__lt__(Vector3Duint8_t self, Vector3Duint8_t rhs) -> bool"""

        import warnings
        warnings.warn("deprecated", DeprecationWarning)


        return _PolyVoxCore.Vector3Duint8_t___lt__(self, rhs)


    def __iadd__(self, rhs: 'Vector3Duint8_t') -> "PolyVox::Vector< 3,unsigned char,int > &":
        """__iadd__(Vector3Duint8_t self, Vector3Duint8_t rhs) -> Vector3Duint8_t"""
        return _PolyVoxCore.Vector3Duint8_t___iadd__(self, rhs)


    def __isub__(self, rhs: 'Vector3Duint8_t') -> "PolyVox::Vector< 3,unsigned char,int > &":
        """__isub__(Vector3Duint8_t self, Vector3Duint8_t rhs) -> Vector3Duint8_t"""
        return _PolyVoxCore.Vector3Duint8_t___isub__(self, rhs)


    def __imul__(self, *args) -> "PolyVox::Vector< 3,unsigned char,int > &":
        """
        __imul__(Vector3Duint8_t self, Vector3Duint8_t rhs) -> Vector3Duint8_t
        __imul__(Vector3Duint8_t self, unsigned char const & rhs) -> Vector3Duint8_t
        """
        return _PolyVoxCore.Vector3Duint8_t___imul__(self, *args)


    def __idiv__(self, *args) -> "PolyVox::Vector< 3,unsigned char,int > &":
        """
        __idiv__(Vector3Duint8_t self, Vector3Duint8_t rhs) -> Vector3Duint8_t
        __idiv__(Vector3Duint8_t self, unsigned char const & rhs) -> Vector3Duint8_t
        """
        return _PolyVoxCore.Vector3Duint8_t___idiv__(self, *args)


    def getElement(self, index: 'uint32_t') -> "unsigned char":
        """getElement(Vector3Duint8_t self, uint32_t index) -> unsigned char"""
        return _PolyVoxCore.Vector3Duint8_t_getElement(self, index)


    def getX(self) -> "unsigned char":
        """getX(Vector3Duint8_t self) -> unsigned char"""
        return _PolyVoxCore.Vector3Duint8_t_getX(self)


    def getY(self) -> "unsigned char":
        """getY(Vector3Duint8_t self) -> unsigned char"""
        return _PolyVoxCore.Vector3Duint8_t_getY(self)


    def getZ(self) -> "unsigned char":
        """getZ(Vector3Duint8_t self) -> unsigned char"""
        return _PolyVoxCore.Vector3Duint8_t_getZ(self)


    def setElement(self, index: 'uint32_t', tValue: 'unsigned char') -> "void":
        """setElement(Vector3Duint8_t self, uint32_t index, unsigned char tValue)"""
        return _PolyVoxCore.Vector3Duint8_t_setElement(self, index, tValue)


    def setElements(self, *args) -> "void":
        """
        setElements(Vector3Duint8_t self, unsigned char x, unsigned char y)
        setElements(Vector3Duint8_t self, unsigned char x, unsigned char y, unsigned char z)
        """
        return _PolyVoxCore.Vector3Duint8_t_setElements(self, *args)


    def setX(self, tX: 'unsigned char') -> "void":
        """setX(Vector3Duint8_t self, unsigned char tX)"""
        return _PolyVoxCore.Vector3Duint8_t_setX(self, tX)


    def setY(self, tY: 'unsigned char') -> "void":
        """setY(Vector3Duint8_t self, unsigned char tY)"""
        return _PolyVoxCore.Vector3Duint8_t_setY(self, tY)


    def setZ(self, tZ: 'unsigned char') -> "void":
        """setZ(Vector3Duint8_t self, unsigned char tZ)"""
        return _PolyVoxCore.Vector3Duint8_t_setZ(self, tZ)


    def length(self) -> "float":
        """length(Vector3Duint8_t self) -> float"""
        return _PolyVoxCore.Vector3Duint8_t_length(self)


    def lengthSquared(self) -> "int":
        """lengthSquared(Vector3Duint8_t self) -> int"""
        return _PolyVoxCore.Vector3Duint8_t_lengthSquared(self)


    def angleTo(self, vector: 'Vector3Duint8_t') -> "float":
        """angleTo(Vector3Duint8_t self, Vector3Duint8_t vector) -> float"""
        return _PolyVoxCore.Vector3Duint8_t_angleTo(self, vector)


    def cross(self, vector: 'Vector3Duint8_t') -> "PolyVox::Vector< 3,unsigned char,int >":
        """cross(Vector3Duint8_t self, Vector3Duint8_t vector) -> Vector3Duint8_t"""
        return _PolyVoxCore.Vector3Duint8_t_cross(self, vector)


    def dot(self, rhs: 'Vector3Duint8_t') -> "int":
        """dot(Vector3Duint8_t self, Vector3Duint8_t rhs) -> int"""
        return _PolyVoxCore.Vector3Duint8_t_dot(self, rhs)


    def normalise(self) -> "void":
        """normalise(Vector3Duint8_t self)"""
        return _PolyVoxCore.Vector3Duint8_t_normalise(self)


    __swig_getmethods__["x"] = getX
    __swig_setmethods__["x"] = setX
    if _newclass: x = property(getX, setX)


    __swig_getmethods__["y"] = getY
    __swig_setmethods__["y"] = setY
    if _newclass: y = property(getY, setY)


    __swig_getmethods__["z"] = getZ
    __swig_setmethods__["z"] = setZ
    if _newclass: z = property(getZ, setZ)


    def __add__(self, rhs: 'Vector3Duint8_t') -> "PolyVox::Vector< 3,uint8_t,int32_t >":
        """__add__(Vector3Duint8_t self, Vector3Duint8_t rhs) -> Vector3Duint8_t"""
        return _PolyVoxCore.Vector3Duint8_t___add__(self, rhs)


    def __sub__(self, rhs: 'Vector3Duint8_t') -> "PolyVox::Vector< 3,uint8_t,int32_t >":
        """__sub__(Vector3Duint8_t self, Vector3Duint8_t rhs) -> Vector3Duint8_t"""
        return _PolyVoxCore.Vector3Duint8_t___sub__(self, rhs)


    def __div__(self, *args) -> "PolyVox::Vector< 3,uint8_t,int32_t >":
        """
        __div__(Vector3Duint8_t self, Vector3Duint8_t rhs) -> Vector3Duint8_t
        __div__(Vector3Duint8_t self, unsigned char const & rhs) -> Vector3Duint8_t
        """
        return _PolyVoxCore.Vector3Duint8_t___div__(self, *args)


    def __mul__(self, *args) -> "PolyVox::Vector< 3,uint8_t,int32_t >":
        """
        __mul__(Vector3Duint8_t self, Vector3Duint8_t rhs) -> Vector3Duint8_t
        __mul__(Vector3Duint8_t self, unsigned char const & rhs) -> Vector3Duint8_t
        """
        return _PolyVoxCore.Vector3Duint8_t___mul__(self, *args)


    def __str__(self) -> "char const *":
        """__str__(Vector3Duint8_t self) -> char const *"""
        return _PolyVoxCore.Vector3Duint8_t___str__(self)

Vector3Duint8_t_swigregister = _PolyVoxCore.Vector3Duint8_t_swigregister
Vector3Duint8_t_swigregister(Vector3Duint8_t)

class Vector3Dint16_t(_object):
    """Proxy of C++ PolyVox::Vector<(3,int16_t,int32_t)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector3Dint16_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector3Dint16_t, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::Vector<(3,int16_t,int32_t)> self) -> Vector3Dint16_t
        __init__(PolyVox::Vector<(3,int16_t,int32_t)> self, short tFillValue) -> Vector3Dint16_t
        __init__(PolyVox::Vector<(3,int16_t,int32_t)> self, short x, short y, short z) -> Vector3Dint16_t
        __init__(PolyVox::Vector<(3,int16_t,int32_t)> self, Vector3Dint16_t vector) -> Vector3Dint16_t
        """
        this = _PolyVoxCore.new_Vector3Dint16_t(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _PolyVoxCore.delete_Vector3Dint16_t
    __del__ = lambda self: None

    def assign(self, rhs: 'Vector3Dint16_t') -> "PolyVox::Vector< 3,short,int > &":
        """assign(Vector3Dint16_t self, Vector3Dint16_t rhs) -> Vector3Dint16_t"""
        return _PolyVoxCore.Vector3Dint16_t_assign(self, rhs)


    def __eq__(self, rhs: 'Vector3Dint16_t') -> "bool":
        """__eq__(Vector3Dint16_t self, Vector3Dint16_t rhs) -> bool"""
        return _PolyVoxCore.Vector3Dint16_t___eq__(self, rhs)


    def __ne__(self, rhs: 'Vector3Dint16_t') -> "bool":
        """__ne__(Vector3Dint16_t self, Vector3Dint16_t rhs) -> bool"""
        return _PolyVoxCore.Vector3Dint16_t___ne__(self, rhs)


    def __lt__(self, rhs: 'Vector3Dint16_t') -> "bool":
        """__lt__(Vector3Dint16_t self, Vector3Dint16_t rhs) -> bool"""

        import warnings
        warnings.warn("deprecated", DeprecationWarning)


        return _PolyVoxCore.Vector3Dint16_t___lt__(self, rhs)


    def __iadd__(self, rhs: 'Vector3Dint16_t') -> "PolyVox::Vector< 3,short,int > &":
        """__iadd__(Vector3Dint16_t self, Vector3Dint16_t rhs) -> Vector3Dint16_t"""
        return _PolyVoxCore.Vector3Dint16_t___iadd__(self, rhs)


    def __isub__(self, rhs: 'Vector3Dint16_t') -> "PolyVox::Vector< 3,short,int > &":
        """__isub__(Vector3Dint16_t self, Vector3Dint16_t rhs) -> Vector3Dint16_t"""
        return _PolyVoxCore.Vector3Dint16_t___isub__(self, rhs)


    def __imul__(self, *args) -> "PolyVox::Vector< 3,short,int > &":
        """
        __imul__(Vector3Dint16_t self, Vector3Dint16_t rhs) -> Vector3Dint16_t
        __imul__(Vector3Dint16_t self, short const & rhs) -> Vector3Dint16_t
        """
        return _PolyVoxCore.Vector3Dint16_t___imul__(self, *args)


    def __idiv__(self, *args) -> "PolyVox::Vector< 3,short,int > &":
        """
        __idiv__(Vector3Dint16_t self, Vector3Dint16_t rhs) -> Vector3Dint16_t
        __idiv__(Vector3Dint16_t self, short const & rhs) -> Vector3Dint16_t
        """
        return _PolyVoxCore.Vector3Dint16_t___idiv__(self, *args)


    def getElement(self, index: 'uint32_t') -> "short":
        """getElement(Vector3Dint16_t self, uint32_t index) -> short"""
        return _PolyVoxCore.Vector3Dint16_t_getElement(self, index)


    def getX(self) -> "short":
        """getX(Vector3Dint16_t self) -> short"""
        return _PolyVoxCore.Vector3Dint16_t_getX(self)


    def getY(self) -> "short":
        """getY(Vector3Dint16_t self) -> short"""
        return _PolyVoxCore.Vector3Dint16_t_getY(self)


    def getZ(self) -> "short":
        """getZ(Vector3Dint16_t self) -> short"""
        return _PolyVoxCore.Vector3Dint16_t_getZ(self)


    def setElement(self, index: 'uint32_t', tValue: 'short') -> "void":
        """setElement(Vector3Dint16_t self, uint32_t index, short tValue)"""
        return _PolyVoxCore.Vector3Dint16_t_setElement(self, index, tValue)


    def setElements(self, *args) -> "void":
        """
        setElements(Vector3Dint16_t self, short x, short y)
        setElements(Vector3Dint16_t self, short x, short y, short z)
        """
        return _PolyVoxCore.Vector3Dint16_t_setElements(self, *args)


    def setX(self, tX: 'short') -> "void":
        """setX(Vector3Dint16_t self, short tX)"""
        return _PolyVoxCore.Vector3Dint16_t_setX(self, tX)


    def setY(self, tY: 'short') -> "void":
        """setY(Vector3Dint16_t self, short tY)"""
        return _PolyVoxCore.Vector3Dint16_t_setY(self, tY)


    def setZ(self, tZ: 'short') -> "void":
        """setZ(Vector3Dint16_t self, short tZ)"""
        return _PolyVoxCore.Vector3Dint16_t_setZ(self, tZ)


    def length(self) -> "float":
        """length(Vector3Dint16_t self) -> float"""
        return _PolyVoxCore.Vector3Dint16_t_length(self)


    def lengthSquared(self) -> "int":
        """lengthSquared(Vector3Dint16_t self) -> int"""
        return _PolyVoxCore.Vector3Dint16_t_lengthSquared(self)


    def angleTo(self, vector: 'Vector3Dint16_t') -> "float":
        """angleTo(Vector3Dint16_t self, Vector3Dint16_t vector) -> float"""
        return _PolyVoxCore.Vector3Dint16_t_angleTo(self, vector)


    def cross(self, vector: 'Vector3Dint16_t') -> "PolyVox::Vector< 3,short,int >":
        """cross(Vector3Dint16_t self, Vector3Dint16_t vector) -> Vector3Dint16_t"""
        return _PolyVoxCore.Vector3Dint16_t_cross(self, vector)


    def dot(self, rhs: 'Vector3Dint16_t') -> "int":
        """dot(Vector3Dint16_t self, Vector3Dint16_t rhs) -> int"""
        return _PolyVoxCore.Vector3Dint16_t_dot(self, rhs)


    def normalise(self) -> "void":
        """normalise(Vector3Dint16_t self)"""
        return _PolyVoxCore.Vector3Dint16_t_normalise(self)


    __swig_getmethods__["x"] = getX
    __swig_setmethods__["x"] = setX
    if _newclass: x = property(getX, setX)


    __swig_getmethods__["y"] = getY
    __swig_setmethods__["y"] = setY
    if _newclass: y = property(getY, setY)


    __swig_getmethods__["z"] = getZ
    __swig_setmethods__["z"] = setZ
    if _newclass: z = property(getZ, setZ)


    def __add__(self, rhs: 'Vector3Dint16_t') -> "PolyVox::Vector< 3,int16_t,int32_t >":
        """__add__(Vector3Dint16_t self, Vector3Dint16_t rhs) -> Vector3Dint16_t"""
        return _PolyVoxCore.Vector3Dint16_t___add__(self, rhs)


    def __sub__(self, rhs: 'Vector3Dint16_t') -> "PolyVox::Vector< 3,int16_t,int32_t >":
        """__sub__(Vector3Dint16_t self, Vector3Dint16_t rhs) -> Vector3Dint16_t"""
        return _PolyVoxCore.Vector3Dint16_t___sub__(self, rhs)


    def __div__(self, *args) -> "PolyVox::Vector< 3,int16_t,int32_t >":
        """
        __div__(Vector3Dint16_t self, Vector3Dint16_t rhs) -> Vector3Dint16_t
        __div__(Vector3Dint16_t self, short const & rhs) -> Vector3Dint16_t
        """
        return _PolyVoxCore.Vector3Dint16_t___div__(self, *args)


    def __mul__(self, *args) -> "PolyVox::Vector< 3,int16_t,int32_t >":
        """
        __mul__(Vector3Dint16_t self, Vector3Dint16_t rhs) -> Vector3Dint16_t
        __mul__(Vector3Dint16_t self, short const & rhs) -> Vector3Dint16_t
        """
        return _PolyVoxCore.Vector3Dint16_t___mul__(self, *args)


    def __str__(self) -> "char const *":
        """__str__(Vector3Dint16_t self) -> char const *"""
        return _PolyVoxCore.Vector3Dint16_t___str__(self)

Vector3Dint16_t_swigregister = _PolyVoxCore.Vector3Dint16_t_swigregister
Vector3Dint16_t_swigregister(Vector3Dint16_t)

class Vector3Duint16_t(_object):
    """Proxy of C++ PolyVox::Vector<(3,uint16_t,int32_t)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector3Duint16_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector3Duint16_t, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::Vector<(3,uint16_t,int32_t)> self) -> Vector3Duint16_t
        __init__(PolyVox::Vector<(3,uint16_t,int32_t)> self, unsigned short tFillValue) -> Vector3Duint16_t
        __init__(PolyVox::Vector<(3,uint16_t,int32_t)> self, unsigned short x, unsigned short y, unsigned short z) -> Vector3Duint16_t
        __init__(PolyVox::Vector<(3,uint16_t,int32_t)> self, Vector3Duint16_t vector) -> Vector3Duint16_t
        """
        this = _PolyVoxCore.new_Vector3Duint16_t(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _PolyVoxCore.delete_Vector3Duint16_t
    __del__ = lambda self: None

    def assign(self, rhs: 'Vector3Duint16_t') -> "PolyVox::Vector< 3,unsigned short,int > &":
        """assign(Vector3Duint16_t self, Vector3Duint16_t rhs) -> Vector3Duint16_t"""
        return _PolyVoxCore.Vector3Duint16_t_assign(self, rhs)


    def __eq__(self, rhs: 'Vector3Duint16_t') -> "bool":
        """__eq__(Vector3Duint16_t self, Vector3Duint16_t rhs) -> bool"""
        return _PolyVoxCore.Vector3Duint16_t___eq__(self, rhs)


    def __ne__(self, rhs: 'Vector3Duint16_t') -> "bool":
        """__ne__(Vector3Duint16_t self, Vector3Duint16_t rhs) -> bool"""
        return _PolyVoxCore.Vector3Duint16_t___ne__(self, rhs)


    def __lt__(self, rhs: 'Vector3Duint16_t') -> "bool":
        """__lt__(Vector3Duint16_t self, Vector3Duint16_t rhs) -> bool"""

        import warnings
        warnings.warn("deprecated", DeprecationWarning)


        return _PolyVoxCore.Vector3Duint16_t___lt__(self, rhs)


    def __iadd__(self, rhs: 'Vector3Duint16_t') -> "PolyVox::Vector< 3,unsigned short,int > &":
        """__iadd__(Vector3Duint16_t self, Vector3Duint16_t rhs) -> Vector3Duint16_t"""
        return _PolyVoxCore.Vector3Duint16_t___iadd__(self, rhs)


    def __isub__(self, rhs: 'Vector3Duint16_t') -> "PolyVox::Vector< 3,unsigned short,int > &":
        """__isub__(Vector3Duint16_t self, Vector3Duint16_t rhs) -> Vector3Duint16_t"""
        return _PolyVoxCore.Vector3Duint16_t___isub__(self, rhs)


    def __imul__(self, *args) -> "PolyVox::Vector< 3,unsigned short,int > &":
        """
        __imul__(Vector3Duint16_t self, Vector3Duint16_t rhs) -> Vector3Duint16_t
        __imul__(Vector3Duint16_t self, unsigned short const & rhs) -> Vector3Duint16_t
        """
        return _PolyVoxCore.Vector3Duint16_t___imul__(self, *args)


    def __idiv__(self, *args) -> "PolyVox::Vector< 3,unsigned short,int > &":
        """
        __idiv__(Vector3Duint16_t self, Vector3Duint16_t rhs) -> Vector3Duint16_t
        __idiv__(Vector3Duint16_t self, unsigned short const & rhs) -> Vector3Duint16_t
        """
        return _PolyVoxCore.Vector3Duint16_t___idiv__(self, *args)


    def getElement(self, index: 'uint32_t') -> "unsigned short":
        """getElement(Vector3Duint16_t self, uint32_t index) -> unsigned short"""
        return _PolyVoxCore.Vector3Duint16_t_getElement(self, index)


    def getX(self) -> "unsigned short":
        """getX(Vector3Duint16_t self) -> unsigned short"""
        return _PolyVoxCore.Vector3Duint16_t_getX(self)


    def getY(self) -> "unsigned short":
        """getY(Vector3Duint16_t self) -> unsigned short"""
        return _PolyVoxCore.Vector3Duint16_t_getY(self)


    def getZ(self) -> "unsigned short":
        """getZ(Vector3Duint16_t self) -> unsigned short"""
        return _PolyVoxCore.Vector3Duint16_t_getZ(self)


    def setElement(self, index: 'uint32_t', tValue: 'unsigned short') -> "void":
        """setElement(Vector3Duint16_t self, uint32_t index, unsigned short tValue)"""
        return _PolyVoxCore.Vector3Duint16_t_setElement(self, index, tValue)


    def setElements(self, *args) -> "void":
        """
        setElements(Vector3Duint16_t self, unsigned short x, unsigned short y)
        setElements(Vector3Duint16_t self, unsigned short x, unsigned short y, unsigned short z)
        """
        return _PolyVoxCore.Vector3Duint16_t_setElements(self, *args)


    def setX(self, tX: 'unsigned short') -> "void":
        """setX(Vector3Duint16_t self, unsigned short tX)"""
        return _PolyVoxCore.Vector3Duint16_t_setX(self, tX)


    def setY(self, tY: 'unsigned short') -> "void":
        """setY(Vector3Duint16_t self, unsigned short tY)"""
        return _PolyVoxCore.Vector3Duint16_t_setY(self, tY)


    def setZ(self, tZ: 'unsigned short') -> "void":
        """setZ(Vector3Duint16_t self, unsigned short tZ)"""
        return _PolyVoxCore.Vector3Duint16_t_setZ(self, tZ)


    def length(self) -> "float":
        """length(Vector3Duint16_t self) -> float"""
        return _PolyVoxCore.Vector3Duint16_t_length(self)


    def lengthSquared(self) -> "int":
        """lengthSquared(Vector3Duint16_t self) -> int"""
        return _PolyVoxCore.Vector3Duint16_t_lengthSquared(self)


    def angleTo(self, vector: 'Vector3Duint16_t') -> "float":
        """angleTo(Vector3Duint16_t self, Vector3Duint16_t vector) -> float"""
        return _PolyVoxCore.Vector3Duint16_t_angleTo(self, vector)


    def cross(self, vector: 'Vector3Duint16_t') -> "PolyVox::Vector< 3,unsigned short,int >":
        """cross(Vector3Duint16_t self, Vector3Duint16_t vector) -> Vector3Duint16_t"""
        return _PolyVoxCore.Vector3Duint16_t_cross(self, vector)


    def dot(self, rhs: 'Vector3Duint16_t') -> "int":
        """dot(Vector3Duint16_t self, Vector3Duint16_t rhs) -> int"""
        return _PolyVoxCore.Vector3Duint16_t_dot(self, rhs)


    def normalise(self) -> "void":
        """normalise(Vector3Duint16_t self)"""
        return _PolyVoxCore.Vector3Duint16_t_normalise(self)


    __swig_getmethods__["x"] = getX
    __swig_setmethods__["x"] = setX
    if _newclass: x = property(getX, setX)


    __swig_getmethods__["y"] = getY
    __swig_setmethods__["y"] = setY
    if _newclass: y = property(getY, setY)


    __swig_getmethods__["z"] = getZ
    __swig_setmethods__["z"] = setZ
    if _newclass: z = property(getZ, setZ)


    def __add__(self, rhs: 'Vector3Duint16_t') -> "PolyVox::Vector< 3,uint16_t,int32_t >":
        """__add__(Vector3Duint16_t self, Vector3Duint16_t rhs) -> Vector3Duint16_t"""
        return _PolyVoxCore.Vector3Duint16_t___add__(self, rhs)


    def __sub__(self, rhs: 'Vector3Duint16_t') -> "PolyVox::Vector< 3,uint16_t,int32_t >":
        """__sub__(Vector3Duint16_t self, Vector3Duint16_t rhs) -> Vector3Duint16_t"""
        return _PolyVoxCore.Vector3Duint16_t___sub__(self, rhs)


    def __div__(self, *args) -> "PolyVox::Vector< 3,uint16_t,int32_t >":
        """
        __div__(Vector3Duint16_t self, Vector3Duint16_t rhs) -> Vector3Duint16_t
        __div__(Vector3Duint16_t self, unsigned short const & rhs) -> Vector3Duint16_t
        """
        return _PolyVoxCore.Vector3Duint16_t___div__(self, *args)


    def __mul__(self, *args) -> "PolyVox::Vector< 3,uint16_t,int32_t >":
        """
        __mul__(Vector3Duint16_t self, Vector3Duint16_t rhs) -> Vector3Duint16_t
        __mul__(Vector3Duint16_t self, unsigned short const & rhs) -> Vector3Duint16_t
        """
        return _PolyVoxCore.Vector3Duint16_t___mul__(self, *args)


    def __str__(self) -> "char const *":
        """__str__(Vector3Duint16_t self) -> char const *"""
        return _PolyVoxCore.Vector3Duint16_t___str__(self)

Vector3Duint16_t_swigregister = _PolyVoxCore.Vector3Duint16_t_swigregister
Vector3Duint16_t_swigregister(Vector3Duint16_t)

class Vector3Dint32_t(_object):
    """Proxy of C++ PolyVox::Vector<(3,int32_t,int32_t)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector3Dint32_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector3Dint32_t, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::Vector<(3,int32_t,int32_t)> self) -> Vector3Dint32_t
        __init__(PolyVox::Vector<(3,int32_t,int32_t)> self, int tFillValue) -> Vector3Dint32_t
        __init__(PolyVox::Vector<(3,int32_t,int32_t)> self, int x, int y, int z) -> Vector3Dint32_t
        __init__(PolyVox::Vector<(3,int32_t,int32_t)> self, Vector3Dint32_t vector) -> Vector3Dint32_t
        """
        this = _PolyVoxCore.new_Vector3Dint32_t(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _PolyVoxCore.delete_Vector3Dint32_t
    __del__ = lambda self: None

    def assign(self, rhs: 'Vector3Dint32_t') -> "PolyVox::Vector< 3,int,int > &":
        """assign(Vector3Dint32_t self, Vector3Dint32_t rhs) -> Vector3Dint32_t"""
        return _PolyVoxCore.Vector3Dint32_t_assign(self, rhs)


    def __eq__(self, rhs: 'Vector3Dint32_t') -> "bool":
        """__eq__(Vector3Dint32_t self, Vector3Dint32_t rhs) -> bool"""
        return _PolyVoxCore.Vector3Dint32_t___eq__(self, rhs)


    def __ne__(self, rhs: 'Vector3Dint32_t') -> "bool":
        """__ne__(Vector3Dint32_t self, Vector3Dint32_t rhs) -> bool"""
        return _PolyVoxCore.Vector3Dint32_t___ne__(self, rhs)


    def __lt__(self, rhs: 'Vector3Dint32_t') -> "bool":
        """__lt__(Vector3Dint32_t self, Vector3Dint32_t rhs) -> bool"""

        import warnings
        warnings.warn("deprecated", DeprecationWarning)


        return _PolyVoxCore.Vector3Dint32_t___lt__(self, rhs)


    def __iadd__(self, rhs: 'Vector3Dint32_t') -> "PolyVox::Vector< 3,int,int > &":
        """__iadd__(Vector3Dint32_t self, Vector3Dint32_t rhs) -> Vector3Dint32_t"""
        return _PolyVoxCore.Vector3Dint32_t___iadd__(self, rhs)


    def __isub__(self, rhs: 'Vector3Dint32_t') -> "PolyVox::Vector< 3,int,int > &":
        """__isub__(Vector3Dint32_t self, Vector3Dint32_t rhs) -> Vector3Dint32_t"""
        return _PolyVoxCore.Vector3Dint32_t___isub__(self, rhs)


    def __imul__(self, *args) -> "PolyVox::Vector< 3,int,int > &":
        """
        __imul__(Vector3Dint32_t self, Vector3Dint32_t rhs) -> Vector3Dint32_t
        __imul__(Vector3Dint32_t self, int const & rhs) -> Vector3Dint32_t
        """
        return _PolyVoxCore.Vector3Dint32_t___imul__(self, *args)


    def __idiv__(self, *args) -> "PolyVox::Vector< 3,int,int > &":
        """
        __idiv__(Vector3Dint32_t self, Vector3Dint32_t rhs) -> Vector3Dint32_t
        __idiv__(Vector3Dint32_t self, int const & rhs) -> Vector3Dint32_t
        """
        return _PolyVoxCore.Vector3Dint32_t___idiv__(self, *args)


    def getElement(self, index: 'uint32_t') -> "int":
        """getElement(Vector3Dint32_t self, uint32_t index) -> int"""
        return _PolyVoxCore.Vector3Dint32_t_getElement(self, index)


    def getX(self) -> "int":
        """getX(Vector3Dint32_t self) -> int"""
        return _PolyVoxCore.Vector3Dint32_t_getX(self)


    def getY(self) -> "int":
        """getY(Vector3Dint32_t self) -> int"""
        return _PolyVoxCore.Vector3Dint32_t_getY(self)


    def getZ(self) -> "int":
        """getZ(Vector3Dint32_t self) -> int"""
        return _PolyVoxCore.Vector3Dint32_t_getZ(self)


    def setElement(self, index: 'uint32_t', tValue: 'int') -> "void":
        """setElement(Vector3Dint32_t self, uint32_t index, int tValue)"""
        return _PolyVoxCore.Vector3Dint32_t_setElement(self, index, tValue)


    def setElements(self, *args) -> "void":
        """
        setElements(Vector3Dint32_t self, int x, int y)
        setElements(Vector3Dint32_t self, int x, int y, int z)
        """
        return _PolyVoxCore.Vector3Dint32_t_setElements(self, *args)


    def setX(self, tX: 'int') -> "void":
        """setX(Vector3Dint32_t self, int tX)"""
        return _PolyVoxCore.Vector3Dint32_t_setX(self, tX)


    def setY(self, tY: 'int') -> "void":
        """setY(Vector3Dint32_t self, int tY)"""
        return _PolyVoxCore.Vector3Dint32_t_setY(self, tY)


    def setZ(self, tZ: 'int') -> "void":
        """setZ(Vector3Dint32_t self, int tZ)"""
        return _PolyVoxCore.Vector3Dint32_t_setZ(self, tZ)


    def length(self) -> "float":
        """length(Vector3Dint32_t self) -> float"""
        return _PolyVoxCore.Vector3Dint32_t_length(self)


    def lengthSquared(self) -> "int":
        """lengthSquared(Vector3Dint32_t self) -> int"""
        return _PolyVoxCore.Vector3Dint32_t_lengthSquared(self)


    def angleTo(self, vector: 'Vector3Dint32_t') -> "float":
        """angleTo(Vector3Dint32_t self, Vector3Dint32_t vector) -> float"""
        return _PolyVoxCore.Vector3Dint32_t_angleTo(self, vector)


    def cross(self, vector: 'Vector3Dint32_t') -> "PolyVox::Vector< 3,int,int >":
        """cross(Vector3Dint32_t self, Vector3Dint32_t vector) -> Vector3Dint32_t"""
        return _PolyVoxCore.Vector3Dint32_t_cross(self, vector)


    def dot(self, rhs: 'Vector3Dint32_t') -> "int":
        """dot(Vector3Dint32_t self, Vector3Dint32_t rhs) -> int"""
        return _PolyVoxCore.Vector3Dint32_t_dot(self, rhs)


    def normalise(self) -> "void":
        """normalise(Vector3Dint32_t self)"""
        return _PolyVoxCore.Vector3Dint32_t_normalise(self)


    __swig_getmethods__["x"] = getX
    __swig_setmethods__["x"] = setX
    if _newclass: x = property(getX, setX)


    __swig_getmethods__["y"] = getY
    __swig_setmethods__["y"] = setY
    if _newclass: y = property(getY, setY)


    __swig_getmethods__["z"] = getZ
    __swig_setmethods__["z"] = setZ
    if _newclass: z = property(getZ, setZ)


    def __add__(self, rhs: 'Vector3Dint32_t') -> "PolyVox::Vector< 3,int32_t,int32_t >":
        """__add__(Vector3Dint32_t self, Vector3Dint32_t rhs) -> Vector3Dint32_t"""
        return _PolyVoxCore.Vector3Dint32_t___add__(self, rhs)


    def __sub__(self, rhs: 'Vector3Dint32_t') -> "PolyVox::Vector< 3,int32_t,int32_t >":
        """__sub__(Vector3Dint32_t self, Vector3Dint32_t rhs) -> Vector3Dint32_t"""
        return _PolyVoxCore.Vector3Dint32_t___sub__(self, rhs)


    def __div__(self, *args) -> "PolyVox::Vector< 3,int32_t,int32_t >":
        """
        __div__(Vector3Dint32_t self, Vector3Dint32_t rhs) -> Vector3Dint32_t
        __div__(Vector3Dint32_t self, int const & rhs) -> Vector3Dint32_t
        """
        return _PolyVoxCore.Vector3Dint32_t___div__(self, *args)


    def __mul__(self, *args) -> "PolyVox::Vector< 3,int32_t,int32_t >":
        """
        __mul__(Vector3Dint32_t self, Vector3Dint32_t rhs) -> Vector3Dint32_t
        __mul__(Vector3Dint32_t self, int const & rhs) -> Vector3Dint32_t
        """
        return _PolyVoxCore.Vector3Dint32_t___mul__(self, *args)


    def __str__(self) -> "char const *":
        """__str__(Vector3Dint32_t self) -> char const *"""
        return _PolyVoxCore.Vector3Dint32_t___str__(self)

Vector3Dint32_t_swigregister = _PolyVoxCore.Vector3Dint32_t_swigregister
Vector3Dint32_t_swigregister(Vector3Dint32_t)

class Vector3Duint32_t(_object):
    """Proxy of C++ PolyVox::Vector<(3,uint32_t,int32_t)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector3Duint32_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector3Duint32_t, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::Vector<(3,uint32_t,int32_t)> self) -> Vector3Duint32_t
        __init__(PolyVox::Vector<(3,uint32_t,int32_t)> self, unsigned int tFillValue) -> Vector3Duint32_t
        __init__(PolyVox::Vector<(3,uint32_t,int32_t)> self, unsigned int x, unsigned int y, unsigned int z) -> Vector3Duint32_t
        __init__(PolyVox::Vector<(3,uint32_t,int32_t)> self, Vector3Duint32_t vector) -> Vector3Duint32_t
        """
        this = _PolyVoxCore.new_Vector3Duint32_t(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _PolyVoxCore.delete_Vector3Duint32_t
    __del__ = lambda self: None

    def assign(self, rhs: 'Vector3Duint32_t') -> "PolyVox::Vector< 3,unsigned int,int > &":
        """assign(Vector3Duint32_t self, Vector3Duint32_t rhs) -> Vector3Duint32_t"""
        return _PolyVoxCore.Vector3Duint32_t_assign(self, rhs)


    def __eq__(self, rhs: 'Vector3Duint32_t') -> "bool":
        """__eq__(Vector3Duint32_t self, Vector3Duint32_t rhs) -> bool"""
        return _PolyVoxCore.Vector3Duint32_t___eq__(self, rhs)


    def __ne__(self, rhs: 'Vector3Duint32_t') -> "bool":
        """__ne__(Vector3Duint32_t self, Vector3Duint32_t rhs) -> bool"""
        return _PolyVoxCore.Vector3Duint32_t___ne__(self, rhs)


    def __lt__(self, rhs: 'Vector3Duint32_t') -> "bool":
        """__lt__(Vector3Duint32_t self, Vector3Duint32_t rhs) -> bool"""

        import warnings
        warnings.warn("deprecated", DeprecationWarning)


        return _PolyVoxCore.Vector3Duint32_t___lt__(self, rhs)


    def __iadd__(self, rhs: 'Vector3Duint32_t') -> "PolyVox::Vector< 3,unsigned int,int > &":
        """__iadd__(Vector3Duint32_t self, Vector3Duint32_t rhs) -> Vector3Duint32_t"""
        return _PolyVoxCore.Vector3Duint32_t___iadd__(self, rhs)


    def __isub__(self, rhs: 'Vector3Duint32_t') -> "PolyVox::Vector< 3,unsigned int,int > &":
        """__isub__(Vector3Duint32_t self, Vector3Duint32_t rhs) -> Vector3Duint32_t"""
        return _PolyVoxCore.Vector3Duint32_t___isub__(self, rhs)


    def __imul__(self, *args) -> "PolyVox::Vector< 3,unsigned int,int > &":
        """
        __imul__(Vector3Duint32_t self, Vector3Duint32_t rhs) -> Vector3Duint32_t
        __imul__(Vector3Duint32_t self, unsigned int const & rhs) -> Vector3Duint32_t
        """
        return _PolyVoxCore.Vector3Duint32_t___imul__(self, *args)


    def __idiv__(self, *args) -> "PolyVox::Vector< 3,unsigned int,int > &":
        """
        __idiv__(Vector3Duint32_t self, Vector3Duint32_t rhs) -> Vector3Duint32_t
        __idiv__(Vector3Duint32_t self, unsigned int const & rhs) -> Vector3Duint32_t
        """
        return _PolyVoxCore.Vector3Duint32_t___idiv__(self, *args)


    def getElement(self, index: 'uint32_t') -> "unsigned int":
        """getElement(Vector3Duint32_t self, uint32_t index) -> unsigned int"""
        return _PolyVoxCore.Vector3Duint32_t_getElement(self, index)


    def getX(self) -> "unsigned int":
        """getX(Vector3Duint32_t self) -> unsigned int"""
        return _PolyVoxCore.Vector3Duint32_t_getX(self)


    def getY(self) -> "unsigned int":
        """getY(Vector3Duint32_t self) -> unsigned int"""
        return _PolyVoxCore.Vector3Duint32_t_getY(self)


    def getZ(self) -> "unsigned int":
        """getZ(Vector3Duint32_t self) -> unsigned int"""
        return _PolyVoxCore.Vector3Duint32_t_getZ(self)


    def setElement(self, index: 'uint32_t', tValue: 'unsigned int') -> "void":
        """setElement(Vector3Duint32_t self, uint32_t index, unsigned int tValue)"""
        return _PolyVoxCore.Vector3Duint32_t_setElement(self, index, tValue)


    def setElements(self, *args) -> "void":
        """
        setElements(Vector3Duint32_t self, unsigned int x, unsigned int y)
        setElements(Vector3Duint32_t self, unsigned int x, unsigned int y, unsigned int z)
        """
        return _PolyVoxCore.Vector3Duint32_t_setElements(self, *args)


    def setX(self, tX: 'unsigned int') -> "void":
        """setX(Vector3Duint32_t self, unsigned int tX)"""
        return _PolyVoxCore.Vector3Duint32_t_setX(self, tX)


    def setY(self, tY: 'unsigned int') -> "void":
        """setY(Vector3Duint32_t self, unsigned int tY)"""
        return _PolyVoxCore.Vector3Duint32_t_setY(self, tY)


    def setZ(self, tZ: 'unsigned int') -> "void":
        """setZ(Vector3Duint32_t self, unsigned int tZ)"""
        return _PolyVoxCore.Vector3Duint32_t_setZ(self, tZ)


    def length(self) -> "float":
        """length(Vector3Duint32_t self) -> float"""
        return _PolyVoxCore.Vector3Duint32_t_length(self)


    def lengthSquared(self) -> "int":
        """lengthSquared(Vector3Duint32_t self) -> int"""
        return _PolyVoxCore.Vector3Duint32_t_lengthSquared(self)


    def angleTo(self, vector: 'Vector3Duint32_t') -> "float":
        """angleTo(Vector3Duint32_t self, Vector3Duint32_t vector) -> float"""
        return _PolyVoxCore.Vector3Duint32_t_angleTo(self, vector)


    def cross(self, vector: 'Vector3Duint32_t') -> "PolyVox::Vector< 3,unsigned int,int >":
        """cross(Vector3Duint32_t self, Vector3Duint32_t vector) -> Vector3Duint32_t"""
        return _PolyVoxCore.Vector3Duint32_t_cross(self, vector)


    def dot(self, rhs: 'Vector3Duint32_t') -> "int":
        """dot(Vector3Duint32_t self, Vector3Duint32_t rhs) -> int"""
        return _PolyVoxCore.Vector3Duint32_t_dot(self, rhs)


    def normalise(self) -> "void":
        """normalise(Vector3Duint32_t self)"""
        return _PolyVoxCore.Vector3Duint32_t_normalise(self)


    __swig_getmethods__["x"] = getX
    __swig_setmethods__["x"] = setX
    if _newclass: x = property(getX, setX)


    __swig_getmethods__["y"] = getY
    __swig_setmethods__["y"] = setY
    if _newclass: y = property(getY, setY)


    __swig_getmethods__["z"] = getZ
    __swig_setmethods__["z"] = setZ
    if _newclass: z = property(getZ, setZ)


    def __add__(self, rhs: 'Vector3Duint32_t') -> "PolyVox::Vector< 3,uint32_t,int32_t >":
        """__add__(Vector3Duint32_t self, Vector3Duint32_t rhs) -> Vector3Duint32_t"""
        return _PolyVoxCore.Vector3Duint32_t___add__(self, rhs)


    def __sub__(self, rhs: 'Vector3Duint32_t') -> "PolyVox::Vector< 3,uint32_t,int32_t >":
        """__sub__(Vector3Duint32_t self, Vector3Duint32_t rhs) -> Vector3Duint32_t"""
        return _PolyVoxCore.Vector3Duint32_t___sub__(self, rhs)


    def __div__(self, *args) -> "PolyVox::Vector< 3,uint32_t,int32_t >":
        """
        __div__(Vector3Duint32_t self, Vector3Duint32_t rhs) -> Vector3Duint32_t
        __div__(Vector3Duint32_t self, unsigned int const & rhs) -> Vector3Duint32_t
        """
        return _PolyVoxCore.Vector3Duint32_t___div__(self, *args)


    def __mul__(self, *args) -> "PolyVox::Vector< 3,uint32_t,int32_t >":
        """
        __mul__(Vector3Duint32_t self, Vector3Duint32_t rhs) -> Vector3Duint32_t
        __mul__(Vector3Duint32_t self, unsigned int const & rhs) -> Vector3Duint32_t
        """
        return _PolyVoxCore.Vector3Duint32_t___mul__(self, *args)


    def __str__(self) -> "char const *":
        """__str__(Vector3Duint32_t self) -> char const *"""
        return _PolyVoxCore.Vector3Duint32_t___str__(self)

Vector3Duint32_t_swigregister = _PolyVoxCore.Vector3Duint32_t_swigregister
Vector3Duint32_t_swigregister(Vector3Duint32_t)

class Region(_object):
    """Proxy of C++ PolyVox::Region class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Region, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Region, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::Region self) -> Region
        __init__(PolyVox::Region self, Vector3Dint32_t v3dLowerCorner, Vector3Dint32_t v3dUpperCorner) -> Region
        __init__(PolyVox::Region self, int32_t iLowerX, int32_t iLowerY, int32_t iLowerZ, int32_t iUpperX, int32_t iUpperY, int32_t iUpperZ) -> Region
        """
        this = _PolyVoxCore.new_Region(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __eq__(self, rhs: 'Region') -> "bool":
        """__eq__(Region self, Region rhs) -> bool"""
        return _PolyVoxCore.Region___eq__(self, rhs)


    def __ne__(self, rhs: 'Region') -> "bool":
        """__ne__(Region self, Region rhs) -> bool"""
        return _PolyVoxCore.Region___ne__(self, rhs)


    def getLowerX(self) -> "int32_t":
        """getLowerX(Region self) -> int32_t"""
        return _PolyVoxCore.Region_getLowerX(self)


    def getLowerY(self) -> "int32_t":
        """getLowerY(Region self) -> int32_t"""
        return _PolyVoxCore.Region_getLowerY(self)


    def getLowerZ(self) -> "int32_t":
        """getLowerZ(Region self) -> int32_t"""
        return _PolyVoxCore.Region_getLowerZ(self)


    def getUpperX(self) -> "int32_t":
        """getUpperX(Region self) -> int32_t"""
        return _PolyVoxCore.Region_getUpperX(self)


    def getUpperY(self) -> "int32_t":
        """getUpperY(Region self) -> int32_t"""
        return _PolyVoxCore.Region_getUpperY(self)


    def getUpperZ(self) -> "int32_t":
        """getUpperZ(Region self) -> int32_t"""
        return _PolyVoxCore.Region_getUpperZ(self)


    def getLowerCorner(self) -> "PolyVox::Vector3DInt32":
        """getLowerCorner(Region self) -> Vector3Dint32_t"""
        return _PolyVoxCore.Region_getLowerCorner(self)


    def getUpperCorner(self) -> "PolyVox::Vector3DInt32":
        """getUpperCorner(Region self) -> Vector3Dint32_t"""
        return _PolyVoxCore.Region_getUpperCorner(self)


    def getWidthInVoxels(self) -> "int32_t":
        """getWidthInVoxels(Region self) -> int32_t"""
        return _PolyVoxCore.Region_getWidthInVoxels(self)


    def getHeightInVoxels(self) -> "int32_t":
        """getHeightInVoxels(Region self) -> int32_t"""
        return _PolyVoxCore.Region_getHeightInVoxels(self)


    def getDepthInVoxels(self) -> "int32_t":
        """getDepthInVoxels(Region self) -> int32_t"""
        return _PolyVoxCore.Region_getDepthInVoxels(self)


    def getDimensionsInVoxels(self) -> "PolyVox::Vector3DInt32":
        """getDimensionsInVoxels(Region self) -> Vector3Dint32_t"""
        return _PolyVoxCore.Region_getDimensionsInVoxels(self)


    def getWidthInCells(self) -> "int32_t":
        """getWidthInCells(Region self) -> int32_t"""
        return _PolyVoxCore.Region_getWidthInCells(self)


    def getHeightInCells(self) -> "int32_t":
        """getHeightInCells(Region self) -> int32_t"""
        return _PolyVoxCore.Region_getHeightInCells(self)


    def getDepthInCells(self) -> "int32_t":
        """getDepthInCells(Region self) -> int32_t"""
        return _PolyVoxCore.Region_getDepthInCells(self)


    def getDimensionsInCells(self) -> "PolyVox::Vector3DInt32":
        """getDimensionsInCells(Region self) -> Vector3Dint32_t"""
        return _PolyVoxCore.Region_getDimensionsInCells(self)


    def setLowerX(self, iX: 'int32_t') -> "void":
        """setLowerX(Region self, int32_t iX)"""
        return _PolyVoxCore.Region_setLowerX(self, iX)


    def setLowerY(self, iY: 'int32_t') -> "void":
        """setLowerY(Region self, int32_t iY)"""
        return _PolyVoxCore.Region_setLowerY(self, iY)


    def setLowerZ(self, iZ: 'int32_t') -> "void":
        """setLowerZ(Region self, int32_t iZ)"""
        return _PolyVoxCore.Region_setLowerZ(self, iZ)


    def setUpperX(self, iX: 'int32_t') -> "void":
        """setUpperX(Region self, int32_t iX)"""
        return _PolyVoxCore.Region_setUpperX(self, iX)


    def setUpperY(self, iY: 'int32_t') -> "void":
        """setUpperY(Region self, int32_t iY)"""
        return _PolyVoxCore.Region_setUpperY(self, iY)


    def setUpperZ(self, iZ: 'int32_t') -> "void":
        """setUpperZ(Region self, int32_t iZ)"""
        return _PolyVoxCore.Region_setUpperZ(self, iZ)


    def setLowerCorner(self, v3dLowerCorner: 'Vector3Dint32_t') -> "void":
        """setLowerCorner(Region self, Vector3Dint32_t v3dLowerCorner)"""
        return _PolyVoxCore.Region_setLowerCorner(self, v3dLowerCorner)


    def setUpperCorner(self, v3dUpperCorner: 'Vector3Dint32_t') -> "void":
        """setUpperCorner(Region self, Vector3Dint32_t v3dUpperCorner)"""
        return _PolyVoxCore.Region_setUpperCorner(self, v3dUpperCorner)


    def containsPoint(self, *args) -> "bool":
        """
        containsPoint(Region self, float fX, float fY, float fZ, float boundary=0.0) -> bool
        containsPoint(Region self, float fX, float fY, float fZ) -> bool
        containsPoint(Region self, Vector3Dfloat pos, float boundary=0.0) -> bool
        containsPoint(Region self, Vector3Dfloat pos) -> bool
        containsPoint(Region self, int32_t iX, int32_t iY, int32_t iZ, uint8_t boundary=0) -> bool
        containsPoint(Region self, int32_t iX, int32_t iY, int32_t iZ) -> bool
        containsPoint(Region self, Vector3Dint32_t pos, uint8_t boundary=0) -> bool
        containsPoint(Region self, Vector3Dint32_t pos) -> bool
        """
        return _PolyVoxCore.Region_containsPoint(self, *args)


    def containsPointInX(self, *args) -> "bool":
        """
        containsPointInX(Region self, float pos, float boundary=0.0) -> bool
        containsPointInX(Region self, float pos) -> bool
        containsPointInX(Region self, int32_t pos, uint8_t boundary=0) -> bool
        containsPointInX(Region self, int32_t pos) -> bool
        """
        return _PolyVoxCore.Region_containsPointInX(self, *args)


    def containsPointInY(self, *args) -> "bool":
        """
        containsPointInY(Region self, float pos, float boundary=0.0) -> bool
        containsPointInY(Region self, float pos) -> bool
        containsPointInY(Region self, int32_t pos, uint8_t boundary=0) -> bool
        containsPointInY(Region self, int32_t pos) -> bool
        """
        return _PolyVoxCore.Region_containsPointInY(self, *args)


    def containsPointInZ(self, *args) -> "bool":
        """
        containsPointInZ(Region self, float pos, float boundary=0.0) -> bool
        containsPointInZ(Region self, float pos) -> bool
        containsPointInZ(Region self, int32_t pos, uint8_t boundary=0) -> bool
        containsPointInZ(Region self, int32_t pos) -> bool
        """
        return _PolyVoxCore.Region_containsPointInZ(self, *args)


    def accumulate(self, *args) -> "void":
        """
        accumulate(Region self, int32_t iX, int32_t iY, int32_t iZ)
        accumulate(Region self, Vector3Dint32_t v3dPos)
        accumulate(Region self, Region reg)
        """
        return _PolyVoxCore.Region_accumulate(self, *args)


    def cropTo(self, other: 'Region') -> "void":
        """cropTo(Region self, Region other)"""
        return _PolyVoxCore.Region_cropTo(self, other)


    def grow(self, *args) -> "void":
        """
        grow(Region self, int32_t iAmount)
        grow(Region self, int32_t iAmountX, int32_t iAmountY, int32_t iAmountZ)
        grow(Region self, Vector3Dint32_t v3dAmount)
        """
        return _PolyVoxCore.Region_grow(self, *args)


    def isValid(self) -> "bool":
        """isValid(Region self) -> bool"""
        return _PolyVoxCore.Region_isValid(self)


    def shift(self, *args) -> "void":
        """
        shift(Region self, int32_t iAmountX, int32_t iAmountY, int32_t iAmountZ)
        shift(Region self, Vector3Dint32_t v3dAmount)
        """
        return _PolyVoxCore.Region_shift(self, *args)


    def shiftLowerCorner(self, *args) -> "void":
        """
        shiftLowerCorner(Region self, int32_t iAmountX, int32_t iAmountY, int32_t iAmountZ)
        shiftLowerCorner(Region self, Vector3Dint32_t v3dAmount)
        """
        return _PolyVoxCore.Region_shiftLowerCorner(self, *args)


    def shiftUpperCorner(self, *args) -> "void":
        """
        shiftUpperCorner(Region self, int32_t iAmountX, int32_t iAmountY, int32_t iAmountZ)
        shiftUpperCorner(Region self, Vector3Dint32_t v3dAmount)
        """
        return _PolyVoxCore.Region_shiftUpperCorner(self, *args)


    def shrink(self, *args) -> "void":
        """
        shrink(Region self, int32_t iAmount)
        shrink(Region self, int32_t iAmountX, int32_t iAmountY, int32_t iAmountZ)
        shrink(Region self, Vector3Dint32_t v3dAmount)
        """
        return _PolyVoxCore.Region_shrink(self, *args)

    __swig_destroy__ = _PolyVoxCore.delete_Region
    __del__ = lambda self: None
Region_swigregister = _PolyVoxCore.Region_swigregister
Region_swigregister(Region)
cvar = _PolyVoxCore.cvar
Region.MaxRegion = _PolyVoxCore.cvar.Region_MaxRegion
Region.InvertedRegion = _PolyVoxCore.cvar.Region_InvertedRegion

class Compressor(_object):
    """Proxy of C++ PolyVox::Compressor class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Compressor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Compressor, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PolyVoxCore.delete_Compressor
    __del__ = lambda self: None

    def getMaxCompressedSize(self, uUncompressedInputSize: 'uint32_t') -> "uint32_t":
        """getMaxCompressedSize(Compressor self, uint32_t uUncompressedInputSize) -> uint32_t"""
        return _PolyVoxCore.Compressor_getMaxCompressedSize(self, uUncompressedInputSize)


    def compress(self, pSrcData: 'void *', uSrcLength: 'uint32_t', pDstData: 'void *', uDstLength: 'uint32_t') -> "uint32_t":
        """compress(Compressor self, void * pSrcData, uint32_t uSrcLength, void * pDstData, uint32_t uDstLength) -> uint32_t"""
        return _PolyVoxCore.Compressor_compress(self, pSrcData, uSrcLength, pDstData, uDstLength)


    def decompress(self, pSrcData: 'void *', uSrcLength: 'uint32_t', pDstData: 'void *', uDstLength: 'uint32_t') -> "uint32_t":
        """decompress(Compressor self, void * pSrcData, uint32_t uSrcLength, void * pDstData, uint32_t uDstLength) -> uint32_t"""
        return _PolyVoxCore.Compressor_decompress(self, pSrcData, uSrcLength, pDstData, uDstLength)

Compressor_swigregister = _PolyVoxCore.Compressor_swigregister
Compressor_swigregister(Compressor)

class MinizCompressor(Compressor):
    """Proxy of C++ PolyVox::MinizCompressor class."""

    __swig_setmethods__ = {}
    for _s in [Compressor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MinizCompressor, name, value)
    __swig_getmethods__ = {}
    for _s in [Compressor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MinizCompressor, name)
    __repr__ = _swig_repr

    def __init__(self, iCompressionLevel: 'int'=6):
        """
        __init__(PolyVox::MinizCompressor self, int iCompressionLevel=6) -> MinizCompressor
        __init__(PolyVox::MinizCompressor self) -> MinizCompressor
        """
        this = _PolyVoxCore.new_MinizCompressor(iCompressionLevel)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _PolyVoxCore.delete_MinizCompressor
    __del__ = lambda self: None

    def getMaxCompressedSize(self, uUncompressedInputSize: 'uint32_t') -> "uint32_t":
        """getMaxCompressedSize(MinizCompressor self, uint32_t uUncompressedInputSize) -> uint32_t"""
        return _PolyVoxCore.MinizCompressor_getMaxCompressedSize(self, uUncompressedInputSize)


    def compress(self, pSrcData: 'void *', uSrcLength: 'uint32_t', pDstData: 'void *', uDstLength: 'uint32_t') -> "uint32_t":
        """compress(MinizCompressor self, void * pSrcData, uint32_t uSrcLength, void * pDstData, uint32_t uDstLength) -> uint32_t"""
        return _PolyVoxCore.MinizCompressor_compress(self, pSrcData, uSrcLength, pDstData, uDstLength)


    def decompress(self, pSrcData: 'void *', uSrcLength: 'uint32_t', pDstData: 'void *', uDstLength: 'uint32_t') -> "uint32_t":
        """decompress(MinizCompressor self, void * pSrcData, uint32_t uSrcLength, void * pDstData, uint32_t uDstLength) -> uint32_t"""
        return _PolyVoxCore.MinizCompressor_decompress(self, pSrcData, uSrcLength, pDstData, uDstLength)

MinizCompressor_swigregister = _PolyVoxCore.MinizCompressor_swigregister
MinizCompressor_swigregister(MinizCompressor)


_PolyVoxCore.Clamp_swigconstant(_PolyVoxCore)
Clamp = _PolyVoxCore.Clamp

_PolyVoxCore.Border_swigconstant(_PolyVoxCore)
Border = _PolyVoxCore.Border
class BaseVolumeint8(_object):
    """Proxy of C++ PolyVox::BaseVolume<(int8_t)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseVolumeint8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseVolumeint8, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getBorderValue(self) -> "PolyVox::BaseVolume< signed char >::VoxelType":
        """getBorderValue(BaseVolumeint8 self) -> PolyVox::BaseVolume< signed char >::VoxelType"""
        return _PolyVoxCore.BaseVolumeint8_getBorderValue(self)


    def getEnclosingRegion(self) -> "PolyVox::Region const &":
        """getEnclosingRegion(BaseVolumeint8 self) -> Region"""
        return _PolyVoxCore.BaseVolumeint8_getEnclosingRegion(self)


    def getWidth(self) -> "int32_t":
        """getWidth(BaseVolumeint8 self) -> int32_t"""
        return _PolyVoxCore.BaseVolumeint8_getWidth(self)


    def getHeight(self) -> "int32_t":
        """getHeight(BaseVolumeint8 self) -> int32_t"""
        return _PolyVoxCore.BaseVolumeint8_getHeight(self)


    def getDepth(self) -> "int32_t":
        """getDepth(BaseVolumeint8 self) -> int32_t"""
        return _PolyVoxCore.BaseVolumeint8_getDepth(self)


    def getLongestSideLength(self) -> "int32_t":
        """getLongestSideLength(BaseVolumeint8 self) -> int32_t"""
        return _PolyVoxCore.BaseVolumeint8_getLongestSideLength(self)


    def getShortestSideLength(self) -> "int32_t":
        """getShortestSideLength(BaseVolumeint8 self) -> int32_t"""
        return _PolyVoxCore.BaseVolumeint8_getShortestSideLength(self)


    def getDiagonalLength(self) -> "float":
        """getDiagonalLength(BaseVolumeint8 self) -> float"""
        return _PolyVoxCore.BaseVolumeint8_getDiagonalLength(self)


    def getVoxel(self, *args) -> "PolyVox::BaseVolume< signed char >::VoxelType":
        """
        getVoxel(BaseVolumeint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> PolyVox::BaseVolume< signed char >::VoxelType
        getVoxel(BaseVolumeint8 self, Vector3Dint32_t v3dPos) -> PolyVox::BaseVolume< signed char >::VoxelType
        """
        return _PolyVoxCore.BaseVolumeint8_getVoxel(self, *args)


    def getVoxelAt(self, *args) -> "PolyVox::BaseVolume< signed char >::VoxelType":
        """
        getVoxelAt(BaseVolumeint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> PolyVox::BaseVolume< signed char >::VoxelType
        getVoxelAt(BaseVolumeint8 self, Vector3Dint32_t v3dPos) -> PolyVox::BaseVolume< signed char >::VoxelType
        """
        return _PolyVoxCore.BaseVolumeint8_getVoxelAt(self, *args)


    def getVoxelWithWrapping(self, *args) -> "PolyVox::BaseVolume< signed char >::VoxelType":
        """
        getVoxelWithWrapping(BaseVolumeint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode, PolyVox::BaseVolume< signed char >::VoxelType tBorder) -> PolyVox::BaseVolume< signed char >::VoxelType
        getVoxelWithWrapping(BaseVolumeint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode) -> PolyVox::BaseVolume< signed char >::VoxelType
        getVoxelWithWrapping(BaseVolumeint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> PolyVox::BaseVolume< signed char >::VoxelType
        getVoxelWithWrapping(BaseVolumeint8 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode, PolyVox::BaseVolume< signed char >::VoxelType tBorder) -> PolyVox::BaseVolume< signed char >::VoxelType
        getVoxelWithWrapping(BaseVolumeint8 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode) -> PolyVox::BaseVolume< signed char >::VoxelType
        getVoxelWithWrapping(BaseVolumeint8 self, Vector3Dint32_t v3dPos) -> PolyVox::BaseVolume< signed char >::VoxelType
        """
        return _PolyVoxCore.BaseVolumeint8_getVoxelWithWrapping(self, *args)


    def setBorderValue(self, tBorder: 'PolyVox::BaseVolume< signed char >::VoxelType const &') -> "void":
        """setBorderValue(BaseVolumeint8 self, PolyVox::BaseVolume< signed char >::VoxelType const & tBorder)"""
        return _PolyVoxCore.BaseVolumeint8_setBorderValue(self, tBorder)


    def setVoxelAt(self, *args) -> "bool":
        """
        setVoxelAt(BaseVolumeint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::BaseVolume< signed char >::VoxelType tValue) -> bool
        setVoxelAt(BaseVolumeint8 self, Vector3Dint32_t v3dPos, PolyVox::BaseVolume< signed char >::VoxelType tValue) -> bool
        """
        return _PolyVoxCore.BaseVolumeint8_setVoxelAt(self, *args)


    def calculateSizeInBytes(self) -> "uint32_t":
        """calculateSizeInBytes(BaseVolumeint8 self) -> uint32_t"""
        return _PolyVoxCore.BaseVolumeint8_calculateSizeInBytes(self)

BaseVolumeint8_swigregister = _PolyVoxCore.BaseVolumeint8_swigregister
BaseVolumeint8_swigregister(BaseVolumeint8)

class BaseVolumeint16(_object):
    """Proxy of C++ PolyVox::BaseVolume<(int16_t)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseVolumeint16, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseVolumeint16, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getBorderValue(self) -> "PolyVox::BaseVolume< short >::VoxelType":
        """getBorderValue(BaseVolumeint16 self) -> PolyVox::BaseVolume< short >::VoxelType"""
        return _PolyVoxCore.BaseVolumeint16_getBorderValue(self)


    def getEnclosingRegion(self) -> "PolyVox::Region const &":
        """getEnclosingRegion(BaseVolumeint16 self) -> Region"""
        return _PolyVoxCore.BaseVolumeint16_getEnclosingRegion(self)


    def getWidth(self) -> "int32_t":
        """getWidth(BaseVolumeint16 self) -> int32_t"""
        return _PolyVoxCore.BaseVolumeint16_getWidth(self)


    def getHeight(self) -> "int32_t":
        """getHeight(BaseVolumeint16 self) -> int32_t"""
        return _PolyVoxCore.BaseVolumeint16_getHeight(self)


    def getDepth(self) -> "int32_t":
        """getDepth(BaseVolumeint16 self) -> int32_t"""
        return _PolyVoxCore.BaseVolumeint16_getDepth(self)


    def getLongestSideLength(self) -> "int32_t":
        """getLongestSideLength(BaseVolumeint16 self) -> int32_t"""
        return _PolyVoxCore.BaseVolumeint16_getLongestSideLength(self)


    def getShortestSideLength(self) -> "int32_t":
        """getShortestSideLength(BaseVolumeint16 self) -> int32_t"""
        return _PolyVoxCore.BaseVolumeint16_getShortestSideLength(self)


    def getDiagonalLength(self) -> "float":
        """getDiagonalLength(BaseVolumeint16 self) -> float"""
        return _PolyVoxCore.BaseVolumeint16_getDiagonalLength(self)


    def getVoxel(self, *args) -> "PolyVox::BaseVolume< short >::VoxelType":
        """
        getVoxel(BaseVolumeint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> PolyVox::BaseVolume< short >::VoxelType
        getVoxel(BaseVolumeint16 self, Vector3Dint32_t v3dPos) -> PolyVox::BaseVolume< short >::VoxelType
        """
        return _PolyVoxCore.BaseVolumeint16_getVoxel(self, *args)


    def getVoxelAt(self, *args) -> "PolyVox::BaseVolume< short >::VoxelType":
        """
        getVoxelAt(BaseVolumeint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> PolyVox::BaseVolume< short >::VoxelType
        getVoxelAt(BaseVolumeint16 self, Vector3Dint32_t v3dPos) -> PolyVox::BaseVolume< short >::VoxelType
        """
        return _PolyVoxCore.BaseVolumeint16_getVoxelAt(self, *args)


    def getVoxelWithWrapping(self, *args) -> "PolyVox::BaseVolume< short >::VoxelType":
        """
        getVoxelWithWrapping(BaseVolumeint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode, PolyVox::BaseVolume< short >::VoxelType tBorder) -> PolyVox::BaseVolume< short >::VoxelType
        getVoxelWithWrapping(BaseVolumeint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode) -> PolyVox::BaseVolume< short >::VoxelType
        getVoxelWithWrapping(BaseVolumeint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> PolyVox::BaseVolume< short >::VoxelType
        getVoxelWithWrapping(BaseVolumeint16 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode, PolyVox::BaseVolume< short >::VoxelType tBorder) -> PolyVox::BaseVolume< short >::VoxelType
        getVoxelWithWrapping(BaseVolumeint16 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode) -> PolyVox::BaseVolume< short >::VoxelType
        getVoxelWithWrapping(BaseVolumeint16 self, Vector3Dint32_t v3dPos) -> PolyVox::BaseVolume< short >::VoxelType
        """
        return _PolyVoxCore.BaseVolumeint16_getVoxelWithWrapping(self, *args)


    def setBorderValue(self, tBorder: 'PolyVox::BaseVolume< short >::VoxelType const &') -> "void":
        """setBorderValue(BaseVolumeint16 self, PolyVox::BaseVolume< short >::VoxelType const & tBorder)"""
        return _PolyVoxCore.BaseVolumeint16_setBorderValue(self, tBorder)


    def setVoxelAt(self, *args) -> "bool":
        """
        setVoxelAt(BaseVolumeint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::BaseVolume< short >::VoxelType tValue) -> bool
        setVoxelAt(BaseVolumeint16 self, Vector3Dint32_t v3dPos, PolyVox::BaseVolume< short >::VoxelType tValue) -> bool
        """
        return _PolyVoxCore.BaseVolumeint16_setVoxelAt(self, *args)


    def calculateSizeInBytes(self) -> "uint32_t":
        """calculateSizeInBytes(BaseVolumeint16 self) -> uint32_t"""
        return _PolyVoxCore.BaseVolumeint16_calculateSizeInBytes(self)

BaseVolumeint16_swigregister = _PolyVoxCore.BaseVolumeint16_swigregister
BaseVolumeint16_swigregister(BaseVolumeint16)

class BaseVolumeint32(_object):
    """Proxy of C++ PolyVox::BaseVolume<(int32_t)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseVolumeint32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseVolumeint32, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getBorderValue(self) -> "PolyVox::BaseVolume< int >::VoxelType":
        """getBorderValue(BaseVolumeint32 self) -> PolyVox::BaseVolume< int >::VoxelType"""
        return _PolyVoxCore.BaseVolumeint32_getBorderValue(self)


    def getEnclosingRegion(self) -> "PolyVox::Region const &":
        """getEnclosingRegion(BaseVolumeint32 self) -> Region"""
        return _PolyVoxCore.BaseVolumeint32_getEnclosingRegion(self)


    def getWidth(self) -> "int32_t":
        """getWidth(BaseVolumeint32 self) -> int32_t"""
        return _PolyVoxCore.BaseVolumeint32_getWidth(self)


    def getHeight(self) -> "int32_t":
        """getHeight(BaseVolumeint32 self) -> int32_t"""
        return _PolyVoxCore.BaseVolumeint32_getHeight(self)


    def getDepth(self) -> "int32_t":
        """getDepth(BaseVolumeint32 self) -> int32_t"""
        return _PolyVoxCore.BaseVolumeint32_getDepth(self)


    def getLongestSideLength(self) -> "int32_t":
        """getLongestSideLength(BaseVolumeint32 self) -> int32_t"""
        return _PolyVoxCore.BaseVolumeint32_getLongestSideLength(self)


    def getShortestSideLength(self) -> "int32_t":
        """getShortestSideLength(BaseVolumeint32 self) -> int32_t"""
        return _PolyVoxCore.BaseVolumeint32_getShortestSideLength(self)


    def getDiagonalLength(self) -> "float":
        """getDiagonalLength(BaseVolumeint32 self) -> float"""
        return _PolyVoxCore.BaseVolumeint32_getDiagonalLength(self)


    def getVoxel(self, *args) -> "PolyVox::BaseVolume< int >::VoxelType":
        """
        getVoxel(BaseVolumeint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> PolyVox::BaseVolume< int >::VoxelType
        getVoxel(BaseVolumeint32 self, Vector3Dint32_t v3dPos) -> PolyVox::BaseVolume< int >::VoxelType
        """
        return _PolyVoxCore.BaseVolumeint32_getVoxel(self, *args)


    def getVoxelAt(self, *args) -> "PolyVox::BaseVolume< int >::VoxelType":
        """
        getVoxelAt(BaseVolumeint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> PolyVox::BaseVolume< int >::VoxelType
        getVoxelAt(BaseVolumeint32 self, Vector3Dint32_t v3dPos) -> PolyVox::BaseVolume< int >::VoxelType
        """
        return _PolyVoxCore.BaseVolumeint32_getVoxelAt(self, *args)


    def getVoxelWithWrapping(self, *args) -> "PolyVox::BaseVolume< int >::VoxelType":
        """
        getVoxelWithWrapping(BaseVolumeint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode, PolyVox::BaseVolume< int >::VoxelType tBorder) -> PolyVox::BaseVolume< int >::VoxelType
        getVoxelWithWrapping(BaseVolumeint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode) -> PolyVox::BaseVolume< int >::VoxelType
        getVoxelWithWrapping(BaseVolumeint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> PolyVox::BaseVolume< int >::VoxelType
        getVoxelWithWrapping(BaseVolumeint32 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode, PolyVox::BaseVolume< int >::VoxelType tBorder) -> PolyVox::BaseVolume< int >::VoxelType
        getVoxelWithWrapping(BaseVolumeint32 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode) -> PolyVox::BaseVolume< int >::VoxelType
        getVoxelWithWrapping(BaseVolumeint32 self, Vector3Dint32_t v3dPos) -> PolyVox::BaseVolume< int >::VoxelType
        """
        return _PolyVoxCore.BaseVolumeint32_getVoxelWithWrapping(self, *args)


    def setBorderValue(self, tBorder: 'PolyVox::BaseVolume< int >::VoxelType const &') -> "void":
        """setBorderValue(BaseVolumeint32 self, PolyVox::BaseVolume< int >::VoxelType const & tBorder)"""
        return _PolyVoxCore.BaseVolumeint32_setBorderValue(self, tBorder)


    def setVoxelAt(self, *args) -> "bool":
        """
        setVoxelAt(BaseVolumeint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::BaseVolume< int >::VoxelType tValue) -> bool
        setVoxelAt(BaseVolumeint32 self, Vector3Dint32_t v3dPos, PolyVox::BaseVolume< int >::VoxelType tValue) -> bool
        """
        return _PolyVoxCore.BaseVolumeint32_setVoxelAt(self, *args)


    def calculateSizeInBytes(self) -> "uint32_t":
        """calculateSizeInBytes(BaseVolumeint32 self) -> uint32_t"""
        return _PolyVoxCore.BaseVolumeint32_calculateSizeInBytes(self)

BaseVolumeint32_swigregister = _PolyVoxCore.BaseVolumeint32_swigregister
BaseVolumeint32_swigregister(BaseVolumeint32)

class BaseVolumeuint8(_object):
    """Proxy of C++ PolyVox::BaseVolume<(uint8_t)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseVolumeuint8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseVolumeuint8, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getBorderValue(self) -> "PolyVox::BaseVolume< unsigned char >::VoxelType":
        """getBorderValue(BaseVolumeuint8 self) -> PolyVox::BaseVolume< unsigned char >::VoxelType"""
        return _PolyVoxCore.BaseVolumeuint8_getBorderValue(self)


    def getEnclosingRegion(self) -> "PolyVox::Region const &":
        """getEnclosingRegion(BaseVolumeuint8 self) -> Region"""
        return _PolyVoxCore.BaseVolumeuint8_getEnclosingRegion(self)


    def getWidth(self) -> "int32_t":
        """getWidth(BaseVolumeuint8 self) -> int32_t"""
        return _PolyVoxCore.BaseVolumeuint8_getWidth(self)


    def getHeight(self) -> "int32_t":
        """getHeight(BaseVolumeuint8 self) -> int32_t"""
        return _PolyVoxCore.BaseVolumeuint8_getHeight(self)


    def getDepth(self) -> "int32_t":
        """getDepth(BaseVolumeuint8 self) -> int32_t"""
        return _PolyVoxCore.BaseVolumeuint8_getDepth(self)


    def getLongestSideLength(self) -> "int32_t":
        """getLongestSideLength(BaseVolumeuint8 self) -> int32_t"""
        return _PolyVoxCore.BaseVolumeuint8_getLongestSideLength(self)


    def getShortestSideLength(self) -> "int32_t":
        """getShortestSideLength(BaseVolumeuint8 self) -> int32_t"""
        return _PolyVoxCore.BaseVolumeuint8_getShortestSideLength(self)


    def getDiagonalLength(self) -> "float":
        """getDiagonalLength(BaseVolumeuint8 self) -> float"""
        return _PolyVoxCore.BaseVolumeuint8_getDiagonalLength(self)


    def getVoxel(self, *args) -> "PolyVox::BaseVolume< unsigned char >::VoxelType":
        """
        getVoxel(BaseVolumeuint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> PolyVox::BaseVolume< unsigned char >::VoxelType
        getVoxel(BaseVolumeuint8 self, Vector3Dint32_t v3dPos) -> PolyVox::BaseVolume< unsigned char >::VoxelType
        """
        return _PolyVoxCore.BaseVolumeuint8_getVoxel(self, *args)


    def getVoxelAt(self, *args) -> "PolyVox::BaseVolume< unsigned char >::VoxelType":
        """
        getVoxelAt(BaseVolumeuint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> PolyVox::BaseVolume< unsigned char >::VoxelType
        getVoxelAt(BaseVolumeuint8 self, Vector3Dint32_t v3dPos) -> PolyVox::BaseVolume< unsigned char >::VoxelType
        """
        return _PolyVoxCore.BaseVolumeuint8_getVoxelAt(self, *args)


    def getVoxelWithWrapping(self, *args) -> "PolyVox::BaseVolume< unsigned char >::VoxelType":
        """
        getVoxelWithWrapping(BaseVolumeuint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode, PolyVox::BaseVolume< unsigned char >::VoxelType tBorder) -> PolyVox::BaseVolume< unsigned char >::VoxelType
        getVoxelWithWrapping(BaseVolumeuint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode) -> PolyVox::BaseVolume< unsigned char >::VoxelType
        getVoxelWithWrapping(BaseVolumeuint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> PolyVox::BaseVolume< unsigned char >::VoxelType
        getVoxelWithWrapping(BaseVolumeuint8 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode, PolyVox::BaseVolume< unsigned char >::VoxelType tBorder) -> PolyVox::BaseVolume< unsigned char >::VoxelType
        getVoxelWithWrapping(BaseVolumeuint8 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode) -> PolyVox::BaseVolume< unsigned char >::VoxelType
        getVoxelWithWrapping(BaseVolumeuint8 self, Vector3Dint32_t v3dPos) -> PolyVox::BaseVolume< unsigned char >::VoxelType
        """
        return _PolyVoxCore.BaseVolumeuint8_getVoxelWithWrapping(self, *args)


    def setBorderValue(self, tBorder: 'PolyVox::BaseVolume< unsigned char >::VoxelType const &') -> "void":
        """setBorderValue(BaseVolumeuint8 self, PolyVox::BaseVolume< unsigned char >::VoxelType const & tBorder)"""
        return _PolyVoxCore.BaseVolumeuint8_setBorderValue(self, tBorder)


    def setVoxelAt(self, *args) -> "bool":
        """
        setVoxelAt(BaseVolumeuint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::BaseVolume< unsigned char >::VoxelType tValue) -> bool
        setVoxelAt(BaseVolumeuint8 self, Vector3Dint32_t v3dPos, PolyVox::BaseVolume< unsigned char >::VoxelType tValue) -> bool
        """
        return _PolyVoxCore.BaseVolumeuint8_setVoxelAt(self, *args)


    def calculateSizeInBytes(self) -> "uint32_t":
        """calculateSizeInBytes(BaseVolumeuint8 self) -> uint32_t"""
        return _PolyVoxCore.BaseVolumeuint8_calculateSizeInBytes(self)

BaseVolumeuint8_swigregister = _PolyVoxCore.BaseVolumeuint8_swigregister
BaseVolumeuint8_swigregister(BaseVolumeuint8)

class BaseVolumeuint16(_object):
    """Proxy of C++ PolyVox::BaseVolume<(uint16_t)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseVolumeuint16, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseVolumeuint16, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getBorderValue(self) -> "PolyVox::BaseVolume< unsigned short >::VoxelType":
        """getBorderValue(BaseVolumeuint16 self) -> PolyVox::BaseVolume< unsigned short >::VoxelType"""
        return _PolyVoxCore.BaseVolumeuint16_getBorderValue(self)


    def getEnclosingRegion(self) -> "PolyVox::Region const &":
        """getEnclosingRegion(BaseVolumeuint16 self) -> Region"""
        return _PolyVoxCore.BaseVolumeuint16_getEnclosingRegion(self)


    def getWidth(self) -> "int32_t":
        """getWidth(BaseVolumeuint16 self) -> int32_t"""
        return _PolyVoxCore.BaseVolumeuint16_getWidth(self)


    def getHeight(self) -> "int32_t":
        """getHeight(BaseVolumeuint16 self) -> int32_t"""
        return _PolyVoxCore.BaseVolumeuint16_getHeight(self)


    def getDepth(self) -> "int32_t":
        """getDepth(BaseVolumeuint16 self) -> int32_t"""
        return _PolyVoxCore.BaseVolumeuint16_getDepth(self)


    def getLongestSideLength(self) -> "int32_t":
        """getLongestSideLength(BaseVolumeuint16 self) -> int32_t"""
        return _PolyVoxCore.BaseVolumeuint16_getLongestSideLength(self)


    def getShortestSideLength(self) -> "int32_t":
        """getShortestSideLength(BaseVolumeuint16 self) -> int32_t"""
        return _PolyVoxCore.BaseVolumeuint16_getShortestSideLength(self)


    def getDiagonalLength(self) -> "float":
        """getDiagonalLength(BaseVolumeuint16 self) -> float"""
        return _PolyVoxCore.BaseVolumeuint16_getDiagonalLength(self)


    def getVoxel(self, *args) -> "PolyVox::BaseVolume< unsigned short >::VoxelType":
        """
        getVoxel(BaseVolumeuint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> PolyVox::BaseVolume< unsigned short >::VoxelType
        getVoxel(BaseVolumeuint16 self, Vector3Dint32_t v3dPos) -> PolyVox::BaseVolume< unsigned short >::VoxelType
        """
        return _PolyVoxCore.BaseVolumeuint16_getVoxel(self, *args)


    def getVoxelAt(self, *args) -> "PolyVox::BaseVolume< unsigned short >::VoxelType":
        """
        getVoxelAt(BaseVolumeuint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> PolyVox::BaseVolume< unsigned short >::VoxelType
        getVoxelAt(BaseVolumeuint16 self, Vector3Dint32_t v3dPos) -> PolyVox::BaseVolume< unsigned short >::VoxelType
        """
        return _PolyVoxCore.BaseVolumeuint16_getVoxelAt(self, *args)


    def getVoxelWithWrapping(self, *args) -> "PolyVox::BaseVolume< unsigned short >::VoxelType":
        """
        getVoxelWithWrapping(BaseVolumeuint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode, PolyVox::BaseVolume< unsigned short >::VoxelType tBorder) -> PolyVox::BaseVolume< unsigned short >::VoxelType
        getVoxelWithWrapping(BaseVolumeuint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode) -> PolyVox::BaseVolume< unsigned short >::VoxelType
        getVoxelWithWrapping(BaseVolumeuint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> PolyVox::BaseVolume< unsigned short >::VoxelType
        getVoxelWithWrapping(BaseVolumeuint16 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode, PolyVox::BaseVolume< unsigned short >::VoxelType tBorder) -> PolyVox::BaseVolume< unsigned short >::VoxelType
        getVoxelWithWrapping(BaseVolumeuint16 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode) -> PolyVox::BaseVolume< unsigned short >::VoxelType
        getVoxelWithWrapping(BaseVolumeuint16 self, Vector3Dint32_t v3dPos) -> PolyVox::BaseVolume< unsigned short >::VoxelType
        """
        return _PolyVoxCore.BaseVolumeuint16_getVoxelWithWrapping(self, *args)


    def setBorderValue(self, tBorder: 'PolyVox::BaseVolume< unsigned short >::VoxelType const &') -> "void":
        """setBorderValue(BaseVolumeuint16 self, PolyVox::BaseVolume< unsigned short >::VoxelType const & tBorder)"""
        return _PolyVoxCore.BaseVolumeuint16_setBorderValue(self, tBorder)


    def setVoxelAt(self, *args) -> "bool":
        """
        setVoxelAt(BaseVolumeuint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::BaseVolume< unsigned short >::VoxelType tValue) -> bool
        setVoxelAt(BaseVolumeuint16 self, Vector3Dint32_t v3dPos, PolyVox::BaseVolume< unsigned short >::VoxelType tValue) -> bool
        """
        return _PolyVoxCore.BaseVolumeuint16_setVoxelAt(self, *args)


    def calculateSizeInBytes(self) -> "uint32_t":
        """calculateSizeInBytes(BaseVolumeuint16 self) -> uint32_t"""
        return _PolyVoxCore.BaseVolumeuint16_calculateSizeInBytes(self)

BaseVolumeuint16_swigregister = _PolyVoxCore.BaseVolumeuint16_swigregister
BaseVolumeuint16_swigregister(BaseVolumeuint16)

class BaseVolumeuint32(_object):
    """Proxy of C++ PolyVox::BaseVolume<(uint32_t)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseVolumeuint32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseVolumeuint32, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getBorderValue(self) -> "PolyVox::BaseVolume< unsigned int >::VoxelType":
        """getBorderValue(BaseVolumeuint32 self) -> PolyVox::BaseVolume< unsigned int >::VoxelType"""
        return _PolyVoxCore.BaseVolumeuint32_getBorderValue(self)


    def getEnclosingRegion(self) -> "PolyVox::Region const &":
        """getEnclosingRegion(BaseVolumeuint32 self) -> Region"""
        return _PolyVoxCore.BaseVolumeuint32_getEnclosingRegion(self)


    def getWidth(self) -> "int32_t":
        """getWidth(BaseVolumeuint32 self) -> int32_t"""
        return _PolyVoxCore.BaseVolumeuint32_getWidth(self)


    def getHeight(self) -> "int32_t":
        """getHeight(BaseVolumeuint32 self) -> int32_t"""
        return _PolyVoxCore.BaseVolumeuint32_getHeight(self)


    def getDepth(self) -> "int32_t":
        """getDepth(BaseVolumeuint32 self) -> int32_t"""
        return _PolyVoxCore.BaseVolumeuint32_getDepth(self)


    def getLongestSideLength(self) -> "int32_t":
        """getLongestSideLength(BaseVolumeuint32 self) -> int32_t"""
        return _PolyVoxCore.BaseVolumeuint32_getLongestSideLength(self)


    def getShortestSideLength(self) -> "int32_t":
        """getShortestSideLength(BaseVolumeuint32 self) -> int32_t"""
        return _PolyVoxCore.BaseVolumeuint32_getShortestSideLength(self)


    def getDiagonalLength(self) -> "float":
        """getDiagonalLength(BaseVolumeuint32 self) -> float"""
        return _PolyVoxCore.BaseVolumeuint32_getDiagonalLength(self)


    def getVoxel(self, *args) -> "PolyVox::BaseVolume< unsigned int >::VoxelType":
        """
        getVoxel(BaseVolumeuint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> PolyVox::BaseVolume< unsigned int >::VoxelType
        getVoxel(BaseVolumeuint32 self, Vector3Dint32_t v3dPos) -> PolyVox::BaseVolume< unsigned int >::VoxelType
        """
        return _PolyVoxCore.BaseVolumeuint32_getVoxel(self, *args)


    def getVoxelAt(self, *args) -> "PolyVox::BaseVolume< unsigned int >::VoxelType":
        """
        getVoxelAt(BaseVolumeuint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> PolyVox::BaseVolume< unsigned int >::VoxelType
        getVoxelAt(BaseVolumeuint32 self, Vector3Dint32_t v3dPos) -> PolyVox::BaseVolume< unsigned int >::VoxelType
        """
        return _PolyVoxCore.BaseVolumeuint32_getVoxelAt(self, *args)


    def getVoxelWithWrapping(self, *args) -> "PolyVox::BaseVolume< unsigned int >::VoxelType":
        """
        getVoxelWithWrapping(BaseVolumeuint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode, PolyVox::BaseVolume< unsigned int >::VoxelType tBorder) -> PolyVox::BaseVolume< unsigned int >::VoxelType
        getVoxelWithWrapping(BaseVolumeuint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode) -> PolyVox::BaseVolume< unsigned int >::VoxelType
        getVoxelWithWrapping(BaseVolumeuint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> PolyVox::BaseVolume< unsigned int >::VoxelType
        getVoxelWithWrapping(BaseVolumeuint32 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode, PolyVox::BaseVolume< unsigned int >::VoxelType tBorder) -> PolyVox::BaseVolume< unsigned int >::VoxelType
        getVoxelWithWrapping(BaseVolumeuint32 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode) -> PolyVox::BaseVolume< unsigned int >::VoxelType
        getVoxelWithWrapping(BaseVolumeuint32 self, Vector3Dint32_t v3dPos) -> PolyVox::BaseVolume< unsigned int >::VoxelType
        """
        return _PolyVoxCore.BaseVolumeuint32_getVoxelWithWrapping(self, *args)


    def setBorderValue(self, tBorder: 'PolyVox::BaseVolume< unsigned int >::VoxelType const &') -> "void":
        """setBorderValue(BaseVolumeuint32 self, PolyVox::BaseVolume< unsigned int >::VoxelType const & tBorder)"""
        return _PolyVoxCore.BaseVolumeuint32_setBorderValue(self, tBorder)


    def setVoxelAt(self, *args) -> "bool":
        """
        setVoxelAt(BaseVolumeuint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::BaseVolume< unsigned int >::VoxelType tValue) -> bool
        setVoxelAt(BaseVolumeuint32 self, Vector3Dint32_t v3dPos, PolyVox::BaseVolume< unsigned int >::VoxelType tValue) -> bool
        """
        return _PolyVoxCore.BaseVolumeuint32_setVoxelAt(self, *args)


    def calculateSizeInBytes(self) -> "uint32_t":
        """calculateSizeInBytes(BaseVolumeuint32 self) -> uint32_t"""
        return _PolyVoxCore.BaseVolumeuint32_calculateSizeInBytes(self)

BaseVolumeuint32_swigregister = _PolyVoxCore.BaseVolumeuint32_swigregister
BaseVolumeuint32_swigregister(BaseVolumeuint32)

class BaseVolumefloat(_object):
    """Proxy of C++ PolyVox::BaseVolume<(float)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseVolumefloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseVolumefloat, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getBorderValue(self) -> "PolyVox::BaseVolume< float >::VoxelType":
        """getBorderValue(BaseVolumefloat self) -> PolyVox::BaseVolume< float >::VoxelType"""
        return _PolyVoxCore.BaseVolumefloat_getBorderValue(self)


    def getEnclosingRegion(self) -> "PolyVox::Region const &":
        """getEnclosingRegion(BaseVolumefloat self) -> Region"""
        return _PolyVoxCore.BaseVolumefloat_getEnclosingRegion(self)


    def getWidth(self) -> "int32_t":
        """getWidth(BaseVolumefloat self) -> int32_t"""
        return _PolyVoxCore.BaseVolumefloat_getWidth(self)


    def getHeight(self) -> "int32_t":
        """getHeight(BaseVolumefloat self) -> int32_t"""
        return _PolyVoxCore.BaseVolumefloat_getHeight(self)


    def getDepth(self) -> "int32_t":
        """getDepth(BaseVolumefloat self) -> int32_t"""
        return _PolyVoxCore.BaseVolumefloat_getDepth(self)


    def getLongestSideLength(self) -> "int32_t":
        """getLongestSideLength(BaseVolumefloat self) -> int32_t"""
        return _PolyVoxCore.BaseVolumefloat_getLongestSideLength(self)


    def getShortestSideLength(self) -> "int32_t":
        """getShortestSideLength(BaseVolumefloat self) -> int32_t"""
        return _PolyVoxCore.BaseVolumefloat_getShortestSideLength(self)


    def getDiagonalLength(self) -> "float":
        """getDiagonalLength(BaseVolumefloat self) -> float"""
        return _PolyVoxCore.BaseVolumefloat_getDiagonalLength(self)


    def getVoxel(self, *args) -> "PolyVox::BaseVolume< float >::VoxelType":
        """
        getVoxel(BaseVolumefloat self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> PolyVox::BaseVolume< float >::VoxelType
        getVoxel(BaseVolumefloat self, Vector3Dint32_t v3dPos) -> PolyVox::BaseVolume< float >::VoxelType
        """
        return _PolyVoxCore.BaseVolumefloat_getVoxel(self, *args)


    def getVoxelAt(self, *args) -> "PolyVox::BaseVolume< float >::VoxelType":
        """
        getVoxelAt(BaseVolumefloat self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> PolyVox::BaseVolume< float >::VoxelType
        getVoxelAt(BaseVolumefloat self, Vector3Dint32_t v3dPos) -> PolyVox::BaseVolume< float >::VoxelType
        """
        return _PolyVoxCore.BaseVolumefloat_getVoxelAt(self, *args)


    def getVoxelWithWrapping(self, *args) -> "PolyVox::BaseVolume< float >::VoxelType":
        """
        getVoxelWithWrapping(BaseVolumefloat self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode, PolyVox::BaseVolume< float >::VoxelType tBorder) -> PolyVox::BaseVolume< float >::VoxelType
        getVoxelWithWrapping(BaseVolumefloat self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode) -> PolyVox::BaseVolume< float >::VoxelType
        getVoxelWithWrapping(BaseVolumefloat self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> PolyVox::BaseVolume< float >::VoxelType
        getVoxelWithWrapping(BaseVolumefloat self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode, PolyVox::BaseVolume< float >::VoxelType tBorder) -> PolyVox::BaseVolume< float >::VoxelType
        getVoxelWithWrapping(BaseVolumefloat self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode) -> PolyVox::BaseVolume< float >::VoxelType
        getVoxelWithWrapping(BaseVolumefloat self, Vector3Dint32_t v3dPos) -> PolyVox::BaseVolume< float >::VoxelType
        """
        return _PolyVoxCore.BaseVolumefloat_getVoxelWithWrapping(self, *args)


    def setBorderValue(self, tBorder: 'PolyVox::BaseVolume< float >::VoxelType const &') -> "void":
        """setBorderValue(BaseVolumefloat self, PolyVox::BaseVolume< float >::VoxelType const & tBorder)"""
        return _PolyVoxCore.BaseVolumefloat_setBorderValue(self, tBorder)


    def setVoxelAt(self, *args) -> "bool":
        """
        setVoxelAt(BaseVolumefloat self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::BaseVolume< float >::VoxelType tValue) -> bool
        setVoxelAt(BaseVolumefloat self, Vector3Dint32_t v3dPos, PolyVox::BaseVolume< float >::VoxelType tValue) -> bool
        """
        return _PolyVoxCore.BaseVolumefloat_setVoxelAt(self, *args)


    def calculateSizeInBytes(self) -> "uint32_t":
        """calculateSizeInBytes(BaseVolumefloat self) -> uint32_t"""
        return _PolyVoxCore.BaseVolumefloat_calculateSizeInBytes(self)

BaseVolumefloat_swigregister = _PolyVoxCore.BaseVolumefloat_swigregister
BaseVolumefloat_swigregister(BaseVolumefloat)

class SimpleVolumeint8(BaseVolumeint8):
    """Proxy of C++ PolyVox::SimpleVolume<(int8_t)> class."""

    __swig_setmethods__ = {}
    for _s in [BaseVolumeint8]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleVolumeint8, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseVolumeint8]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleVolumeint8, name)
    __repr__ = _swig_repr

    def __init__(self, regValid: 'Region', uBlockSideLength: 'uint16_t'=32):
        """
        __init__(PolyVox::SimpleVolume<(int8_t)> self, Region regValid, uint16_t uBlockSideLength=32) -> SimpleVolumeint8
        __init__(PolyVox::SimpleVolume<(int8_t)> self, Region regValid) -> SimpleVolumeint8
        """
        this = _PolyVoxCore.new_SimpleVolumeint8(regValid, uBlockSideLength)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _PolyVoxCore.delete_SimpleVolumeint8
    __del__ = lambda self: None

    def getVoxel(self, *args) -> "signed char":
        """
        getVoxel(SimpleVolumeint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> signed char
        getVoxel(SimpleVolumeint8 self, Vector3Dint32_t v3dPos) -> signed char
        """
        return _PolyVoxCore.SimpleVolumeint8_getVoxel(self, *args)


    def getVoxelAt(self, *args) -> "signed char":
        """
        getVoxelAt(SimpleVolumeint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> signed char
        getVoxelAt(SimpleVolumeint8 self, Vector3Dint32_t v3dPos) -> signed char
        """
        return _PolyVoxCore.SimpleVolumeint8_getVoxelAt(self, *args)


    def getVoxelWithWrapping(self, *args) -> "signed char":
        """
        getVoxelWithWrapping(SimpleVolumeint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode, signed char tBorder) -> signed char
        getVoxelWithWrapping(SimpleVolumeint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode) -> signed char
        getVoxelWithWrapping(SimpleVolumeint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> signed char
        getVoxelWithWrapping(SimpleVolumeint8 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode, signed char tBorder) -> signed char
        getVoxelWithWrapping(SimpleVolumeint8 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode) -> signed char
        getVoxelWithWrapping(SimpleVolumeint8 self, Vector3Dint32_t v3dPos) -> signed char
        """
        return _PolyVoxCore.SimpleVolumeint8_getVoxelWithWrapping(self, *args)


    def setVoxelAt(self, *args) -> "bool":
        """
        setVoxelAt(SimpleVolumeint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, signed char tValue) -> bool
        setVoxelAt(SimpleVolumeint8 self, Vector3Dint32_t v3dPos, signed char tValue) -> bool
        """
        return _PolyVoxCore.SimpleVolumeint8_setVoxelAt(self, *args)


    def calculateSizeInBytes(self) -> "uint32_t":
        """calculateSizeInBytes(SimpleVolumeint8 self) -> uint32_t"""
        return _PolyVoxCore.SimpleVolumeint8_calculateSizeInBytes(self)

SimpleVolumeint8_swigregister = _PolyVoxCore.SimpleVolumeint8_swigregister
SimpleVolumeint8_swigregister(SimpleVolumeint8)

class SimpleVolumeint16(BaseVolumeint16):
    """Proxy of C++ PolyVox::SimpleVolume<(int16_t)> class."""

    __swig_setmethods__ = {}
    for _s in [BaseVolumeint16]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleVolumeint16, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseVolumeint16]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleVolumeint16, name)
    __repr__ = _swig_repr

    def __init__(self, regValid: 'Region', uBlockSideLength: 'uint16_t'=32):
        """
        __init__(PolyVox::SimpleVolume<(int16_t)> self, Region regValid, uint16_t uBlockSideLength=32) -> SimpleVolumeint16
        __init__(PolyVox::SimpleVolume<(int16_t)> self, Region regValid) -> SimpleVolumeint16
        """
        this = _PolyVoxCore.new_SimpleVolumeint16(regValid, uBlockSideLength)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _PolyVoxCore.delete_SimpleVolumeint16
    __del__ = lambda self: None

    def getVoxel(self, *args) -> "short":
        """
        getVoxel(SimpleVolumeint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> short
        getVoxel(SimpleVolumeint16 self, Vector3Dint32_t v3dPos) -> short
        """
        return _PolyVoxCore.SimpleVolumeint16_getVoxel(self, *args)


    def getVoxelAt(self, *args) -> "short":
        """
        getVoxelAt(SimpleVolumeint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> short
        getVoxelAt(SimpleVolumeint16 self, Vector3Dint32_t v3dPos) -> short
        """
        return _PolyVoxCore.SimpleVolumeint16_getVoxelAt(self, *args)


    def getVoxelWithWrapping(self, *args) -> "short":
        """
        getVoxelWithWrapping(SimpleVolumeint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode, short tBorder) -> short
        getVoxelWithWrapping(SimpleVolumeint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode) -> short
        getVoxelWithWrapping(SimpleVolumeint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> short
        getVoxelWithWrapping(SimpleVolumeint16 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode, short tBorder) -> short
        getVoxelWithWrapping(SimpleVolumeint16 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode) -> short
        getVoxelWithWrapping(SimpleVolumeint16 self, Vector3Dint32_t v3dPos) -> short
        """
        return _PolyVoxCore.SimpleVolumeint16_getVoxelWithWrapping(self, *args)


    def setVoxelAt(self, *args) -> "bool":
        """
        setVoxelAt(SimpleVolumeint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, short tValue) -> bool
        setVoxelAt(SimpleVolumeint16 self, Vector3Dint32_t v3dPos, short tValue) -> bool
        """
        return _PolyVoxCore.SimpleVolumeint16_setVoxelAt(self, *args)


    def calculateSizeInBytes(self) -> "uint32_t":
        """calculateSizeInBytes(SimpleVolumeint16 self) -> uint32_t"""
        return _PolyVoxCore.SimpleVolumeint16_calculateSizeInBytes(self)

SimpleVolumeint16_swigregister = _PolyVoxCore.SimpleVolumeint16_swigregister
SimpleVolumeint16_swigregister(SimpleVolumeint16)

class SimpleVolumeint32(BaseVolumeint32):
    """Proxy of C++ PolyVox::SimpleVolume<(int32_t)> class."""

    __swig_setmethods__ = {}
    for _s in [BaseVolumeint32]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleVolumeint32, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseVolumeint32]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleVolumeint32, name)
    __repr__ = _swig_repr

    def __init__(self, regValid: 'Region', uBlockSideLength: 'uint16_t'=32):
        """
        __init__(PolyVox::SimpleVolume<(int32_t)> self, Region regValid, uint16_t uBlockSideLength=32) -> SimpleVolumeint32
        __init__(PolyVox::SimpleVolume<(int32_t)> self, Region regValid) -> SimpleVolumeint32
        """
        this = _PolyVoxCore.new_SimpleVolumeint32(regValid, uBlockSideLength)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _PolyVoxCore.delete_SimpleVolumeint32
    __del__ = lambda self: None

    def getVoxel(self, *args) -> "int":
        """
        getVoxel(SimpleVolumeint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> int
        getVoxel(SimpleVolumeint32 self, Vector3Dint32_t v3dPos) -> int
        """
        return _PolyVoxCore.SimpleVolumeint32_getVoxel(self, *args)


    def getVoxelAt(self, *args) -> "int":
        """
        getVoxelAt(SimpleVolumeint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> int
        getVoxelAt(SimpleVolumeint32 self, Vector3Dint32_t v3dPos) -> int
        """
        return _PolyVoxCore.SimpleVolumeint32_getVoxelAt(self, *args)


    def getVoxelWithWrapping(self, *args) -> "int":
        """
        getVoxelWithWrapping(SimpleVolumeint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode, int tBorder) -> int
        getVoxelWithWrapping(SimpleVolumeint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode) -> int
        getVoxelWithWrapping(SimpleVolumeint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> int
        getVoxelWithWrapping(SimpleVolumeint32 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode, int tBorder) -> int
        getVoxelWithWrapping(SimpleVolumeint32 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode) -> int
        getVoxelWithWrapping(SimpleVolumeint32 self, Vector3Dint32_t v3dPos) -> int
        """
        return _PolyVoxCore.SimpleVolumeint32_getVoxelWithWrapping(self, *args)


    def setVoxelAt(self, *args) -> "bool":
        """
        setVoxelAt(SimpleVolumeint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, int tValue) -> bool
        setVoxelAt(SimpleVolumeint32 self, Vector3Dint32_t v3dPos, int tValue) -> bool
        """
        return _PolyVoxCore.SimpleVolumeint32_setVoxelAt(self, *args)


    def calculateSizeInBytes(self) -> "uint32_t":
        """calculateSizeInBytes(SimpleVolumeint32 self) -> uint32_t"""
        return _PolyVoxCore.SimpleVolumeint32_calculateSizeInBytes(self)

SimpleVolumeint32_swigregister = _PolyVoxCore.SimpleVolumeint32_swigregister
SimpleVolumeint32_swigregister(SimpleVolumeint32)

class SimpleVolumeuint8(BaseVolumeuint8):
    """Proxy of C++ PolyVox::SimpleVolume<(uint8_t)> class."""

    __swig_setmethods__ = {}
    for _s in [BaseVolumeuint8]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleVolumeuint8, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseVolumeuint8]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleVolumeuint8, name)
    __repr__ = _swig_repr

    def __init__(self, regValid: 'Region', uBlockSideLength: 'uint16_t'=32):
        """
        __init__(PolyVox::SimpleVolume<(uint8_t)> self, Region regValid, uint16_t uBlockSideLength=32) -> SimpleVolumeuint8
        __init__(PolyVox::SimpleVolume<(uint8_t)> self, Region regValid) -> SimpleVolumeuint8
        """
        this = _PolyVoxCore.new_SimpleVolumeuint8(regValid, uBlockSideLength)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _PolyVoxCore.delete_SimpleVolumeuint8
    __del__ = lambda self: None

    def getVoxel(self, *args) -> "unsigned char":
        """
        getVoxel(SimpleVolumeuint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> unsigned char
        getVoxel(SimpleVolumeuint8 self, Vector3Dint32_t v3dPos) -> unsigned char
        """
        return _PolyVoxCore.SimpleVolumeuint8_getVoxel(self, *args)


    def getVoxelAt(self, *args) -> "unsigned char":
        """
        getVoxelAt(SimpleVolumeuint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> unsigned char
        getVoxelAt(SimpleVolumeuint8 self, Vector3Dint32_t v3dPos) -> unsigned char
        """
        return _PolyVoxCore.SimpleVolumeuint8_getVoxelAt(self, *args)


    def getVoxelWithWrapping(self, *args) -> "unsigned char":
        """
        getVoxelWithWrapping(SimpleVolumeuint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode, unsigned char tBorder) -> unsigned char
        getVoxelWithWrapping(SimpleVolumeuint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode) -> unsigned char
        getVoxelWithWrapping(SimpleVolumeuint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> unsigned char
        getVoxelWithWrapping(SimpleVolumeuint8 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode, unsigned char tBorder) -> unsigned char
        getVoxelWithWrapping(SimpleVolumeuint8 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode) -> unsigned char
        getVoxelWithWrapping(SimpleVolumeuint8 self, Vector3Dint32_t v3dPos) -> unsigned char
        """
        return _PolyVoxCore.SimpleVolumeuint8_getVoxelWithWrapping(self, *args)


    def setVoxelAt(self, *args) -> "bool":
        """
        setVoxelAt(SimpleVolumeuint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, unsigned char tValue) -> bool
        setVoxelAt(SimpleVolumeuint8 self, Vector3Dint32_t v3dPos, unsigned char tValue) -> bool
        """
        return _PolyVoxCore.SimpleVolumeuint8_setVoxelAt(self, *args)


    def calculateSizeInBytes(self) -> "uint32_t":
        """calculateSizeInBytes(SimpleVolumeuint8 self) -> uint32_t"""
        return _PolyVoxCore.SimpleVolumeuint8_calculateSizeInBytes(self)

SimpleVolumeuint8_swigregister = _PolyVoxCore.SimpleVolumeuint8_swigregister
SimpleVolumeuint8_swigregister(SimpleVolumeuint8)

class SimpleVolumeuint16(BaseVolumeuint16):
    """Proxy of C++ PolyVox::SimpleVolume<(uint16_t)> class."""

    __swig_setmethods__ = {}
    for _s in [BaseVolumeuint16]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleVolumeuint16, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseVolumeuint16]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleVolumeuint16, name)
    __repr__ = _swig_repr

    def __init__(self, regValid: 'Region', uBlockSideLength: 'uint16_t'=32):
        """
        __init__(PolyVox::SimpleVolume<(uint16_t)> self, Region regValid, uint16_t uBlockSideLength=32) -> SimpleVolumeuint16
        __init__(PolyVox::SimpleVolume<(uint16_t)> self, Region regValid) -> SimpleVolumeuint16
        """
        this = _PolyVoxCore.new_SimpleVolumeuint16(regValid, uBlockSideLength)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _PolyVoxCore.delete_SimpleVolumeuint16
    __del__ = lambda self: None

    def getVoxel(self, *args) -> "unsigned short":
        """
        getVoxel(SimpleVolumeuint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> unsigned short
        getVoxel(SimpleVolumeuint16 self, Vector3Dint32_t v3dPos) -> unsigned short
        """
        return _PolyVoxCore.SimpleVolumeuint16_getVoxel(self, *args)


    def getVoxelAt(self, *args) -> "unsigned short":
        """
        getVoxelAt(SimpleVolumeuint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> unsigned short
        getVoxelAt(SimpleVolumeuint16 self, Vector3Dint32_t v3dPos) -> unsigned short
        """
        return _PolyVoxCore.SimpleVolumeuint16_getVoxelAt(self, *args)


    def getVoxelWithWrapping(self, *args) -> "unsigned short":
        """
        getVoxelWithWrapping(SimpleVolumeuint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode, unsigned short tBorder) -> unsigned short
        getVoxelWithWrapping(SimpleVolumeuint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode) -> unsigned short
        getVoxelWithWrapping(SimpleVolumeuint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> unsigned short
        getVoxelWithWrapping(SimpleVolumeuint16 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode, unsigned short tBorder) -> unsigned short
        getVoxelWithWrapping(SimpleVolumeuint16 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode) -> unsigned short
        getVoxelWithWrapping(SimpleVolumeuint16 self, Vector3Dint32_t v3dPos) -> unsigned short
        """
        return _PolyVoxCore.SimpleVolumeuint16_getVoxelWithWrapping(self, *args)


    def setVoxelAt(self, *args) -> "bool":
        """
        setVoxelAt(SimpleVolumeuint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, unsigned short tValue) -> bool
        setVoxelAt(SimpleVolumeuint16 self, Vector3Dint32_t v3dPos, unsigned short tValue) -> bool
        """
        return _PolyVoxCore.SimpleVolumeuint16_setVoxelAt(self, *args)


    def calculateSizeInBytes(self) -> "uint32_t":
        """calculateSizeInBytes(SimpleVolumeuint16 self) -> uint32_t"""
        return _PolyVoxCore.SimpleVolumeuint16_calculateSizeInBytes(self)

SimpleVolumeuint16_swigregister = _PolyVoxCore.SimpleVolumeuint16_swigregister
SimpleVolumeuint16_swigregister(SimpleVolumeuint16)

class SimpleVolumeuint32(BaseVolumeuint32):
    """Proxy of C++ PolyVox::SimpleVolume<(uint32_t)> class."""

    __swig_setmethods__ = {}
    for _s in [BaseVolumeuint32]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleVolumeuint32, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseVolumeuint32]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleVolumeuint32, name)
    __repr__ = _swig_repr

    def __init__(self, regValid: 'Region', uBlockSideLength: 'uint16_t'=32):
        """
        __init__(PolyVox::SimpleVolume<(uint32_t)> self, Region regValid, uint16_t uBlockSideLength=32) -> SimpleVolumeuint32
        __init__(PolyVox::SimpleVolume<(uint32_t)> self, Region regValid) -> SimpleVolumeuint32
        """
        this = _PolyVoxCore.new_SimpleVolumeuint32(regValid, uBlockSideLength)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _PolyVoxCore.delete_SimpleVolumeuint32
    __del__ = lambda self: None

    def getVoxel(self, *args) -> "unsigned int":
        """
        getVoxel(SimpleVolumeuint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> unsigned int
        getVoxel(SimpleVolumeuint32 self, Vector3Dint32_t v3dPos) -> unsigned int
        """
        return _PolyVoxCore.SimpleVolumeuint32_getVoxel(self, *args)


    def getVoxelAt(self, *args) -> "unsigned int":
        """
        getVoxelAt(SimpleVolumeuint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> unsigned int
        getVoxelAt(SimpleVolumeuint32 self, Vector3Dint32_t v3dPos) -> unsigned int
        """
        return _PolyVoxCore.SimpleVolumeuint32_getVoxelAt(self, *args)


    def getVoxelWithWrapping(self, *args) -> "unsigned int":
        """
        getVoxelWithWrapping(SimpleVolumeuint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode, unsigned int tBorder) -> unsigned int
        getVoxelWithWrapping(SimpleVolumeuint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode) -> unsigned int
        getVoxelWithWrapping(SimpleVolumeuint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> unsigned int
        getVoxelWithWrapping(SimpleVolumeuint32 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode, unsigned int tBorder) -> unsigned int
        getVoxelWithWrapping(SimpleVolumeuint32 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode) -> unsigned int
        getVoxelWithWrapping(SimpleVolumeuint32 self, Vector3Dint32_t v3dPos) -> unsigned int
        """
        return _PolyVoxCore.SimpleVolumeuint32_getVoxelWithWrapping(self, *args)


    def setVoxelAt(self, *args) -> "bool":
        """
        setVoxelAt(SimpleVolumeuint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, unsigned int tValue) -> bool
        setVoxelAt(SimpleVolumeuint32 self, Vector3Dint32_t v3dPos, unsigned int tValue) -> bool
        """
        return _PolyVoxCore.SimpleVolumeuint32_setVoxelAt(self, *args)


    def calculateSizeInBytes(self) -> "uint32_t":
        """calculateSizeInBytes(SimpleVolumeuint32 self) -> uint32_t"""
        return _PolyVoxCore.SimpleVolumeuint32_calculateSizeInBytes(self)

SimpleVolumeuint32_swigregister = _PolyVoxCore.SimpleVolumeuint32_swigregister
SimpleVolumeuint32_swigregister(SimpleVolumeuint32)

class SimpleVolumefloat(BaseVolumefloat):
    """Proxy of C++ PolyVox::SimpleVolume<(float)> class."""

    __swig_setmethods__ = {}
    for _s in [BaseVolumefloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleVolumefloat, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseVolumefloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleVolumefloat, name)
    __repr__ = _swig_repr

    def __init__(self, regValid: 'Region', uBlockSideLength: 'uint16_t'=32):
        """
        __init__(PolyVox::SimpleVolume<(float)> self, Region regValid, uint16_t uBlockSideLength=32) -> SimpleVolumefloat
        __init__(PolyVox::SimpleVolume<(float)> self, Region regValid) -> SimpleVolumefloat
        """
        this = _PolyVoxCore.new_SimpleVolumefloat(regValid, uBlockSideLength)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _PolyVoxCore.delete_SimpleVolumefloat
    __del__ = lambda self: None

    def getVoxel(self, *args) -> "float":
        """
        getVoxel(SimpleVolumefloat self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> float
        getVoxel(SimpleVolumefloat self, Vector3Dint32_t v3dPos) -> float
        """
        return _PolyVoxCore.SimpleVolumefloat_getVoxel(self, *args)


    def getVoxelAt(self, *args) -> "float":
        """
        getVoxelAt(SimpleVolumefloat self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> float
        getVoxelAt(SimpleVolumefloat self, Vector3Dint32_t v3dPos) -> float
        """
        return _PolyVoxCore.SimpleVolumefloat_getVoxelAt(self, *args)


    def getVoxelWithWrapping(self, *args) -> "float":
        """
        getVoxelWithWrapping(SimpleVolumefloat self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode, float tBorder) -> float
        getVoxelWithWrapping(SimpleVolumefloat self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode) -> float
        getVoxelWithWrapping(SimpleVolumefloat self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> float
        getVoxelWithWrapping(SimpleVolumefloat self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode, float tBorder) -> float
        getVoxelWithWrapping(SimpleVolumefloat self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode) -> float
        getVoxelWithWrapping(SimpleVolumefloat self, Vector3Dint32_t v3dPos) -> float
        """
        return _PolyVoxCore.SimpleVolumefloat_getVoxelWithWrapping(self, *args)


    def setVoxelAt(self, *args) -> "bool":
        """
        setVoxelAt(SimpleVolumefloat self, int32_t uXPos, int32_t uYPos, int32_t uZPos, float tValue) -> bool
        setVoxelAt(SimpleVolumefloat self, Vector3Dint32_t v3dPos, float tValue) -> bool
        """
        return _PolyVoxCore.SimpleVolumefloat_setVoxelAt(self, *args)


    def calculateSizeInBytes(self) -> "uint32_t":
        """calculateSizeInBytes(SimpleVolumefloat self) -> uint32_t"""
        return _PolyVoxCore.SimpleVolumefloat_calculateSizeInBytes(self)

SimpleVolumefloat_swigregister = _PolyVoxCore.SimpleVolumefloat_swigregister
SimpleVolumefloat_swigregister(SimpleVolumefloat)

class RawVolumeint8(BaseVolumeint8):
    """Proxy of C++ PolyVox::RawVolume<(int8_t)> class."""

    __swig_setmethods__ = {}
    for _s in [BaseVolumeint8]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RawVolumeint8, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseVolumeint8]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RawVolumeint8, name)
    __repr__ = _swig_repr

    def __init__(self, regValid: 'Region'):
        """__init__(PolyVox::RawVolume<(int8_t)> self, Region regValid) -> RawVolumeint8"""
        this = _PolyVoxCore.new_RawVolumeint8(regValid)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _PolyVoxCore.delete_RawVolumeint8
    __del__ = lambda self: None

    def getVoxel(self, *args) -> "signed char":
        """
        getVoxel(RawVolumeint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> signed char
        getVoxel(RawVolumeint8 self, Vector3Dint32_t v3dPos) -> signed char
        """
        return _PolyVoxCore.RawVolumeint8_getVoxel(self, *args)


    def getVoxelAt(self, *args) -> "signed char":
        """
        getVoxelAt(RawVolumeint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> signed char
        getVoxelAt(RawVolumeint8 self, Vector3Dint32_t v3dPos) -> signed char
        """
        return _PolyVoxCore.RawVolumeint8_getVoxelAt(self, *args)


    def getVoxelWithWrapping(self, *args) -> "signed char":
        """
        getVoxelWithWrapping(RawVolumeint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode, signed char tBorder) -> signed char
        getVoxelWithWrapping(RawVolumeint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode) -> signed char
        getVoxelWithWrapping(RawVolumeint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> signed char
        getVoxelWithWrapping(RawVolumeint8 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode, signed char tBorder) -> signed char
        getVoxelWithWrapping(RawVolumeint8 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode) -> signed char
        getVoxelWithWrapping(RawVolumeint8 self, Vector3Dint32_t v3dPos) -> signed char
        """
        return _PolyVoxCore.RawVolumeint8_getVoxelWithWrapping(self, *args)


    def setVoxelAt(self, *args) -> "bool":
        """
        setVoxelAt(RawVolumeint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, signed char tValue) -> bool
        setVoxelAt(RawVolumeint8 self, Vector3Dint32_t v3dPos, signed char tValue) -> bool
        """
        return _PolyVoxCore.RawVolumeint8_setVoxelAt(self, *args)


    def calculateSizeInBytes(self) -> "uint32_t":
        """calculateSizeInBytes(RawVolumeint8 self) -> uint32_t"""
        return _PolyVoxCore.RawVolumeint8_calculateSizeInBytes(self)

RawVolumeint8_swigregister = _PolyVoxCore.RawVolumeint8_swigregister
RawVolumeint8_swigregister(RawVolumeint8)

class RawVolumeint16(BaseVolumeint16):
    """Proxy of C++ PolyVox::RawVolume<(int16_t)> class."""

    __swig_setmethods__ = {}
    for _s in [BaseVolumeint16]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RawVolumeint16, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseVolumeint16]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RawVolumeint16, name)
    __repr__ = _swig_repr

    def __init__(self, regValid: 'Region'):
        """__init__(PolyVox::RawVolume<(int16_t)> self, Region regValid) -> RawVolumeint16"""
        this = _PolyVoxCore.new_RawVolumeint16(regValid)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _PolyVoxCore.delete_RawVolumeint16
    __del__ = lambda self: None

    def getVoxel(self, *args) -> "short":
        """
        getVoxel(RawVolumeint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> short
        getVoxel(RawVolumeint16 self, Vector3Dint32_t v3dPos) -> short
        """
        return _PolyVoxCore.RawVolumeint16_getVoxel(self, *args)


    def getVoxelAt(self, *args) -> "short":
        """
        getVoxelAt(RawVolumeint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> short
        getVoxelAt(RawVolumeint16 self, Vector3Dint32_t v3dPos) -> short
        """
        return _PolyVoxCore.RawVolumeint16_getVoxelAt(self, *args)


    def getVoxelWithWrapping(self, *args) -> "short":
        """
        getVoxelWithWrapping(RawVolumeint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode, short tBorder) -> short
        getVoxelWithWrapping(RawVolumeint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode) -> short
        getVoxelWithWrapping(RawVolumeint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> short
        getVoxelWithWrapping(RawVolumeint16 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode, short tBorder) -> short
        getVoxelWithWrapping(RawVolumeint16 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode) -> short
        getVoxelWithWrapping(RawVolumeint16 self, Vector3Dint32_t v3dPos) -> short
        """
        return _PolyVoxCore.RawVolumeint16_getVoxelWithWrapping(self, *args)


    def setVoxelAt(self, *args) -> "bool":
        """
        setVoxelAt(RawVolumeint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, short tValue) -> bool
        setVoxelAt(RawVolumeint16 self, Vector3Dint32_t v3dPos, short tValue) -> bool
        """
        return _PolyVoxCore.RawVolumeint16_setVoxelAt(self, *args)


    def calculateSizeInBytes(self) -> "uint32_t":
        """calculateSizeInBytes(RawVolumeint16 self) -> uint32_t"""
        return _PolyVoxCore.RawVolumeint16_calculateSizeInBytes(self)

RawVolumeint16_swigregister = _PolyVoxCore.RawVolumeint16_swigregister
RawVolumeint16_swigregister(RawVolumeint16)

class RawVolumeint32(BaseVolumeint32):
    """Proxy of C++ PolyVox::RawVolume<(int32_t)> class."""

    __swig_setmethods__ = {}
    for _s in [BaseVolumeint32]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RawVolumeint32, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseVolumeint32]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RawVolumeint32, name)
    __repr__ = _swig_repr

    def __init__(self, regValid: 'Region'):
        """__init__(PolyVox::RawVolume<(int32_t)> self, Region regValid) -> RawVolumeint32"""
        this = _PolyVoxCore.new_RawVolumeint32(regValid)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _PolyVoxCore.delete_RawVolumeint32
    __del__ = lambda self: None

    def getVoxel(self, *args) -> "int":
        """
        getVoxel(RawVolumeint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> int
        getVoxel(RawVolumeint32 self, Vector3Dint32_t v3dPos) -> int
        """
        return _PolyVoxCore.RawVolumeint32_getVoxel(self, *args)


    def getVoxelAt(self, *args) -> "int":
        """
        getVoxelAt(RawVolumeint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> int
        getVoxelAt(RawVolumeint32 self, Vector3Dint32_t v3dPos) -> int
        """
        return _PolyVoxCore.RawVolumeint32_getVoxelAt(self, *args)


    def getVoxelWithWrapping(self, *args) -> "int":
        """
        getVoxelWithWrapping(RawVolumeint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode, int tBorder) -> int
        getVoxelWithWrapping(RawVolumeint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode) -> int
        getVoxelWithWrapping(RawVolumeint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> int
        getVoxelWithWrapping(RawVolumeint32 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode, int tBorder) -> int
        getVoxelWithWrapping(RawVolumeint32 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode) -> int
        getVoxelWithWrapping(RawVolumeint32 self, Vector3Dint32_t v3dPos) -> int
        """
        return _PolyVoxCore.RawVolumeint32_getVoxelWithWrapping(self, *args)


    def setVoxelAt(self, *args) -> "bool":
        """
        setVoxelAt(RawVolumeint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, int tValue) -> bool
        setVoxelAt(RawVolumeint32 self, Vector3Dint32_t v3dPos, int tValue) -> bool
        """
        return _PolyVoxCore.RawVolumeint32_setVoxelAt(self, *args)


    def calculateSizeInBytes(self) -> "uint32_t":
        """calculateSizeInBytes(RawVolumeint32 self) -> uint32_t"""
        return _PolyVoxCore.RawVolumeint32_calculateSizeInBytes(self)

RawVolumeint32_swigregister = _PolyVoxCore.RawVolumeint32_swigregister
RawVolumeint32_swigregister(RawVolumeint32)

class RawVolumeuint8(BaseVolumeuint8):
    """Proxy of C++ PolyVox::RawVolume<(uint8_t)> class."""

    __swig_setmethods__ = {}
    for _s in [BaseVolumeuint8]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RawVolumeuint8, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseVolumeuint8]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RawVolumeuint8, name)
    __repr__ = _swig_repr

    def __init__(self, regValid: 'Region'):
        """__init__(PolyVox::RawVolume<(uint8_t)> self, Region regValid) -> RawVolumeuint8"""
        this = _PolyVoxCore.new_RawVolumeuint8(regValid)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _PolyVoxCore.delete_RawVolumeuint8
    __del__ = lambda self: None

    def getVoxel(self, *args) -> "unsigned char":
        """
        getVoxel(RawVolumeuint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> unsigned char
        getVoxel(RawVolumeuint8 self, Vector3Dint32_t v3dPos) -> unsigned char
        """
        return _PolyVoxCore.RawVolumeuint8_getVoxel(self, *args)


    def getVoxelAt(self, *args) -> "unsigned char":
        """
        getVoxelAt(RawVolumeuint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> unsigned char
        getVoxelAt(RawVolumeuint8 self, Vector3Dint32_t v3dPos) -> unsigned char
        """
        return _PolyVoxCore.RawVolumeuint8_getVoxelAt(self, *args)


    def getVoxelWithWrapping(self, *args) -> "unsigned char":
        """
        getVoxelWithWrapping(RawVolumeuint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode, unsigned char tBorder) -> unsigned char
        getVoxelWithWrapping(RawVolumeuint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode) -> unsigned char
        getVoxelWithWrapping(RawVolumeuint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> unsigned char
        getVoxelWithWrapping(RawVolumeuint8 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode, unsigned char tBorder) -> unsigned char
        getVoxelWithWrapping(RawVolumeuint8 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode) -> unsigned char
        getVoxelWithWrapping(RawVolumeuint8 self, Vector3Dint32_t v3dPos) -> unsigned char
        """
        return _PolyVoxCore.RawVolumeuint8_getVoxelWithWrapping(self, *args)


    def setVoxelAt(self, *args) -> "bool":
        """
        setVoxelAt(RawVolumeuint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, unsigned char tValue) -> bool
        setVoxelAt(RawVolumeuint8 self, Vector3Dint32_t v3dPos, unsigned char tValue) -> bool
        """
        return _PolyVoxCore.RawVolumeuint8_setVoxelAt(self, *args)


    def calculateSizeInBytes(self) -> "uint32_t":
        """calculateSizeInBytes(RawVolumeuint8 self) -> uint32_t"""
        return _PolyVoxCore.RawVolumeuint8_calculateSizeInBytes(self)

RawVolumeuint8_swigregister = _PolyVoxCore.RawVolumeuint8_swigregister
RawVolumeuint8_swigregister(RawVolumeuint8)

class RawVolumeuint16(BaseVolumeuint16):
    """Proxy of C++ PolyVox::RawVolume<(uint16_t)> class."""

    __swig_setmethods__ = {}
    for _s in [BaseVolumeuint16]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RawVolumeuint16, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseVolumeuint16]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RawVolumeuint16, name)
    __repr__ = _swig_repr

    def __init__(self, regValid: 'Region'):
        """__init__(PolyVox::RawVolume<(uint16_t)> self, Region regValid) -> RawVolumeuint16"""
        this = _PolyVoxCore.new_RawVolumeuint16(regValid)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _PolyVoxCore.delete_RawVolumeuint16
    __del__ = lambda self: None

    def getVoxel(self, *args) -> "unsigned short":
        """
        getVoxel(RawVolumeuint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> unsigned short
        getVoxel(RawVolumeuint16 self, Vector3Dint32_t v3dPos) -> unsigned short
        """
        return _PolyVoxCore.RawVolumeuint16_getVoxel(self, *args)


    def getVoxelAt(self, *args) -> "unsigned short":
        """
        getVoxelAt(RawVolumeuint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> unsigned short
        getVoxelAt(RawVolumeuint16 self, Vector3Dint32_t v3dPos) -> unsigned short
        """
        return _PolyVoxCore.RawVolumeuint16_getVoxelAt(self, *args)


    def getVoxelWithWrapping(self, *args) -> "unsigned short":
        """
        getVoxelWithWrapping(RawVolumeuint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode, unsigned short tBorder) -> unsigned short
        getVoxelWithWrapping(RawVolumeuint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode) -> unsigned short
        getVoxelWithWrapping(RawVolumeuint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> unsigned short
        getVoxelWithWrapping(RawVolumeuint16 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode, unsigned short tBorder) -> unsigned short
        getVoxelWithWrapping(RawVolumeuint16 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode) -> unsigned short
        getVoxelWithWrapping(RawVolumeuint16 self, Vector3Dint32_t v3dPos) -> unsigned short
        """
        return _PolyVoxCore.RawVolumeuint16_getVoxelWithWrapping(self, *args)


    def setVoxelAt(self, *args) -> "bool":
        """
        setVoxelAt(RawVolumeuint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, unsigned short tValue) -> bool
        setVoxelAt(RawVolumeuint16 self, Vector3Dint32_t v3dPos, unsigned short tValue) -> bool
        """
        return _PolyVoxCore.RawVolumeuint16_setVoxelAt(self, *args)


    def calculateSizeInBytes(self) -> "uint32_t":
        """calculateSizeInBytes(RawVolumeuint16 self) -> uint32_t"""
        return _PolyVoxCore.RawVolumeuint16_calculateSizeInBytes(self)

RawVolumeuint16_swigregister = _PolyVoxCore.RawVolumeuint16_swigregister
RawVolumeuint16_swigregister(RawVolumeuint16)

class RawVolumeuint32(BaseVolumeuint32):
    """Proxy of C++ PolyVox::RawVolume<(uint32_t)> class."""

    __swig_setmethods__ = {}
    for _s in [BaseVolumeuint32]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RawVolumeuint32, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseVolumeuint32]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RawVolumeuint32, name)
    __repr__ = _swig_repr

    def __init__(self, regValid: 'Region'):
        """__init__(PolyVox::RawVolume<(uint32_t)> self, Region regValid) -> RawVolumeuint32"""
        this = _PolyVoxCore.new_RawVolumeuint32(regValid)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _PolyVoxCore.delete_RawVolumeuint32
    __del__ = lambda self: None

    def getVoxel(self, *args) -> "unsigned int":
        """
        getVoxel(RawVolumeuint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> unsigned int
        getVoxel(RawVolumeuint32 self, Vector3Dint32_t v3dPos) -> unsigned int
        """
        return _PolyVoxCore.RawVolumeuint32_getVoxel(self, *args)


    def getVoxelAt(self, *args) -> "unsigned int":
        """
        getVoxelAt(RawVolumeuint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> unsigned int
        getVoxelAt(RawVolumeuint32 self, Vector3Dint32_t v3dPos) -> unsigned int
        """
        return _PolyVoxCore.RawVolumeuint32_getVoxelAt(self, *args)


    def getVoxelWithWrapping(self, *args) -> "unsigned int":
        """
        getVoxelWithWrapping(RawVolumeuint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode, unsigned int tBorder) -> unsigned int
        getVoxelWithWrapping(RawVolumeuint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode) -> unsigned int
        getVoxelWithWrapping(RawVolumeuint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> unsigned int
        getVoxelWithWrapping(RawVolumeuint32 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode, unsigned int tBorder) -> unsigned int
        getVoxelWithWrapping(RawVolumeuint32 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode) -> unsigned int
        getVoxelWithWrapping(RawVolumeuint32 self, Vector3Dint32_t v3dPos) -> unsigned int
        """
        return _PolyVoxCore.RawVolumeuint32_getVoxelWithWrapping(self, *args)


    def setVoxelAt(self, *args) -> "bool":
        """
        setVoxelAt(RawVolumeuint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, unsigned int tValue) -> bool
        setVoxelAt(RawVolumeuint32 self, Vector3Dint32_t v3dPos, unsigned int tValue) -> bool
        """
        return _PolyVoxCore.RawVolumeuint32_setVoxelAt(self, *args)


    def calculateSizeInBytes(self) -> "uint32_t":
        """calculateSizeInBytes(RawVolumeuint32 self) -> uint32_t"""
        return _PolyVoxCore.RawVolumeuint32_calculateSizeInBytes(self)

RawVolumeuint32_swigregister = _PolyVoxCore.RawVolumeuint32_swigregister
RawVolumeuint32_swigregister(RawVolumeuint32)

class RawVolumefloat(BaseVolumefloat):
    """Proxy of C++ PolyVox::RawVolume<(float)> class."""

    __swig_setmethods__ = {}
    for _s in [BaseVolumefloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RawVolumefloat, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseVolumefloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RawVolumefloat, name)
    __repr__ = _swig_repr

    def __init__(self, regValid: 'Region'):
        """__init__(PolyVox::RawVolume<(float)> self, Region regValid) -> RawVolumefloat"""
        this = _PolyVoxCore.new_RawVolumefloat(regValid)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _PolyVoxCore.delete_RawVolumefloat
    __del__ = lambda self: None

    def getVoxel(self, *args) -> "float":
        """
        getVoxel(RawVolumefloat self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> float
        getVoxel(RawVolumefloat self, Vector3Dint32_t v3dPos) -> float
        """
        return _PolyVoxCore.RawVolumefloat_getVoxel(self, *args)


    def getVoxelAt(self, *args) -> "float":
        """
        getVoxelAt(RawVolumefloat self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> float
        getVoxelAt(RawVolumefloat self, Vector3Dint32_t v3dPos) -> float
        """
        return _PolyVoxCore.RawVolumefloat_getVoxelAt(self, *args)


    def getVoxelWithWrapping(self, *args) -> "float":
        """
        getVoxelWithWrapping(RawVolumefloat self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode, float tBorder) -> float
        getVoxelWithWrapping(RawVolumefloat self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode) -> float
        getVoxelWithWrapping(RawVolumefloat self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> float
        getVoxelWithWrapping(RawVolumefloat self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode, float tBorder) -> float
        getVoxelWithWrapping(RawVolumefloat self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode) -> float
        getVoxelWithWrapping(RawVolumefloat self, Vector3Dint32_t v3dPos) -> float
        """
        return _PolyVoxCore.RawVolumefloat_getVoxelWithWrapping(self, *args)


    def setVoxelAt(self, *args) -> "bool":
        """
        setVoxelAt(RawVolumefloat self, int32_t uXPos, int32_t uYPos, int32_t uZPos, float tValue) -> bool
        setVoxelAt(RawVolumefloat self, Vector3Dint32_t v3dPos, float tValue) -> bool
        """
        return _PolyVoxCore.RawVolumefloat_setVoxelAt(self, *args)


    def calculateSizeInBytes(self) -> "uint32_t":
        """calculateSizeInBytes(RawVolumefloat self) -> uint32_t"""
        return _PolyVoxCore.RawVolumefloat_calculateSizeInBytes(self)

RawVolumefloat_swigregister = _PolyVoxCore.RawVolumefloat_swigregister
RawVolumefloat_swigregister(RawVolumefloat)

class LargeVolumeint8(BaseVolumeint8):
    """Proxy of C++ PolyVox::LargeVolume<(int8_t)> class."""

    __swig_setmethods__ = {}
    for _s in [BaseVolumeint8]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LargeVolumeint8, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseVolumeint8]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LargeVolumeint8, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::LargeVolume<(int8_t)> self, std::function< void (PolyVox::ConstVolumeProxy< signed char > const &,PolyVox::Region const &) > dataRequiredHandler, std::function< void (PolyVox::ConstVolumeProxy< signed char > const &,PolyVox::Region const &) > dataOverflowHandler, uint16_t uBlockSideLength=32) -> LargeVolumeint8
        __init__(PolyVox::LargeVolume<(int8_t)> self, std::function< void (PolyVox::ConstVolumeProxy< signed char > const &,PolyVox::Region const &) > dataRequiredHandler, std::function< void (PolyVox::ConstVolumeProxy< signed char > const &,PolyVox::Region const &) > dataOverflowHandler) -> LargeVolumeint8
        __init__(PolyVox::LargeVolume<(int8_t)> self, Region regValid, Compressor pCompressor=None, std::function< void (PolyVox::ConstVolumeProxy< signed char > const &,PolyVox::Region const &) > dataRequiredHandler=0, std::function< void (PolyVox::ConstVolumeProxy< signed char > const &,PolyVox::Region const &) > dataOverflowHandler=0, bool bPagingEnabled=False, uint16_t uBlockSideLength=32) -> LargeVolumeint8
        __init__(PolyVox::LargeVolume<(int8_t)> self, Region regValid, Compressor pCompressor=None, std::function< void (PolyVox::ConstVolumeProxy< signed char > const &,PolyVox::Region const &) > dataRequiredHandler=0, std::function< void (PolyVox::ConstVolumeProxy< signed char > const &,PolyVox::Region const &) > dataOverflowHandler=0, bool bPagingEnabled=False) -> LargeVolumeint8
        __init__(PolyVox::LargeVolume<(int8_t)> self, Region regValid, Compressor pCompressor=None, std::function< void (PolyVox::ConstVolumeProxy< signed char > const &,PolyVox::Region const &) > dataRequiredHandler=0, std::function< void (PolyVox::ConstVolumeProxy< signed char > const &,PolyVox::Region const &) > dataOverflowHandler=0) -> LargeVolumeint8
        __init__(PolyVox::LargeVolume<(int8_t)> self, Region regValid, Compressor pCompressor=None, std::function< void (PolyVox::ConstVolumeProxy< signed char > const &,PolyVox::Region const &) > dataRequiredHandler=0) -> LargeVolumeint8
        __init__(PolyVox::LargeVolume<(int8_t)> self, Region regValid, Compressor pCompressor=None) -> LargeVolumeint8
        __init__(PolyVox::LargeVolume<(int8_t)> self, Region regValid) -> LargeVolumeint8
        """
        this = _PolyVoxCore.new_LargeVolumeint8(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _PolyVoxCore.delete_LargeVolumeint8
    __del__ = lambda self: None

    def getVoxel(self, *args) -> "signed char":
        """
        getVoxel(LargeVolumeint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> signed char
        getVoxel(LargeVolumeint8 self, Vector3Dint32_t v3dPos) -> signed char
        """
        return _PolyVoxCore.LargeVolumeint8_getVoxel(self, *args)


    def getVoxelAt(self, *args) -> "signed char":
        """
        getVoxelAt(LargeVolumeint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> signed char
        getVoxelAt(LargeVolumeint8 self, Vector3Dint32_t v3dPos) -> signed char
        """
        return _PolyVoxCore.LargeVolumeint8_getVoxelAt(self, *args)


    def getVoxelWithWrapping(self, *args) -> "signed char":
        """
        getVoxelWithWrapping(LargeVolumeint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode, signed char tBorder) -> signed char
        getVoxelWithWrapping(LargeVolumeint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode) -> signed char
        getVoxelWithWrapping(LargeVolumeint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> signed char
        getVoxelWithWrapping(LargeVolumeint8 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode, signed char tBorder) -> signed char
        getVoxelWithWrapping(LargeVolumeint8 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode) -> signed char
        getVoxelWithWrapping(LargeVolumeint8 self, Vector3Dint32_t v3dPos) -> signed char
        """
        return _PolyVoxCore.LargeVolumeint8_getVoxelWithWrapping(self, *args)


    def setMaxNumberOfUncompressedBlocks(self, uMaxNumberOfUncompressedBlocks: 'uint32_t') -> "void":
        """setMaxNumberOfUncompressedBlocks(LargeVolumeint8 self, uint32_t uMaxNumberOfUncompressedBlocks)"""
        return _PolyVoxCore.LargeVolumeint8_setMaxNumberOfUncompressedBlocks(self, uMaxNumberOfUncompressedBlocks)


    def setMaxNumberOfBlocksInMemory(self, uMaxNumberOfBlocksInMemory: 'uint32_t') -> "void":
        """setMaxNumberOfBlocksInMemory(LargeVolumeint8 self, uint32_t uMaxNumberOfBlocksInMemory)"""
        return _PolyVoxCore.LargeVolumeint8_setMaxNumberOfBlocksInMemory(self, uMaxNumberOfBlocksInMemory)


    def setVoxelAt(self, *args) -> "bool":
        """
        setVoxelAt(LargeVolumeint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, signed char tValue) -> bool
        setVoxelAt(LargeVolumeint8 self, Vector3Dint32_t v3dPos, signed char tValue) -> bool
        """
        return _PolyVoxCore.LargeVolumeint8_setVoxelAt(self, *args)


    def prefetch(self, regPrefetch: 'Region') -> "void":
        """prefetch(LargeVolumeint8 self, Region regPrefetch)"""
        return _PolyVoxCore.LargeVolumeint8_prefetch(self, regPrefetch)


    def flush(self, regFlush: 'Region') -> "void":
        """flush(LargeVolumeint8 self, Region regFlush)"""
        return _PolyVoxCore.LargeVolumeint8_flush(self, regFlush)


    def flushAll(self) -> "void":
        """flushAll(LargeVolumeint8 self)"""
        return _PolyVoxCore.LargeVolumeint8_flushAll(self)


    def clearBlockCache(self) -> "void":
        """clearBlockCache(LargeVolumeint8 self)"""
        return _PolyVoxCore.LargeVolumeint8_clearBlockCache(self)


    def calculateCompressionRatio(self) -> "float":
        """calculateCompressionRatio(LargeVolumeint8 self) -> float"""
        return _PolyVoxCore.LargeVolumeint8_calculateCompressionRatio(self)


    def calculateSizeInBytes(self) -> "uint32_t":
        """calculateSizeInBytes(LargeVolumeint8 self) -> uint32_t"""
        return _PolyVoxCore.LargeVolumeint8_calculateSizeInBytes(self)

LargeVolumeint8_swigregister = _PolyVoxCore.LargeVolumeint8_swigregister
LargeVolumeint8_swigregister(LargeVolumeint8)

class LargeVolumeint16(BaseVolumeint16):
    """Proxy of C++ PolyVox::LargeVolume<(int16_t)> class."""

    __swig_setmethods__ = {}
    for _s in [BaseVolumeint16]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LargeVolumeint16, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseVolumeint16]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LargeVolumeint16, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::LargeVolume<(int16_t)> self, std::function< void (PolyVox::ConstVolumeProxy< short > const &,PolyVox::Region const &) > dataRequiredHandler, std::function< void (PolyVox::ConstVolumeProxy< short > const &,PolyVox::Region const &) > dataOverflowHandler, uint16_t uBlockSideLength=32) -> LargeVolumeint16
        __init__(PolyVox::LargeVolume<(int16_t)> self, std::function< void (PolyVox::ConstVolumeProxy< short > const &,PolyVox::Region const &) > dataRequiredHandler, std::function< void (PolyVox::ConstVolumeProxy< short > const &,PolyVox::Region const &) > dataOverflowHandler) -> LargeVolumeint16
        __init__(PolyVox::LargeVolume<(int16_t)> self, Region regValid, Compressor pCompressor=None, std::function< void (PolyVox::ConstVolumeProxy< short > const &,PolyVox::Region const &) > dataRequiredHandler=0, std::function< void (PolyVox::ConstVolumeProxy< short > const &,PolyVox::Region const &) > dataOverflowHandler=0, bool bPagingEnabled=False, uint16_t uBlockSideLength=32) -> LargeVolumeint16
        __init__(PolyVox::LargeVolume<(int16_t)> self, Region regValid, Compressor pCompressor=None, std::function< void (PolyVox::ConstVolumeProxy< short > const &,PolyVox::Region const &) > dataRequiredHandler=0, std::function< void (PolyVox::ConstVolumeProxy< short > const &,PolyVox::Region const &) > dataOverflowHandler=0, bool bPagingEnabled=False) -> LargeVolumeint16
        __init__(PolyVox::LargeVolume<(int16_t)> self, Region regValid, Compressor pCompressor=None, std::function< void (PolyVox::ConstVolumeProxy< short > const &,PolyVox::Region const &) > dataRequiredHandler=0, std::function< void (PolyVox::ConstVolumeProxy< short > const &,PolyVox::Region const &) > dataOverflowHandler=0) -> LargeVolumeint16
        __init__(PolyVox::LargeVolume<(int16_t)> self, Region regValid, Compressor pCompressor=None, std::function< void (PolyVox::ConstVolumeProxy< short > const &,PolyVox::Region const &) > dataRequiredHandler=0) -> LargeVolumeint16
        __init__(PolyVox::LargeVolume<(int16_t)> self, Region regValid, Compressor pCompressor=None) -> LargeVolumeint16
        __init__(PolyVox::LargeVolume<(int16_t)> self, Region regValid) -> LargeVolumeint16
        """
        this = _PolyVoxCore.new_LargeVolumeint16(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _PolyVoxCore.delete_LargeVolumeint16
    __del__ = lambda self: None

    def getVoxel(self, *args) -> "short":
        """
        getVoxel(LargeVolumeint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> short
        getVoxel(LargeVolumeint16 self, Vector3Dint32_t v3dPos) -> short
        """
        return _PolyVoxCore.LargeVolumeint16_getVoxel(self, *args)


    def getVoxelAt(self, *args) -> "short":
        """
        getVoxelAt(LargeVolumeint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> short
        getVoxelAt(LargeVolumeint16 self, Vector3Dint32_t v3dPos) -> short
        """
        return _PolyVoxCore.LargeVolumeint16_getVoxelAt(self, *args)


    def getVoxelWithWrapping(self, *args) -> "short":
        """
        getVoxelWithWrapping(LargeVolumeint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode, short tBorder) -> short
        getVoxelWithWrapping(LargeVolumeint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode) -> short
        getVoxelWithWrapping(LargeVolumeint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> short
        getVoxelWithWrapping(LargeVolumeint16 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode, short tBorder) -> short
        getVoxelWithWrapping(LargeVolumeint16 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode) -> short
        getVoxelWithWrapping(LargeVolumeint16 self, Vector3Dint32_t v3dPos) -> short
        """
        return _PolyVoxCore.LargeVolumeint16_getVoxelWithWrapping(self, *args)


    def setMaxNumberOfUncompressedBlocks(self, uMaxNumberOfUncompressedBlocks: 'uint32_t') -> "void":
        """setMaxNumberOfUncompressedBlocks(LargeVolumeint16 self, uint32_t uMaxNumberOfUncompressedBlocks)"""
        return _PolyVoxCore.LargeVolumeint16_setMaxNumberOfUncompressedBlocks(self, uMaxNumberOfUncompressedBlocks)


    def setMaxNumberOfBlocksInMemory(self, uMaxNumberOfBlocksInMemory: 'uint32_t') -> "void":
        """setMaxNumberOfBlocksInMemory(LargeVolumeint16 self, uint32_t uMaxNumberOfBlocksInMemory)"""
        return _PolyVoxCore.LargeVolumeint16_setMaxNumberOfBlocksInMemory(self, uMaxNumberOfBlocksInMemory)


    def setVoxelAt(self, *args) -> "bool":
        """
        setVoxelAt(LargeVolumeint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, short tValue) -> bool
        setVoxelAt(LargeVolumeint16 self, Vector3Dint32_t v3dPos, short tValue) -> bool
        """
        return _PolyVoxCore.LargeVolumeint16_setVoxelAt(self, *args)


    def prefetch(self, regPrefetch: 'Region') -> "void":
        """prefetch(LargeVolumeint16 self, Region regPrefetch)"""
        return _PolyVoxCore.LargeVolumeint16_prefetch(self, regPrefetch)


    def flush(self, regFlush: 'Region') -> "void":
        """flush(LargeVolumeint16 self, Region regFlush)"""
        return _PolyVoxCore.LargeVolumeint16_flush(self, regFlush)


    def flushAll(self) -> "void":
        """flushAll(LargeVolumeint16 self)"""
        return _PolyVoxCore.LargeVolumeint16_flushAll(self)


    def clearBlockCache(self) -> "void":
        """clearBlockCache(LargeVolumeint16 self)"""
        return _PolyVoxCore.LargeVolumeint16_clearBlockCache(self)


    def calculateCompressionRatio(self) -> "float":
        """calculateCompressionRatio(LargeVolumeint16 self) -> float"""
        return _PolyVoxCore.LargeVolumeint16_calculateCompressionRatio(self)


    def calculateSizeInBytes(self) -> "uint32_t":
        """calculateSizeInBytes(LargeVolumeint16 self) -> uint32_t"""
        return _PolyVoxCore.LargeVolumeint16_calculateSizeInBytes(self)

LargeVolumeint16_swigregister = _PolyVoxCore.LargeVolumeint16_swigregister
LargeVolumeint16_swigregister(LargeVolumeint16)

class LargeVolumeint32(BaseVolumeint32):
    """Proxy of C++ PolyVox::LargeVolume<(int32_t)> class."""

    __swig_setmethods__ = {}
    for _s in [BaseVolumeint32]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LargeVolumeint32, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseVolumeint32]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LargeVolumeint32, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::LargeVolume<(int32_t)> self, std::function< void (PolyVox::ConstVolumeProxy< int > const &,PolyVox::Region const &) > dataRequiredHandler, std::function< void (PolyVox::ConstVolumeProxy< int > const &,PolyVox::Region const &) > dataOverflowHandler, uint16_t uBlockSideLength=32) -> LargeVolumeint32
        __init__(PolyVox::LargeVolume<(int32_t)> self, std::function< void (PolyVox::ConstVolumeProxy< int > const &,PolyVox::Region const &) > dataRequiredHandler, std::function< void (PolyVox::ConstVolumeProxy< int > const &,PolyVox::Region const &) > dataOverflowHandler) -> LargeVolumeint32
        __init__(PolyVox::LargeVolume<(int32_t)> self, Region regValid, Compressor pCompressor=None, std::function< void (PolyVox::ConstVolumeProxy< int > const &,PolyVox::Region const &) > dataRequiredHandler=0, std::function< void (PolyVox::ConstVolumeProxy< int > const &,PolyVox::Region const &) > dataOverflowHandler=0, bool bPagingEnabled=False, uint16_t uBlockSideLength=32) -> LargeVolumeint32
        __init__(PolyVox::LargeVolume<(int32_t)> self, Region regValid, Compressor pCompressor=None, std::function< void (PolyVox::ConstVolumeProxy< int > const &,PolyVox::Region const &) > dataRequiredHandler=0, std::function< void (PolyVox::ConstVolumeProxy< int > const &,PolyVox::Region const &) > dataOverflowHandler=0, bool bPagingEnabled=False) -> LargeVolumeint32
        __init__(PolyVox::LargeVolume<(int32_t)> self, Region regValid, Compressor pCompressor=None, std::function< void (PolyVox::ConstVolumeProxy< int > const &,PolyVox::Region const &) > dataRequiredHandler=0, std::function< void (PolyVox::ConstVolumeProxy< int > const &,PolyVox::Region const &) > dataOverflowHandler=0) -> LargeVolumeint32
        __init__(PolyVox::LargeVolume<(int32_t)> self, Region regValid, Compressor pCompressor=None, std::function< void (PolyVox::ConstVolumeProxy< int > const &,PolyVox::Region const &) > dataRequiredHandler=0) -> LargeVolumeint32
        __init__(PolyVox::LargeVolume<(int32_t)> self, Region regValid, Compressor pCompressor=None) -> LargeVolumeint32
        __init__(PolyVox::LargeVolume<(int32_t)> self, Region regValid) -> LargeVolumeint32
        """
        this = _PolyVoxCore.new_LargeVolumeint32(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _PolyVoxCore.delete_LargeVolumeint32
    __del__ = lambda self: None

    def getVoxel(self, *args) -> "int":
        """
        getVoxel(LargeVolumeint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> int
        getVoxel(LargeVolumeint32 self, Vector3Dint32_t v3dPos) -> int
        """
        return _PolyVoxCore.LargeVolumeint32_getVoxel(self, *args)


    def getVoxelAt(self, *args) -> "int":
        """
        getVoxelAt(LargeVolumeint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> int
        getVoxelAt(LargeVolumeint32 self, Vector3Dint32_t v3dPos) -> int
        """
        return _PolyVoxCore.LargeVolumeint32_getVoxelAt(self, *args)


    def getVoxelWithWrapping(self, *args) -> "int":
        """
        getVoxelWithWrapping(LargeVolumeint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode, int tBorder) -> int
        getVoxelWithWrapping(LargeVolumeint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode) -> int
        getVoxelWithWrapping(LargeVolumeint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> int
        getVoxelWithWrapping(LargeVolumeint32 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode, int tBorder) -> int
        getVoxelWithWrapping(LargeVolumeint32 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode) -> int
        getVoxelWithWrapping(LargeVolumeint32 self, Vector3Dint32_t v3dPos) -> int
        """
        return _PolyVoxCore.LargeVolumeint32_getVoxelWithWrapping(self, *args)


    def setMaxNumberOfUncompressedBlocks(self, uMaxNumberOfUncompressedBlocks: 'uint32_t') -> "void":
        """setMaxNumberOfUncompressedBlocks(LargeVolumeint32 self, uint32_t uMaxNumberOfUncompressedBlocks)"""
        return _PolyVoxCore.LargeVolumeint32_setMaxNumberOfUncompressedBlocks(self, uMaxNumberOfUncompressedBlocks)


    def setMaxNumberOfBlocksInMemory(self, uMaxNumberOfBlocksInMemory: 'uint32_t') -> "void":
        """setMaxNumberOfBlocksInMemory(LargeVolumeint32 self, uint32_t uMaxNumberOfBlocksInMemory)"""
        return _PolyVoxCore.LargeVolumeint32_setMaxNumberOfBlocksInMemory(self, uMaxNumberOfBlocksInMemory)


    def setVoxelAt(self, *args) -> "bool":
        """
        setVoxelAt(LargeVolumeint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, int tValue) -> bool
        setVoxelAt(LargeVolumeint32 self, Vector3Dint32_t v3dPos, int tValue) -> bool
        """
        return _PolyVoxCore.LargeVolumeint32_setVoxelAt(self, *args)


    def prefetch(self, regPrefetch: 'Region') -> "void":
        """prefetch(LargeVolumeint32 self, Region regPrefetch)"""
        return _PolyVoxCore.LargeVolumeint32_prefetch(self, regPrefetch)


    def flush(self, regFlush: 'Region') -> "void":
        """flush(LargeVolumeint32 self, Region regFlush)"""
        return _PolyVoxCore.LargeVolumeint32_flush(self, regFlush)


    def flushAll(self) -> "void":
        """flushAll(LargeVolumeint32 self)"""
        return _PolyVoxCore.LargeVolumeint32_flushAll(self)


    def clearBlockCache(self) -> "void":
        """clearBlockCache(LargeVolumeint32 self)"""
        return _PolyVoxCore.LargeVolumeint32_clearBlockCache(self)


    def calculateCompressionRatio(self) -> "float":
        """calculateCompressionRatio(LargeVolumeint32 self) -> float"""
        return _PolyVoxCore.LargeVolumeint32_calculateCompressionRatio(self)


    def calculateSizeInBytes(self) -> "uint32_t":
        """calculateSizeInBytes(LargeVolumeint32 self) -> uint32_t"""
        return _PolyVoxCore.LargeVolumeint32_calculateSizeInBytes(self)

LargeVolumeint32_swigregister = _PolyVoxCore.LargeVolumeint32_swigregister
LargeVolumeint32_swigregister(LargeVolumeint32)

class LargeVolumeuint8(BaseVolumeuint8):
    """Proxy of C++ PolyVox::LargeVolume<(uint8_t)> class."""

    __swig_setmethods__ = {}
    for _s in [BaseVolumeuint8]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LargeVolumeuint8, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseVolumeuint8]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LargeVolumeuint8, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::LargeVolume<(uint8_t)> self, std::function< void (PolyVox::ConstVolumeProxy< unsigned char > const &,PolyVox::Region const &) > dataRequiredHandler, std::function< void (PolyVox::ConstVolumeProxy< unsigned char > const &,PolyVox::Region const &) > dataOverflowHandler, uint16_t uBlockSideLength=32) -> LargeVolumeuint8
        __init__(PolyVox::LargeVolume<(uint8_t)> self, std::function< void (PolyVox::ConstVolumeProxy< unsigned char > const &,PolyVox::Region const &) > dataRequiredHandler, std::function< void (PolyVox::ConstVolumeProxy< unsigned char > const &,PolyVox::Region const &) > dataOverflowHandler) -> LargeVolumeuint8
        __init__(PolyVox::LargeVolume<(uint8_t)> self, Region regValid, Compressor pCompressor=None, std::function< void (PolyVox::ConstVolumeProxy< unsigned char > const &,PolyVox::Region const &) > dataRequiredHandler=0, std::function< void (PolyVox::ConstVolumeProxy< unsigned char > const &,PolyVox::Region const &) > dataOverflowHandler=0, bool bPagingEnabled=False, uint16_t uBlockSideLength=32) -> LargeVolumeuint8
        __init__(PolyVox::LargeVolume<(uint8_t)> self, Region regValid, Compressor pCompressor=None, std::function< void (PolyVox::ConstVolumeProxy< unsigned char > const &,PolyVox::Region const &) > dataRequiredHandler=0, std::function< void (PolyVox::ConstVolumeProxy< unsigned char > const &,PolyVox::Region const &) > dataOverflowHandler=0, bool bPagingEnabled=False) -> LargeVolumeuint8
        __init__(PolyVox::LargeVolume<(uint8_t)> self, Region regValid, Compressor pCompressor=None, std::function< void (PolyVox::ConstVolumeProxy< unsigned char > const &,PolyVox::Region const &) > dataRequiredHandler=0, std::function< void (PolyVox::ConstVolumeProxy< unsigned char > const &,PolyVox::Region const &) > dataOverflowHandler=0) -> LargeVolumeuint8
        __init__(PolyVox::LargeVolume<(uint8_t)> self, Region regValid, Compressor pCompressor=None, std::function< void (PolyVox::ConstVolumeProxy< unsigned char > const &,PolyVox::Region const &) > dataRequiredHandler=0) -> LargeVolumeuint8
        __init__(PolyVox::LargeVolume<(uint8_t)> self, Region regValid, Compressor pCompressor=None) -> LargeVolumeuint8
        __init__(PolyVox::LargeVolume<(uint8_t)> self, Region regValid) -> LargeVolumeuint8
        """
        this = _PolyVoxCore.new_LargeVolumeuint8(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _PolyVoxCore.delete_LargeVolumeuint8
    __del__ = lambda self: None

    def getVoxel(self, *args) -> "unsigned char":
        """
        getVoxel(LargeVolumeuint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> unsigned char
        getVoxel(LargeVolumeuint8 self, Vector3Dint32_t v3dPos) -> unsigned char
        """
        return _PolyVoxCore.LargeVolumeuint8_getVoxel(self, *args)


    def getVoxelAt(self, *args) -> "unsigned char":
        """
        getVoxelAt(LargeVolumeuint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> unsigned char
        getVoxelAt(LargeVolumeuint8 self, Vector3Dint32_t v3dPos) -> unsigned char
        """
        return _PolyVoxCore.LargeVolumeuint8_getVoxelAt(self, *args)


    def getVoxelWithWrapping(self, *args) -> "unsigned char":
        """
        getVoxelWithWrapping(LargeVolumeuint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode, unsigned char tBorder) -> unsigned char
        getVoxelWithWrapping(LargeVolumeuint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode) -> unsigned char
        getVoxelWithWrapping(LargeVolumeuint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> unsigned char
        getVoxelWithWrapping(LargeVolumeuint8 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode, unsigned char tBorder) -> unsigned char
        getVoxelWithWrapping(LargeVolumeuint8 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode) -> unsigned char
        getVoxelWithWrapping(LargeVolumeuint8 self, Vector3Dint32_t v3dPos) -> unsigned char
        """
        return _PolyVoxCore.LargeVolumeuint8_getVoxelWithWrapping(self, *args)


    def setMaxNumberOfUncompressedBlocks(self, uMaxNumberOfUncompressedBlocks: 'uint32_t') -> "void":
        """setMaxNumberOfUncompressedBlocks(LargeVolumeuint8 self, uint32_t uMaxNumberOfUncompressedBlocks)"""
        return _PolyVoxCore.LargeVolumeuint8_setMaxNumberOfUncompressedBlocks(self, uMaxNumberOfUncompressedBlocks)


    def setMaxNumberOfBlocksInMemory(self, uMaxNumberOfBlocksInMemory: 'uint32_t') -> "void":
        """setMaxNumberOfBlocksInMemory(LargeVolumeuint8 self, uint32_t uMaxNumberOfBlocksInMemory)"""
        return _PolyVoxCore.LargeVolumeuint8_setMaxNumberOfBlocksInMemory(self, uMaxNumberOfBlocksInMemory)


    def setVoxelAt(self, *args) -> "bool":
        """
        setVoxelAt(LargeVolumeuint8 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, unsigned char tValue) -> bool
        setVoxelAt(LargeVolumeuint8 self, Vector3Dint32_t v3dPos, unsigned char tValue) -> bool
        """
        return _PolyVoxCore.LargeVolumeuint8_setVoxelAt(self, *args)


    def prefetch(self, regPrefetch: 'Region') -> "void":
        """prefetch(LargeVolumeuint8 self, Region regPrefetch)"""
        return _PolyVoxCore.LargeVolumeuint8_prefetch(self, regPrefetch)


    def flush(self, regFlush: 'Region') -> "void":
        """flush(LargeVolumeuint8 self, Region regFlush)"""
        return _PolyVoxCore.LargeVolumeuint8_flush(self, regFlush)


    def flushAll(self) -> "void":
        """flushAll(LargeVolumeuint8 self)"""
        return _PolyVoxCore.LargeVolumeuint8_flushAll(self)


    def clearBlockCache(self) -> "void":
        """clearBlockCache(LargeVolumeuint8 self)"""
        return _PolyVoxCore.LargeVolumeuint8_clearBlockCache(self)


    def calculateCompressionRatio(self) -> "float":
        """calculateCompressionRatio(LargeVolumeuint8 self) -> float"""
        return _PolyVoxCore.LargeVolumeuint8_calculateCompressionRatio(self)


    def calculateSizeInBytes(self) -> "uint32_t":
        """calculateSizeInBytes(LargeVolumeuint8 self) -> uint32_t"""
        return _PolyVoxCore.LargeVolumeuint8_calculateSizeInBytes(self)

LargeVolumeuint8_swigregister = _PolyVoxCore.LargeVolumeuint8_swigregister
LargeVolumeuint8_swigregister(LargeVolumeuint8)

class LargeVolumeuint16(BaseVolumeuint16):
    """Proxy of C++ PolyVox::LargeVolume<(uint16_t)> class."""

    __swig_setmethods__ = {}
    for _s in [BaseVolumeuint16]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LargeVolumeuint16, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseVolumeuint16]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LargeVolumeuint16, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::LargeVolume<(uint16_t)> self, std::function< void (PolyVox::ConstVolumeProxy< unsigned short > const &,PolyVox::Region const &) > dataRequiredHandler, std::function< void (PolyVox::ConstVolumeProxy< unsigned short > const &,PolyVox::Region const &) > dataOverflowHandler, uint16_t uBlockSideLength=32) -> LargeVolumeuint16
        __init__(PolyVox::LargeVolume<(uint16_t)> self, std::function< void (PolyVox::ConstVolumeProxy< unsigned short > const &,PolyVox::Region const &) > dataRequiredHandler, std::function< void (PolyVox::ConstVolumeProxy< unsigned short > const &,PolyVox::Region const &) > dataOverflowHandler) -> LargeVolumeuint16
        __init__(PolyVox::LargeVolume<(uint16_t)> self, Region regValid, Compressor pCompressor=None, std::function< void (PolyVox::ConstVolumeProxy< unsigned short > const &,PolyVox::Region const &) > dataRequiredHandler=0, std::function< void (PolyVox::ConstVolumeProxy< unsigned short > const &,PolyVox::Region const &) > dataOverflowHandler=0, bool bPagingEnabled=False, uint16_t uBlockSideLength=32) -> LargeVolumeuint16
        __init__(PolyVox::LargeVolume<(uint16_t)> self, Region regValid, Compressor pCompressor=None, std::function< void (PolyVox::ConstVolumeProxy< unsigned short > const &,PolyVox::Region const &) > dataRequiredHandler=0, std::function< void (PolyVox::ConstVolumeProxy< unsigned short > const &,PolyVox::Region const &) > dataOverflowHandler=0, bool bPagingEnabled=False) -> LargeVolumeuint16
        __init__(PolyVox::LargeVolume<(uint16_t)> self, Region regValid, Compressor pCompressor=None, std::function< void (PolyVox::ConstVolumeProxy< unsigned short > const &,PolyVox::Region const &) > dataRequiredHandler=0, std::function< void (PolyVox::ConstVolumeProxy< unsigned short > const &,PolyVox::Region const &) > dataOverflowHandler=0) -> LargeVolumeuint16
        __init__(PolyVox::LargeVolume<(uint16_t)> self, Region regValid, Compressor pCompressor=None, std::function< void (PolyVox::ConstVolumeProxy< unsigned short > const &,PolyVox::Region const &) > dataRequiredHandler=0) -> LargeVolumeuint16
        __init__(PolyVox::LargeVolume<(uint16_t)> self, Region regValid, Compressor pCompressor=None) -> LargeVolumeuint16
        __init__(PolyVox::LargeVolume<(uint16_t)> self, Region regValid) -> LargeVolumeuint16
        """
        this = _PolyVoxCore.new_LargeVolumeuint16(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _PolyVoxCore.delete_LargeVolumeuint16
    __del__ = lambda self: None

    def getVoxel(self, *args) -> "unsigned short":
        """
        getVoxel(LargeVolumeuint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> unsigned short
        getVoxel(LargeVolumeuint16 self, Vector3Dint32_t v3dPos) -> unsigned short
        """
        return _PolyVoxCore.LargeVolumeuint16_getVoxel(self, *args)


    def getVoxelAt(self, *args) -> "unsigned short":
        """
        getVoxelAt(LargeVolumeuint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> unsigned short
        getVoxelAt(LargeVolumeuint16 self, Vector3Dint32_t v3dPos) -> unsigned short
        """
        return _PolyVoxCore.LargeVolumeuint16_getVoxelAt(self, *args)


    def getVoxelWithWrapping(self, *args) -> "unsigned short":
        """
        getVoxelWithWrapping(LargeVolumeuint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode, unsigned short tBorder) -> unsigned short
        getVoxelWithWrapping(LargeVolumeuint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode) -> unsigned short
        getVoxelWithWrapping(LargeVolumeuint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> unsigned short
        getVoxelWithWrapping(LargeVolumeuint16 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode, unsigned short tBorder) -> unsigned short
        getVoxelWithWrapping(LargeVolumeuint16 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode) -> unsigned short
        getVoxelWithWrapping(LargeVolumeuint16 self, Vector3Dint32_t v3dPos) -> unsigned short
        """
        return _PolyVoxCore.LargeVolumeuint16_getVoxelWithWrapping(self, *args)


    def setMaxNumberOfUncompressedBlocks(self, uMaxNumberOfUncompressedBlocks: 'uint32_t') -> "void":
        """setMaxNumberOfUncompressedBlocks(LargeVolumeuint16 self, uint32_t uMaxNumberOfUncompressedBlocks)"""
        return _PolyVoxCore.LargeVolumeuint16_setMaxNumberOfUncompressedBlocks(self, uMaxNumberOfUncompressedBlocks)


    def setMaxNumberOfBlocksInMemory(self, uMaxNumberOfBlocksInMemory: 'uint32_t') -> "void":
        """setMaxNumberOfBlocksInMemory(LargeVolumeuint16 self, uint32_t uMaxNumberOfBlocksInMemory)"""
        return _PolyVoxCore.LargeVolumeuint16_setMaxNumberOfBlocksInMemory(self, uMaxNumberOfBlocksInMemory)


    def setVoxelAt(self, *args) -> "bool":
        """
        setVoxelAt(LargeVolumeuint16 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, unsigned short tValue) -> bool
        setVoxelAt(LargeVolumeuint16 self, Vector3Dint32_t v3dPos, unsigned short tValue) -> bool
        """
        return _PolyVoxCore.LargeVolumeuint16_setVoxelAt(self, *args)


    def prefetch(self, regPrefetch: 'Region') -> "void":
        """prefetch(LargeVolumeuint16 self, Region regPrefetch)"""
        return _PolyVoxCore.LargeVolumeuint16_prefetch(self, regPrefetch)


    def flush(self, regFlush: 'Region') -> "void":
        """flush(LargeVolumeuint16 self, Region regFlush)"""
        return _PolyVoxCore.LargeVolumeuint16_flush(self, regFlush)


    def flushAll(self) -> "void":
        """flushAll(LargeVolumeuint16 self)"""
        return _PolyVoxCore.LargeVolumeuint16_flushAll(self)


    def clearBlockCache(self) -> "void":
        """clearBlockCache(LargeVolumeuint16 self)"""
        return _PolyVoxCore.LargeVolumeuint16_clearBlockCache(self)


    def calculateCompressionRatio(self) -> "float":
        """calculateCompressionRatio(LargeVolumeuint16 self) -> float"""
        return _PolyVoxCore.LargeVolumeuint16_calculateCompressionRatio(self)


    def calculateSizeInBytes(self) -> "uint32_t":
        """calculateSizeInBytes(LargeVolumeuint16 self) -> uint32_t"""
        return _PolyVoxCore.LargeVolumeuint16_calculateSizeInBytes(self)

LargeVolumeuint16_swigregister = _PolyVoxCore.LargeVolumeuint16_swigregister
LargeVolumeuint16_swigregister(LargeVolumeuint16)

class LargeVolumeuint32(BaseVolumeuint32):
    """Proxy of C++ PolyVox::LargeVolume<(uint32_t)> class."""

    __swig_setmethods__ = {}
    for _s in [BaseVolumeuint32]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LargeVolumeuint32, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseVolumeuint32]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LargeVolumeuint32, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::LargeVolume<(uint32_t)> self, std::function< void (PolyVox::ConstVolumeProxy< unsigned int > const &,PolyVox::Region const &) > dataRequiredHandler, std::function< void (PolyVox::ConstVolumeProxy< unsigned int > const &,PolyVox::Region const &) > dataOverflowHandler, uint16_t uBlockSideLength=32) -> LargeVolumeuint32
        __init__(PolyVox::LargeVolume<(uint32_t)> self, std::function< void (PolyVox::ConstVolumeProxy< unsigned int > const &,PolyVox::Region const &) > dataRequiredHandler, std::function< void (PolyVox::ConstVolumeProxy< unsigned int > const &,PolyVox::Region const &) > dataOverflowHandler) -> LargeVolumeuint32
        __init__(PolyVox::LargeVolume<(uint32_t)> self, Region regValid, Compressor pCompressor=None, std::function< void (PolyVox::ConstVolumeProxy< unsigned int > const &,PolyVox::Region const &) > dataRequiredHandler=0, std::function< void (PolyVox::ConstVolumeProxy< unsigned int > const &,PolyVox::Region const &) > dataOverflowHandler=0, bool bPagingEnabled=False, uint16_t uBlockSideLength=32) -> LargeVolumeuint32
        __init__(PolyVox::LargeVolume<(uint32_t)> self, Region regValid, Compressor pCompressor=None, std::function< void (PolyVox::ConstVolumeProxy< unsigned int > const &,PolyVox::Region const &) > dataRequiredHandler=0, std::function< void (PolyVox::ConstVolumeProxy< unsigned int > const &,PolyVox::Region const &) > dataOverflowHandler=0, bool bPagingEnabled=False) -> LargeVolumeuint32
        __init__(PolyVox::LargeVolume<(uint32_t)> self, Region regValid, Compressor pCompressor=None, std::function< void (PolyVox::ConstVolumeProxy< unsigned int > const &,PolyVox::Region const &) > dataRequiredHandler=0, std::function< void (PolyVox::ConstVolumeProxy< unsigned int > const &,PolyVox::Region const &) > dataOverflowHandler=0) -> LargeVolumeuint32
        __init__(PolyVox::LargeVolume<(uint32_t)> self, Region regValid, Compressor pCompressor=None, std::function< void (PolyVox::ConstVolumeProxy< unsigned int > const &,PolyVox::Region const &) > dataRequiredHandler=0) -> LargeVolumeuint32
        __init__(PolyVox::LargeVolume<(uint32_t)> self, Region regValid, Compressor pCompressor=None) -> LargeVolumeuint32
        __init__(PolyVox::LargeVolume<(uint32_t)> self, Region regValid) -> LargeVolumeuint32
        """
        this = _PolyVoxCore.new_LargeVolumeuint32(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _PolyVoxCore.delete_LargeVolumeuint32
    __del__ = lambda self: None

    def getVoxel(self, *args) -> "unsigned int":
        """
        getVoxel(LargeVolumeuint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> unsigned int
        getVoxel(LargeVolumeuint32 self, Vector3Dint32_t v3dPos) -> unsigned int
        """
        return _PolyVoxCore.LargeVolumeuint32_getVoxel(self, *args)


    def getVoxelAt(self, *args) -> "unsigned int":
        """
        getVoxelAt(LargeVolumeuint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> unsigned int
        getVoxelAt(LargeVolumeuint32 self, Vector3Dint32_t v3dPos) -> unsigned int
        """
        return _PolyVoxCore.LargeVolumeuint32_getVoxelAt(self, *args)


    def getVoxelWithWrapping(self, *args) -> "unsigned int":
        """
        getVoxelWithWrapping(LargeVolumeuint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode, unsigned int tBorder) -> unsigned int
        getVoxelWithWrapping(LargeVolumeuint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode) -> unsigned int
        getVoxelWithWrapping(LargeVolumeuint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> unsigned int
        getVoxelWithWrapping(LargeVolumeuint32 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode, unsigned int tBorder) -> unsigned int
        getVoxelWithWrapping(LargeVolumeuint32 self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode) -> unsigned int
        getVoxelWithWrapping(LargeVolumeuint32 self, Vector3Dint32_t v3dPos) -> unsigned int
        """
        return _PolyVoxCore.LargeVolumeuint32_getVoxelWithWrapping(self, *args)


    def setMaxNumberOfUncompressedBlocks(self, uMaxNumberOfUncompressedBlocks: 'uint32_t') -> "void":
        """setMaxNumberOfUncompressedBlocks(LargeVolumeuint32 self, uint32_t uMaxNumberOfUncompressedBlocks)"""
        return _PolyVoxCore.LargeVolumeuint32_setMaxNumberOfUncompressedBlocks(self, uMaxNumberOfUncompressedBlocks)


    def setMaxNumberOfBlocksInMemory(self, uMaxNumberOfBlocksInMemory: 'uint32_t') -> "void":
        """setMaxNumberOfBlocksInMemory(LargeVolumeuint32 self, uint32_t uMaxNumberOfBlocksInMemory)"""
        return _PolyVoxCore.LargeVolumeuint32_setMaxNumberOfBlocksInMemory(self, uMaxNumberOfBlocksInMemory)


    def setVoxelAt(self, *args) -> "bool":
        """
        setVoxelAt(LargeVolumeuint32 self, int32_t uXPos, int32_t uYPos, int32_t uZPos, unsigned int tValue) -> bool
        setVoxelAt(LargeVolumeuint32 self, Vector3Dint32_t v3dPos, unsigned int tValue) -> bool
        """
        return _PolyVoxCore.LargeVolumeuint32_setVoxelAt(self, *args)


    def prefetch(self, regPrefetch: 'Region') -> "void":
        """prefetch(LargeVolumeuint32 self, Region regPrefetch)"""
        return _PolyVoxCore.LargeVolumeuint32_prefetch(self, regPrefetch)


    def flush(self, regFlush: 'Region') -> "void":
        """flush(LargeVolumeuint32 self, Region regFlush)"""
        return _PolyVoxCore.LargeVolumeuint32_flush(self, regFlush)


    def flushAll(self) -> "void":
        """flushAll(LargeVolumeuint32 self)"""
        return _PolyVoxCore.LargeVolumeuint32_flushAll(self)


    def clearBlockCache(self) -> "void":
        """clearBlockCache(LargeVolumeuint32 self)"""
        return _PolyVoxCore.LargeVolumeuint32_clearBlockCache(self)


    def calculateCompressionRatio(self) -> "float":
        """calculateCompressionRatio(LargeVolumeuint32 self) -> float"""
        return _PolyVoxCore.LargeVolumeuint32_calculateCompressionRatio(self)


    def calculateSizeInBytes(self) -> "uint32_t":
        """calculateSizeInBytes(LargeVolumeuint32 self) -> uint32_t"""
        return _PolyVoxCore.LargeVolumeuint32_calculateSizeInBytes(self)

LargeVolumeuint32_swigregister = _PolyVoxCore.LargeVolumeuint32_swigregister
LargeVolumeuint32_swigregister(LargeVolumeuint32)

class LargeVolumefloat(BaseVolumefloat):
    """Proxy of C++ PolyVox::LargeVolume<(float)> class."""

    __swig_setmethods__ = {}
    for _s in [BaseVolumefloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LargeVolumefloat, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseVolumefloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LargeVolumefloat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::LargeVolume<(float)> self, std::function< void (PolyVox::ConstVolumeProxy< float > const &,PolyVox::Region const &) > dataRequiredHandler, std::function< void (PolyVox::ConstVolumeProxy< float > const &,PolyVox::Region const &) > dataOverflowHandler, uint16_t uBlockSideLength=32) -> LargeVolumefloat
        __init__(PolyVox::LargeVolume<(float)> self, std::function< void (PolyVox::ConstVolumeProxy< float > const &,PolyVox::Region const &) > dataRequiredHandler, std::function< void (PolyVox::ConstVolumeProxy< float > const &,PolyVox::Region const &) > dataOverflowHandler) -> LargeVolumefloat
        __init__(PolyVox::LargeVolume<(float)> self, Region regValid, Compressor pCompressor=None, std::function< void (PolyVox::ConstVolumeProxy< float > const &,PolyVox::Region const &) > dataRequiredHandler=0, std::function< void (PolyVox::ConstVolumeProxy< float > const &,PolyVox::Region const &) > dataOverflowHandler=0, bool bPagingEnabled=False, uint16_t uBlockSideLength=32) -> LargeVolumefloat
        __init__(PolyVox::LargeVolume<(float)> self, Region regValid, Compressor pCompressor=None, std::function< void (PolyVox::ConstVolumeProxy< float > const &,PolyVox::Region const &) > dataRequiredHandler=0, std::function< void (PolyVox::ConstVolumeProxy< float > const &,PolyVox::Region const &) > dataOverflowHandler=0, bool bPagingEnabled=False) -> LargeVolumefloat
        __init__(PolyVox::LargeVolume<(float)> self, Region regValid, Compressor pCompressor=None, std::function< void (PolyVox::ConstVolumeProxy< float > const &,PolyVox::Region const &) > dataRequiredHandler=0, std::function< void (PolyVox::ConstVolumeProxy< float > const &,PolyVox::Region const &) > dataOverflowHandler=0) -> LargeVolumefloat
        __init__(PolyVox::LargeVolume<(float)> self, Region regValid, Compressor pCompressor=None, std::function< void (PolyVox::ConstVolumeProxy< float > const &,PolyVox::Region const &) > dataRequiredHandler=0) -> LargeVolumefloat
        __init__(PolyVox::LargeVolume<(float)> self, Region regValid, Compressor pCompressor=None) -> LargeVolumefloat
        __init__(PolyVox::LargeVolume<(float)> self, Region regValid) -> LargeVolumefloat
        """
        this = _PolyVoxCore.new_LargeVolumefloat(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _PolyVoxCore.delete_LargeVolumefloat
    __del__ = lambda self: None

    def getVoxel(self, *args) -> "float":
        """
        getVoxel(LargeVolumefloat self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> float
        getVoxel(LargeVolumefloat self, Vector3Dint32_t v3dPos) -> float
        """
        return _PolyVoxCore.LargeVolumefloat_getVoxel(self, *args)


    def getVoxelAt(self, *args) -> "float":
        """
        getVoxelAt(LargeVolumefloat self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> float
        getVoxelAt(LargeVolumefloat self, Vector3Dint32_t v3dPos) -> float
        """
        return _PolyVoxCore.LargeVolumefloat_getVoxelAt(self, *args)


    def getVoxelWithWrapping(self, *args) -> "float":
        """
        getVoxelWithWrapping(LargeVolumefloat self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode, float tBorder) -> float
        getVoxelWithWrapping(LargeVolumefloat self, int32_t uXPos, int32_t uYPos, int32_t uZPos, PolyVox::WrapMode eWrapMode) -> float
        getVoxelWithWrapping(LargeVolumefloat self, int32_t uXPos, int32_t uYPos, int32_t uZPos) -> float
        getVoxelWithWrapping(LargeVolumefloat self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode, float tBorder) -> float
        getVoxelWithWrapping(LargeVolumefloat self, Vector3Dint32_t v3dPos, PolyVox::WrapMode eWrapMode) -> float
        getVoxelWithWrapping(LargeVolumefloat self, Vector3Dint32_t v3dPos) -> float
        """
        return _PolyVoxCore.LargeVolumefloat_getVoxelWithWrapping(self, *args)


    def setMaxNumberOfUncompressedBlocks(self, uMaxNumberOfUncompressedBlocks: 'uint32_t') -> "void":
        """setMaxNumberOfUncompressedBlocks(LargeVolumefloat self, uint32_t uMaxNumberOfUncompressedBlocks)"""
        return _PolyVoxCore.LargeVolumefloat_setMaxNumberOfUncompressedBlocks(self, uMaxNumberOfUncompressedBlocks)


    def setMaxNumberOfBlocksInMemory(self, uMaxNumberOfBlocksInMemory: 'uint32_t') -> "void":
        """setMaxNumberOfBlocksInMemory(LargeVolumefloat self, uint32_t uMaxNumberOfBlocksInMemory)"""
        return _PolyVoxCore.LargeVolumefloat_setMaxNumberOfBlocksInMemory(self, uMaxNumberOfBlocksInMemory)


    def setVoxelAt(self, *args) -> "bool":
        """
        setVoxelAt(LargeVolumefloat self, int32_t uXPos, int32_t uYPos, int32_t uZPos, float tValue) -> bool
        setVoxelAt(LargeVolumefloat self, Vector3Dint32_t v3dPos, float tValue) -> bool
        """
        return _PolyVoxCore.LargeVolumefloat_setVoxelAt(self, *args)


    def prefetch(self, regPrefetch: 'Region') -> "void":
        """prefetch(LargeVolumefloat self, Region regPrefetch)"""
        return _PolyVoxCore.LargeVolumefloat_prefetch(self, regPrefetch)


    def flush(self, regFlush: 'Region') -> "void":
        """flush(LargeVolumefloat self, Region regFlush)"""
        return _PolyVoxCore.LargeVolumefloat_flush(self, regFlush)


    def flushAll(self) -> "void":
        """flushAll(LargeVolumefloat self)"""
        return _PolyVoxCore.LargeVolumefloat_flushAll(self)


    def clearBlockCache(self) -> "void":
        """clearBlockCache(LargeVolumefloat self)"""
        return _PolyVoxCore.LargeVolumefloat_clearBlockCache(self)


    def calculateCompressionRatio(self) -> "float":
        """calculateCompressionRatio(LargeVolumefloat self) -> float"""
        return _PolyVoxCore.LargeVolumefloat_calculateCompressionRatio(self)


    def calculateSizeInBytes(self) -> "uint32_t":
        """calculateSizeInBytes(LargeVolumefloat self) -> uint32_t"""
        return _PolyVoxCore.LargeVolumefloat_calculateSizeInBytes(self)

LargeVolumefloat_swigregister = _PolyVoxCore.LargeVolumefloat_swigregister
LargeVolumefloat_swigregister(LargeVolumefloat)

class PositionMaterial(_object):
    """Proxy of C++ PolyVox::PositionMaterial class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PositionMaterial, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PositionMaterial, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::PositionMaterial self) -> PositionMaterial
        __init__(PolyVox::PositionMaterial self, Vector3Dfloat positionToSet, float materialToSet) -> PositionMaterial
        """
        this = _PolyVoxCore.new_PositionMaterial(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def getMaterial(self) -> "float":
        """getMaterial(PositionMaterial self) -> float"""
        return _PolyVoxCore.PositionMaterial_getMaterial(self)


    def getPosition(self) -> "PolyVox::Vector3DFloat const &":
        """getPosition(PositionMaterial self) -> Vector3Dfloat"""
        return _PolyVoxCore.PositionMaterial_getPosition(self)


    def setMaterial(self, materialToSet: 'float') -> "void":
        """setMaterial(PositionMaterial self, float materialToSet)"""
        return _PolyVoxCore.PositionMaterial_setMaterial(self, materialToSet)


    def setPosition(self, positionToSet: 'Vector3Dfloat') -> "void":
        """setPosition(PositionMaterial self, Vector3Dfloat positionToSet)"""
        return _PolyVoxCore.PositionMaterial_setPosition(self, positionToSet)

    __swig_setmethods__["position"] = _PolyVoxCore.PositionMaterial_position_set
    __swig_getmethods__["position"] = _PolyVoxCore.PositionMaterial_position_get
    if _newclass:
        position = _swig_property(_PolyVoxCore.PositionMaterial_position_get, _PolyVoxCore.PositionMaterial_position_set)
    __swig_setmethods__["material"] = _PolyVoxCore.PositionMaterial_material_set
    __swig_getmethods__["material"] = _PolyVoxCore.PositionMaterial_material_get
    if _newclass:
        material = _swig_property(_PolyVoxCore.PositionMaterial_material_get, _PolyVoxCore.PositionMaterial_material_set)
    __swig_destroy__ = _PolyVoxCore.delete_PositionMaterial
    __del__ = lambda self: None
PositionMaterial_swigregister = _PolyVoxCore.PositionMaterial_swigregister
PositionMaterial_swigregister(PositionMaterial)

class PositionMaterialNormal(_object):
    """Proxy of C++ PolyVox::PositionMaterialNormal class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PositionMaterialNormal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PositionMaterialNormal, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::PositionMaterialNormal self) -> PositionMaterialNormal
        __init__(PolyVox::PositionMaterialNormal self, Vector3Dfloat positionToSet, float materialToSet) -> PositionMaterialNormal
        __init__(PolyVox::PositionMaterialNormal self, Vector3Dfloat positionToSet, Vector3Dfloat normalToSet, float materialToSet) -> PositionMaterialNormal
        """
        this = _PolyVoxCore.new_PositionMaterialNormal(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def getMaterial(self) -> "float":
        """getMaterial(PositionMaterialNormal self) -> float"""
        return _PolyVoxCore.PositionMaterialNormal_getMaterial(self)


    def getNormal(self) -> "PolyVox::Vector3DFloat const &":
        """getNormal(PositionMaterialNormal self) -> Vector3Dfloat"""
        return _PolyVoxCore.PositionMaterialNormal_getNormal(self)


    def getPosition(self) -> "PolyVox::Vector3DFloat const &":
        """getPosition(PositionMaterialNormal self) -> Vector3Dfloat"""
        return _PolyVoxCore.PositionMaterialNormal_getPosition(self)


    def setMaterial(self, materialToSet: 'float') -> "void":
        """setMaterial(PositionMaterialNormal self, float materialToSet)"""
        return _PolyVoxCore.PositionMaterialNormal_setMaterial(self, materialToSet)


    def setNormal(self, normalToSet: 'Vector3Dfloat') -> "void":
        """setNormal(PositionMaterialNormal self, Vector3Dfloat normalToSet)"""
        return _PolyVoxCore.PositionMaterialNormal_setNormal(self, normalToSet)


    def setPosition(self, positionToSet: 'Vector3Dfloat') -> "void":
        """setPosition(PositionMaterialNormal self, Vector3Dfloat positionToSet)"""
        return _PolyVoxCore.PositionMaterialNormal_setPosition(self, positionToSet)

    __swig_setmethods__["position"] = _PolyVoxCore.PositionMaterialNormal_position_set
    __swig_getmethods__["position"] = _PolyVoxCore.PositionMaterialNormal_position_get
    if _newclass:
        position = _swig_property(_PolyVoxCore.PositionMaterialNormal_position_get, _PolyVoxCore.PositionMaterialNormal_position_set)
    __swig_setmethods__["normal"] = _PolyVoxCore.PositionMaterialNormal_normal_set
    __swig_getmethods__["normal"] = _PolyVoxCore.PositionMaterialNormal_normal_get
    if _newclass:
        normal = _swig_property(_PolyVoxCore.PositionMaterialNormal_normal_get, _PolyVoxCore.PositionMaterialNormal_normal_set)
    __swig_setmethods__["material"] = _PolyVoxCore.PositionMaterialNormal_material_set
    __swig_getmethods__["material"] = _PolyVoxCore.PositionMaterialNormal_material_get
    if _newclass:
        material = _swig_property(_PolyVoxCore.PositionMaterialNormal_material_get, _PolyVoxCore.PositionMaterialNormal_material_set)
    __swig_destroy__ = _PolyVoxCore.delete_PositionMaterialNormal
    __del__ = lambda self: None
PositionMaterialNormal_swigregister = _PolyVoxCore.PositionMaterialNormal_swigregister
PositionMaterialNormal_swigregister(PositionMaterialNormal)

class LodRecord(_object):
    """Proxy of C++ PolyVox::LodRecord class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LodRecord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LodRecord, name)
    __repr__ = _swig_repr
    __swig_setmethods__["beginIndex"] = _PolyVoxCore.LodRecord_beginIndex_set
    __swig_getmethods__["beginIndex"] = _PolyVoxCore.LodRecord_beginIndex_get
    if _newclass:
        beginIndex = _swig_property(_PolyVoxCore.LodRecord_beginIndex_get, _PolyVoxCore.LodRecord_beginIndex_set)
    __swig_setmethods__["endIndex"] = _PolyVoxCore.LodRecord_endIndex_set
    __swig_getmethods__["endIndex"] = _PolyVoxCore.LodRecord_endIndex_get
    if _newclass:
        endIndex = _swig_property(_PolyVoxCore.LodRecord_endIndex_get, _PolyVoxCore.LodRecord_endIndex_set)

    def __init__(self):
        """__init__(PolyVox::LodRecord self) -> LodRecord"""
        this = _PolyVoxCore.new_LodRecord()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _PolyVoxCore.delete_LodRecord
    __del__ = lambda self: None
LodRecord_swigregister = _PolyVoxCore.LodRecord_swigregister
LodRecord_swigregister(LodRecord)

class PositionMaterialVector(_object):
    """Proxy of C++ std::vector<(PolyVox::PositionMaterial)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PositionMaterialVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PositionMaterialVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(PositionMaterialVector self) -> SwigPyIterator"""
        return _PolyVoxCore.PositionMaterialVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(PositionMaterialVector self) -> bool"""
        return _PolyVoxCore.PositionMaterialVector___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(PositionMaterialVector self) -> bool"""
        return _PolyVoxCore.PositionMaterialVector___bool__(self)


    def __len__(self) -> "std::vector< PolyVox::PositionMaterial >::size_type":
        """__len__(PositionMaterialVector self) -> std::vector< PolyVox::PositionMaterial >::size_type"""
        return _PolyVoxCore.PositionMaterialVector___len__(self)


    def __getslice__(self, i: 'std::vector< PolyVox::PositionMaterial >::difference_type', j: 'std::vector< PolyVox::PositionMaterial >::difference_type') -> "std::vector< PolyVox::PositionMaterial,std::allocator< PolyVox::PositionMaterial > > *":
        """__getslice__(PositionMaterialVector self, std::vector< PolyVox::PositionMaterial >::difference_type i, std::vector< PolyVox::PositionMaterial >::difference_type j) -> PositionMaterialVector"""
        return _PolyVoxCore.PositionMaterialVector___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(PositionMaterialVector self, std::vector< PolyVox::PositionMaterial >::difference_type i, std::vector< PolyVox::PositionMaterial >::difference_type j)
        __setslice__(PositionMaterialVector self, std::vector< PolyVox::PositionMaterial >::difference_type i, std::vector< PolyVox::PositionMaterial >::difference_type j, PositionMaterialVector v)
        """
        return _PolyVoxCore.PositionMaterialVector___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< PolyVox::PositionMaterial >::difference_type', j: 'std::vector< PolyVox::PositionMaterial >::difference_type') -> "void":
        """__delslice__(PositionMaterialVector self, std::vector< PolyVox::PositionMaterial >::difference_type i, std::vector< PolyVox::PositionMaterial >::difference_type j)"""
        return _PolyVoxCore.PositionMaterialVector___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(PositionMaterialVector self, std::vector< PolyVox::PositionMaterial >::difference_type i)
        __delitem__(PositionMaterialVector self, PySliceObject * slice)
        """
        return _PolyVoxCore.PositionMaterialVector___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< PolyVox::PositionMaterial >::value_type const &":
        """
        __getitem__(PositionMaterialVector self, PySliceObject * slice) -> PositionMaterialVector
        __getitem__(PositionMaterialVector self, std::vector< PolyVox::PositionMaterial >::difference_type i) -> PositionMaterial
        """
        return _PolyVoxCore.PositionMaterialVector___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(PositionMaterialVector self, PySliceObject * slice, PositionMaterialVector v)
        __setitem__(PositionMaterialVector self, PySliceObject * slice)
        __setitem__(PositionMaterialVector self, std::vector< PolyVox::PositionMaterial >::difference_type i, PositionMaterial x)
        """
        return _PolyVoxCore.PositionMaterialVector___setitem__(self, *args)


    def pop(self) -> "std::vector< PolyVox::PositionMaterial >::value_type":
        """pop(PositionMaterialVector self) -> PositionMaterial"""
        return _PolyVoxCore.PositionMaterialVector_pop(self)


    def append(self, x: 'PositionMaterial') -> "void":
        """append(PositionMaterialVector self, PositionMaterial x)"""
        return _PolyVoxCore.PositionMaterialVector_append(self, x)


    def empty(self) -> "bool":
        """empty(PositionMaterialVector self) -> bool"""
        return _PolyVoxCore.PositionMaterialVector_empty(self)


    def size(self) -> "std::vector< PolyVox::PositionMaterial >::size_type":
        """size(PositionMaterialVector self) -> std::vector< PolyVox::PositionMaterial >::size_type"""
        return _PolyVoxCore.PositionMaterialVector_size(self)


    def swap(self, v: 'PositionMaterialVector') -> "void":
        """swap(PositionMaterialVector self, PositionMaterialVector v)"""
        return _PolyVoxCore.PositionMaterialVector_swap(self, v)


    def begin(self) -> "std::vector< PolyVox::PositionMaterial >::iterator":
        """begin(PositionMaterialVector self) -> std::vector< PolyVox::PositionMaterial >::iterator"""
        return _PolyVoxCore.PositionMaterialVector_begin(self)


    def end(self) -> "std::vector< PolyVox::PositionMaterial >::iterator":
        """end(PositionMaterialVector self) -> std::vector< PolyVox::PositionMaterial >::iterator"""
        return _PolyVoxCore.PositionMaterialVector_end(self)


    def rbegin(self) -> "std::vector< PolyVox::PositionMaterial >::reverse_iterator":
        """rbegin(PositionMaterialVector self) -> std::vector< PolyVox::PositionMaterial >::reverse_iterator"""
        return _PolyVoxCore.PositionMaterialVector_rbegin(self)


    def rend(self) -> "std::vector< PolyVox::PositionMaterial >::reverse_iterator":
        """rend(PositionMaterialVector self) -> std::vector< PolyVox::PositionMaterial >::reverse_iterator"""
        return _PolyVoxCore.PositionMaterialVector_rend(self)


    def clear(self) -> "void":
        """clear(PositionMaterialVector self)"""
        return _PolyVoxCore.PositionMaterialVector_clear(self)


    def get_allocator(self) -> "std::vector< PolyVox::PositionMaterial >::allocator_type":
        """get_allocator(PositionMaterialVector self) -> std::vector< PolyVox::PositionMaterial >::allocator_type"""
        return _PolyVoxCore.PositionMaterialVector_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(PositionMaterialVector self)"""
        return _PolyVoxCore.PositionMaterialVector_pop_back(self)


    def erase(self, *args) -> "std::vector< PolyVox::PositionMaterial >::iterator":
        """
        erase(PositionMaterialVector self, std::vector< PolyVox::PositionMaterial >::iterator pos) -> std::vector< PolyVox::PositionMaterial >::iterator
        erase(PositionMaterialVector self, std::vector< PolyVox::PositionMaterial >::iterator first, std::vector< PolyVox::PositionMaterial >::iterator last) -> std::vector< PolyVox::PositionMaterial >::iterator
        """
        return _PolyVoxCore.PositionMaterialVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(PolyVox::PositionMaterial)> self) -> PositionMaterialVector
        __init__(std::vector<(PolyVox::PositionMaterial)> self, PositionMaterialVector arg2) -> PositionMaterialVector
        __init__(std::vector<(PolyVox::PositionMaterial)> self, std::vector< PolyVox::PositionMaterial >::size_type size) -> PositionMaterialVector
        __init__(std::vector<(PolyVox::PositionMaterial)> self, std::vector< PolyVox::PositionMaterial >::size_type size, PositionMaterial value) -> PositionMaterialVector
        """
        this = _PolyVoxCore.new_PositionMaterialVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x: 'PositionMaterial') -> "void":
        """push_back(PositionMaterialVector self, PositionMaterial x)"""
        return _PolyVoxCore.PositionMaterialVector_push_back(self, x)


    def front(self) -> "std::vector< PolyVox::PositionMaterial >::value_type const &":
        """front(PositionMaterialVector self) -> PositionMaterial"""
        return _PolyVoxCore.PositionMaterialVector_front(self)


    def back(self) -> "std::vector< PolyVox::PositionMaterial >::value_type const &":
        """back(PositionMaterialVector self) -> PositionMaterial"""
        return _PolyVoxCore.PositionMaterialVector_back(self)


    def assign(self, n: 'std::vector< PolyVox::PositionMaterial >::size_type', x: 'PositionMaterial') -> "void":
        """assign(PositionMaterialVector self, std::vector< PolyVox::PositionMaterial >::size_type n, PositionMaterial x)"""
        return _PolyVoxCore.PositionMaterialVector_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(PositionMaterialVector self, std::vector< PolyVox::PositionMaterial >::size_type new_size)
        resize(PositionMaterialVector self, std::vector< PolyVox::PositionMaterial >::size_type new_size, PositionMaterial x)
        """
        return _PolyVoxCore.PositionMaterialVector_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(PositionMaterialVector self, std::vector< PolyVox::PositionMaterial >::iterator pos, PositionMaterial x) -> std::vector< PolyVox::PositionMaterial >::iterator
        insert(PositionMaterialVector self, std::vector< PolyVox::PositionMaterial >::iterator pos, std::vector< PolyVox::PositionMaterial >::size_type n, PositionMaterial x)
        """
        return _PolyVoxCore.PositionMaterialVector_insert(self, *args)


    def reserve(self, n: 'std::vector< PolyVox::PositionMaterial >::size_type') -> "void":
        """reserve(PositionMaterialVector self, std::vector< PolyVox::PositionMaterial >::size_type n)"""
        return _PolyVoxCore.PositionMaterialVector_reserve(self, n)


    def capacity(self) -> "std::vector< PolyVox::PositionMaterial >::size_type":
        """capacity(PositionMaterialVector self) -> std::vector< PolyVox::PositionMaterial >::size_type"""
        return _PolyVoxCore.PositionMaterialVector_capacity(self)

    __swig_destroy__ = _PolyVoxCore.delete_PositionMaterialVector
    __del__ = lambda self: None
PositionMaterialVector_swigregister = _PolyVoxCore.PositionMaterialVector_swigregister
PositionMaterialVector_swigregister(PositionMaterialVector)

class PositionMaterialNormalVector(_object):
    """Proxy of C++ std::vector<(PolyVox::PositionMaterialNormal)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PositionMaterialNormalVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PositionMaterialNormalVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(PositionMaterialNormalVector self) -> SwigPyIterator"""
        return _PolyVoxCore.PositionMaterialNormalVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(PositionMaterialNormalVector self) -> bool"""
        return _PolyVoxCore.PositionMaterialNormalVector___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(PositionMaterialNormalVector self) -> bool"""
        return _PolyVoxCore.PositionMaterialNormalVector___bool__(self)


    def __len__(self) -> "std::vector< PolyVox::PositionMaterialNormal >::size_type":
        """__len__(PositionMaterialNormalVector self) -> std::vector< PolyVox::PositionMaterialNormal >::size_type"""
        return _PolyVoxCore.PositionMaterialNormalVector___len__(self)


    def __getslice__(self, i: 'std::vector< PolyVox::PositionMaterialNormal >::difference_type', j: 'std::vector< PolyVox::PositionMaterialNormal >::difference_type') -> "std::vector< PolyVox::PositionMaterialNormal,std::allocator< PolyVox::PositionMaterialNormal > > *":
        """__getslice__(PositionMaterialNormalVector self, std::vector< PolyVox::PositionMaterialNormal >::difference_type i, std::vector< PolyVox::PositionMaterialNormal >::difference_type j) -> PositionMaterialNormalVector"""
        return _PolyVoxCore.PositionMaterialNormalVector___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(PositionMaterialNormalVector self, std::vector< PolyVox::PositionMaterialNormal >::difference_type i, std::vector< PolyVox::PositionMaterialNormal >::difference_type j)
        __setslice__(PositionMaterialNormalVector self, std::vector< PolyVox::PositionMaterialNormal >::difference_type i, std::vector< PolyVox::PositionMaterialNormal >::difference_type j, PositionMaterialNormalVector v)
        """
        return _PolyVoxCore.PositionMaterialNormalVector___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< PolyVox::PositionMaterialNormal >::difference_type', j: 'std::vector< PolyVox::PositionMaterialNormal >::difference_type') -> "void":
        """__delslice__(PositionMaterialNormalVector self, std::vector< PolyVox::PositionMaterialNormal >::difference_type i, std::vector< PolyVox::PositionMaterialNormal >::difference_type j)"""
        return _PolyVoxCore.PositionMaterialNormalVector___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(PositionMaterialNormalVector self, std::vector< PolyVox::PositionMaterialNormal >::difference_type i)
        __delitem__(PositionMaterialNormalVector self, PySliceObject * slice)
        """
        return _PolyVoxCore.PositionMaterialNormalVector___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< PolyVox::PositionMaterialNormal >::value_type const &":
        """
        __getitem__(PositionMaterialNormalVector self, PySliceObject * slice) -> PositionMaterialNormalVector
        __getitem__(PositionMaterialNormalVector self, std::vector< PolyVox::PositionMaterialNormal >::difference_type i) -> PositionMaterialNormal
        """
        return _PolyVoxCore.PositionMaterialNormalVector___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(PositionMaterialNormalVector self, PySliceObject * slice, PositionMaterialNormalVector v)
        __setitem__(PositionMaterialNormalVector self, PySliceObject * slice)
        __setitem__(PositionMaterialNormalVector self, std::vector< PolyVox::PositionMaterialNormal >::difference_type i, PositionMaterialNormal x)
        """
        return _PolyVoxCore.PositionMaterialNormalVector___setitem__(self, *args)


    def pop(self) -> "std::vector< PolyVox::PositionMaterialNormal >::value_type":
        """pop(PositionMaterialNormalVector self) -> PositionMaterialNormal"""
        return _PolyVoxCore.PositionMaterialNormalVector_pop(self)


    def append(self, x: 'PositionMaterialNormal') -> "void":
        """append(PositionMaterialNormalVector self, PositionMaterialNormal x)"""
        return _PolyVoxCore.PositionMaterialNormalVector_append(self, x)


    def empty(self) -> "bool":
        """empty(PositionMaterialNormalVector self) -> bool"""
        return _PolyVoxCore.PositionMaterialNormalVector_empty(self)


    def size(self) -> "std::vector< PolyVox::PositionMaterialNormal >::size_type":
        """size(PositionMaterialNormalVector self) -> std::vector< PolyVox::PositionMaterialNormal >::size_type"""
        return _PolyVoxCore.PositionMaterialNormalVector_size(self)


    def swap(self, v: 'PositionMaterialNormalVector') -> "void":
        """swap(PositionMaterialNormalVector self, PositionMaterialNormalVector v)"""
        return _PolyVoxCore.PositionMaterialNormalVector_swap(self, v)


    def begin(self) -> "std::vector< PolyVox::PositionMaterialNormal >::iterator":
        """begin(PositionMaterialNormalVector self) -> std::vector< PolyVox::PositionMaterialNormal >::iterator"""
        return _PolyVoxCore.PositionMaterialNormalVector_begin(self)


    def end(self) -> "std::vector< PolyVox::PositionMaterialNormal >::iterator":
        """end(PositionMaterialNormalVector self) -> std::vector< PolyVox::PositionMaterialNormal >::iterator"""
        return _PolyVoxCore.PositionMaterialNormalVector_end(self)


    def rbegin(self) -> "std::vector< PolyVox::PositionMaterialNormal >::reverse_iterator":
        """rbegin(PositionMaterialNormalVector self) -> std::vector< PolyVox::PositionMaterialNormal >::reverse_iterator"""
        return _PolyVoxCore.PositionMaterialNormalVector_rbegin(self)


    def rend(self) -> "std::vector< PolyVox::PositionMaterialNormal >::reverse_iterator":
        """rend(PositionMaterialNormalVector self) -> std::vector< PolyVox::PositionMaterialNormal >::reverse_iterator"""
        return _PolyVoxCore.PositionMaterialNormalVector_rend(self)


    def clear(self) -> "void":
        """clear(PositionMaterialNormalVector self)"""
        return _PolyVoxCore.PositionMaterialNormalVector_clear(self)


    def get_allocator(self) -> "std::vector< PolyVox::PositionMaterialNormal >::allocator_type":
        """get_allocator(PositionMaterialNormalVector self) -> std::vector< PolyVox::PositionMaterialNormal >::allocator_type"""
        return _PolyVoxCore.PositionMaterialNormalVector_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(PositionMaterialNormalVector self)"""
        return _PolyVoxCore.PositionMaterialNormalVector_pop_back(self)


    def erase(self, *args) -> "std::vector< PolyVox::PositionMaterialNormal >::iterator":
        """
        erase(PositionMaterialNormalVector self, std::vector< PolyVox::PositionMaterialNormal >::iterator pos) -> std::vector< PolyVox::PositionMaterialNormal >::iterator
        erase(PositionMaterialNormalVector self, std::vector< PolyVox::PositionMaterialNormal >::iterator first, std::vector< PolyVox::PositionMaterialNormal >::iterator last) -> std::vector< PolyVox::PositionMaterialNormal >::iterator
        """
        return _PolyVoxCore.PositionMaterialNormalVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(PolyVox::PositionMaterialNormal)> self) -> PositionMaterialNormalVector
        __init__(std::vector<(PolyVox::PositionMaterialNormal)> self, PositionMaterialNormalVector arg2) -> PositionMaterialNormalVector
        __init__(std::vector<(PolyVox::PositionMaterialNormal)> self, std::vector< PolyVox::PositionMaterialNormal >::size_type size) -> PositionMaterialNormalVector
        __init__(std::vector<(PolyVox::PositionMaterialNormal)> self, std::vector< PolyVox::PositionMaterialNormal >::size_type size, PositionMaterialNormal value) -> PositionMaterialNormalVector
        """
        this = _PolyVoxCore.new_PositionMaterialNormalVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x: 'PositionMaterialNormal') -> "void":
        """push_back(PositionMaterialNormalVector self, PositionMaterialNormal x)"""
        return _PolyVoxCore.PositionMaterialNormalVector_push_back(self, x)


    def front(self) -> "std::vector< PolyVox::PositionMaterialNormal >::value_type const &":
        """front(PositionMaterialNormalVector self) -> PositionMaterialNormal"""
        return _PolyVoxCore.PositionMaterialNormalVector_front(self)


    def back(self) -> "std::vector< PolyVox::PositionMaterialNormal >::value_type const &":
        """back(PositionMaterialNormalVector self) -> PositionMaterialNormal"""
        return _PolyVoxCore.PositionMaterialNormalVector_back(self)


    def assign(self, n: 'std::vector< PolyVox::PositionMaterialNormal >::size_type', x: 'PositionMaterialNormal') -> "void":
        """assign(PositionMaterialNormalVector self, std::vector< PolyVox::PositionMaterialNormal >::size_type n, PositionMaterialNormal x)"""
        return _PolyVoxCore.PositionMaterialNormalVector_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(PositionMaterialNormalVector self, std::vector< PolyVox::PositionMaterialNormal >::size_type new_size)
        resize(PositionMaterialNormalVector self, std::vector< PolyVox::PositionMaterialNormal >::size_type new_size, PositionMaterialNormal x)
        """
        return _PolyVoxCore.PositionMaterialNormalVector_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(PositionMaterialNormalVector self, std::vector< PolyVox::PositionMaterialNormal >::iterator pos, PositionMaterialNormal x) -> std::vector< PolyVox::PositionMaterialNormal >::iterator
        insert(PositionMaterialNormalVector self, std::vector< PolyVox::PositionMaterialNormal >::iterator pos, std::vector< PolyVox::PositionMaterialNormal >::size_type n, PositionMaterialNormal x)
        """
        return _PolyVoxCore.PositionMaterialNormalVector_insert(self, *args)


    def reserve(self, n: 'std::vector< PolyVox::PositionMaterialNormal >::size_type') -> "void":
        """reserve(PositionMaterialNormalVector self, std::vector< PolyVox::PositionMaterialNormal >::size_type n)"""
        return _PolyVoxCore.PositionMaterialNormalVector_reserve(self, n)


    def capacity(self) -> "std::vector< PolyVox::PositionMaterialNormal >::size_type":
        """capacity(PositionMaterialNormalVector self) -> std::vector< PolyVox::PositionMaterialNormal >::size_type"""
        return _PolyVoxCore.PositionMaterialNormalVector_capacity(self)

    __swig_destroy__ = _PolyVoxCore.delete_PositionMaterialNormalVector
    __del__ = lambda self: None
PositionMaterialNormalVector_swigregister = _PolyVoxCore.PositionMaterialNormalVector_swigregister
PositionMaterialNormalVector_swigregister(PositionMaterialNormalVector)

class LodRecordVector(_object):
    """Proxy of C++ std::vector<(PolyVox::LodRecord)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LodRecordVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LodRecordVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(LodRecordVector self) -> SwigPyIterator"""
        return _PolyVoxCore.LodRecordVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(LodRecordVector self) -> bool"""
        return _PolyVoxCore.LodRecordVector___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(LodRecordVector self) -> bool"""
        return _PolyVoxCore.LodRecordVector___bool__(self)


    def __len__(self) -> "std::vector< PolyVox::LodRecord >::size_type":
        """__len__(LodRecordVector self) -> std::vector< PolyVox::LodRecord >::size_type"""
        return _PolyVoxCore.LodRecordVector___len__(self)


    def __getslice__(self, i: 'std::vector< PolyVox::LodRecord >::difference_type', j: 'std::vector< PolyVox::LodRecord >::difference_type') -> "std::vector< PolyVox::LodRecord,std::allocator< PolyVox::LodRecord > > *":
        """__getslice__(LodRecordVector self, std::vector< PolyVox::LodRecord >::difference_type i, std::vector< PolyVox::LodRecord >::difference_type j) -> LodRecordVector"""
        return _PolyVoxCore.LodRecordVector___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(LodRecordVector self, std::vector< PolyVox::LodRecord >::difference_type i, std::vector< PolyVox::LodRecord >::difference_type j)
        __setslice__(LodRecordVector self, std::vector< PolyVox::LodRecord >::difference_type i, std::vector< PolyVox::LodRecord >::difference_type j, LodRecordVector v)
        """
        return _PolyVoxCore.LodRecordVector___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< PolyVox::LodRecord >::difference_type', j: 'std::vector< PolyVox::LodRecord >::difference_type') -> "void":
        """__delslice__(LodRecordVector self, std::vector< PolyVox::LodRecord >::difference_type i, std::vector< PolyVox::LodRecord >::difference_type j)"""
        return _PolyVoxCore.LodRecordVector___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(LodRecordVector self, std::vector< PolyVox::LodRecord >::difference_type i)
        __delitem__(LodRecordVector self, PySliceObject * slice)
        """
        return _PolyVoxCore.LodRecordVector___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< PolyVox::LodRecord >::value_type const &":
        """
        __getitem__(LodRecordVector self, PySliceObject * slice) -> LodRecordVector
        __getitem__(LodRecordVector self, std::vector< PolyVox::LodRecord >::difference_type i) -> LodRecord
        """
        return _PolyVoxCore.LodRecordVector___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(LodRecordVector self, PySliceObject * slice, LodRecordVector v)
        __setitem__(LodRecordVector self, PySliceObject * slice)
        __setitem__(LodRecordVector self, std::vector< PolyVox::LodRecord >::difference_type i, LodRecord x)
        """
        return _PolyVoxCore.LodRecordVector___setitem__(self, *args)


    def pop(self) -> "std::vector< PolyVox::LodRecord >::value_type":
        """pop(LodRecordVector self) -> LodRecord"""
        return _PolyVoxCore.LodRecordVector_pop(self)


    def append(self, x: 'LodRecord') -> "void":
        """append(LodRecordVector self, LodRecord x)"""
        return _PolyVoxCore.LodRecordVector_append(self, x)


    def empty(self) -> "bool":
        """empty(LodRecordVector self) -> bool"""
        return _PolyVoxCore.LodRecordVector_empty(self)


    def size(self) -> "std::vector< PolyVox::LodRecord >::size_type":
        """size(LodRecordVector self) -> std::vector< PolyVox::LodRecord >::size_type"""
        return _PolyVoxCore.LodRecordVector_size(self)


    def swap(self, v: 'LodRecordVector') -> "void":
        """swap(LodRecordVector self, LodRecordVector v)"""
        return _PolyVoxCore.LodRecordVector_swap(self, v)


    def begin(self) -> "std::vector< PolyVox::LodRecord >::iterator":
        """begin(LodRecordVector self) -> std::vector< PolyVox::LodRecord >::iterator"""
        return _PolyVoxCore.LodRecordVector_begin(self)


    def end(self) -> "std::vector< PolyVox::LodRecord >::iterator":
        """end(LodRecordVector self) -> std::vector< PolyVox::LodRecord >::iterator"""
        return _PolyVoxCore.LodRecordVector_end(self)


    def rbegin(self) -> "std::vector< PolyVox::LodRecord >::reverse_iterator":
        """rbegin(LodRecordVector self) -> std::vector< PolyVox::LodRecord >::reverse_iterator"""
        return _PolyVoxCore.LodRecordVector_rbegin(self)


    def rend(self) -> "std::vector< PolyVox::LodRecord >::reverse_iterator":
        """rend(LodRecordVector self) -> std::vector< PolyVox::LodRecord >::reverse_iterator"""
        return _PolyVoxCore.LodRecordVector_rend(self)


    def clear(self) -> "void":
        """clear(LodRecordVector self)"""
        return _PolyVoxCore.LodRecordVector_clear(self)


    def get_allocator(self) -> "std::vector< PolyVox::LodRecord >::allocator_type":
        """get_allocator(LodRecordVector self) -> std::vector< PolyVox::LodRecord >::allocator_type"""
        return _PolyVoxCore.LodRecordVector_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(LodRecordVector self)"""
        return _PolyVoxCore.LodRecordVector_pop_back(self)


    def erase(self, *args) -> "std::vector< PolyVox::LodRecord >::iterator":
        """
        erase(LodRecordVector self, std::vector< PolyVox::LodRecord >::iterator pos) -> std::vector< PolyVox::LodRecord >::iterator
        erase(LodRecordVector self, std::vector< PolyVox::LodRecord >::iterator first, std::vector< PolyVox::LodRecord >::iterator last) -> std::vector< PolyVox::LodRecord >::iterator
        """
        return _PolyVoxCore.LodRecordVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(PolyVox::LodRecord)> self) -> LodRecordVector
        __init__(std::vector<(PolyVox::LodRecord)> self, LodRecordVector arg2) -> LodRecordVector
        __init__(std::vector<(PolyVox::LodRecord)> self, std::vector< PolyVox::LodRecord >::size_type size) -> LodRecordVector
        __init__(std::vector<(PolyVox::LodRecord)> self, std::vector< PolyVox::LodRecord >::size_type size, LodRecord value) -> LodRecordVector
        """
        this = _PolyVoxCore.new_LodRecordVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x: 'LodRecord') -> "void":
        """push_back(LodRecordVector self, LodRecord x)"""
        return _PolyVoxCore.LodRecordVector_push_back(self, x)


    def front(self) -> "std::vector< PolyVox::LodRecord >::value_type const &":
        """front(LodRecordVector self) -> LodRecord"""
        return _PolyVoxCore.LodRecordVector_front(self)


    def back(self) -> "std::vector< PolyVox::LodRecord >::value_type const &":
        """back(LodRecordVector self) -> LodRecord"""
        return _PolyVoxCore.LodRecordVector_back(self)


    def assign(self, n: 'std::vector< PolyVox::LodRecord >::size_type', x: 'LodRecord') -> "void":
        """assign(LodRecordVector self, std::vector< PolyVox::LodRecord >::size_type n, LodRecord x)"""
        return _PolyVoxCore.LodRecordVector_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(LodRecordVector self, std::vector< PolyVox::LodRecord >::size_type new_size)
        resize(LodRecordVector self, std::vector< PolyVox::LodRecord >::size_type new_size, LodRecord x)
        """
        return _PolyVoxCore.LodRecordVector_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(LodRecordVector self, std::vector< PolyVox::LodRecord >::iterator pos, LodRecord x) -> std::vector< PolyVox::LodRecord >::iterator
        insert(LodRecordVector self, std::vector< PolyVox::LodRecord >::iterator pos, std::vector< PolyVox::LodRecord >::size_type n, LodRecord x)
        """
        return _PolyVoxCore.LodRecordVector_insert(self, *args)


    def reserve(self, n: 'std::vector< PolyVox::LodRecord >::size_type') -> "void":
        """reserve(LodRecordVector self, std::vector< PolyVox::LodRecord >::size_type n)"""
        return _PolyVoxCore.LodRecordVector_reserve(self, n)


    def capacity(self) -> "std::vector< PolyVox::LodRecord >::size_type":
        """capacity(LodRecordVector self) -> std::vector< PolyVox::LodRecord >::size_type"""
        return _PolyVoxCore.LodRecordVector_capacity(self)

    __swig_destroy__ = _PolyVoxCore.delete_LodRecordVector
    __del__ = lambda self: None
LodRecordVector_swigregister = _PolyVoxCore.LodRecordVector_swigregister
LodRecordVector_swigregister(LodRecordVector)

class uint8Vector(_object):
    """Proxy of C++ std::vector<(uint8_t)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uint8Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uint8Vector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(uint8Vector self) -> SwigPyIterator"""
        return _PolyVoxCore.uint8Vector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(uint8Vector self) -> bool"""
        return _PolyVoxCore.uint8Vector___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(uint8Vector self) -> bool"""
        return _PolyVoxCore.uint8Vector___bool__(self)


    def __len__(self) -> "std::vector< unsigned char >::size_type":
        """__len__(uint8Vector self) -> std::vector< unsigned char >::size_type"""
        return _PolyVoxCore.uint8Vector___len__(self)


    def __getslice__(self, i: 'std::vector< unsigned char >::difference_type', j: 'std::vector< unsigned char >::difference_type') -> "std::vector< unsigned char,std::allocator< unsigned char > > *":
        """__getslice__(uint8Vector self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::difference_type j) -> uint8Vector"""
        return _PolyVoxCore.uint8Vector___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(uint8Vector self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::difference_type j)
        __setslice__(uint8Vector self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::difference_type j, uint8Vector v)
        """
        return _PolyVoxCore.uint8Vector___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< unsigned char >::difference_type', j: 'std::vector< unsigned char >::difference_type') -> "void":
        """__delslice__(uint8Vector self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::difference_type j)"""
        return _PolyVoxCore.uint8Vector___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(uint8Vector self, std::vector< unsigned char >::difference_type i)
        __delitem__(uint8Vector self, PySliceObject * slice)
        """
        return _PolyVoxCore.uint8Vector___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< unsigned char >::value_type const &":
        """
        __getitem__(uint8Vector self, PySliceObject * slice) -> uint8Vector
        __getitem__(uint8Vector self, std::vector< unsigned char >::difference_type i) -> std::vector< unsigned char >::value_type const &
        """
        return _PolyVoxCore.uint8Vector___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(uint8Vector self, PySliceObject * slice, uint8Vector v)
        __setitem__(uint8Vector self, PySliceObject * slice)
        __setitem__(uint8Vector self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::value_type const & x)
        """
        return _PolyVoxCore.uint8Vector___setitem__(self, *args)


    def pop(self) -> "std::vector< unsigned char >::value_type":
        """pop(uint8Vector self) -> std::vector< unsigned char >::value_type"""
        return _PolyVoxCore.uint8Vector_pop(self)


    def append(self, x: 'std::vector< unsigned char >::value_type const &') -> "void":
        """append(uint8Vector self, std::vector< unsigned char >::value_type const & x)"""
        return _PolyVoxCore.uint8Vector_append(self, x)


    def empty(self) -> "bool":
        """empty(uint8Vector self) -> bool"""
        return _PolyVoxCore.uint8Vector_empty(self)


    def size(self) -> "std::vector< unsigned char >::size_type":
        """size(uint8Vector self) -> std::vector< unsigned char >::size_type"""
        return _PolyVoxCore.uint8Vector_size(self)


    def swap(self, v: 'uint8Vector') -> "void":
        """swap(uint8Vector self, uint8Vector v)"""
        return _PolyVoxCore.uint8Vector_swap(self, v)


    def begin(self) -> "std::vector< unsigned char >::iterator":
        """begin(uint8Vector self) -> std::vector< unsigned char >::iterator"""
        return _PolyVoxCore.uint8Vector_begin(self)


    def end(self) -> "std::vector< unsigned char >::iterator":
        """end(uint8Vector self) -> std::vector< unsigned char >::iterator"""
        return _PolyVoxCore.uint8Vector_end(self)


    def rbegin(self) -> "std::vector< unsigned char >::reverse_iterator":
        """rbegin(uint8Vector self) -> std::vector< unsigned char >::reverse_iterator"""
        return _PolyVoxCore.uint8Vector_rbegin(self)


    def rend(self) -> "std::vector< unsigned char >::reverse_iterator":
        """rend(uint8Vector self) -> std::vector< unsigned char >::reverse_iterator"""
        return _PolyVoxCore.uint8Vector_rend(self)


    def clear(self) -> "void":
        """clear(uint8Vector self)"""
        return _PolyVoxCore.uint8Vector_clear(self)


    def get_allocator(self) -> "std::vector< unsigned char >::allocator_type":
        """get_allocator(uint8Vector self) -> std::vector< unsigned char >::allocator_type"""
        return _PolyVoxCore.uint8Vector_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(uint8Vector self)"""
        return _PolyVoxCore.uint8Vector_pop_back(self)


    def erase(self, *args) -> "std::vector< unsigned char >::iterator":
        """
        erase(uint8Vector self, std::vector< unsigned char >::iterator pos) -> std::vector< unsigned char >::iterator
        erase(uint8Vector self, std::vector< unsigned char >::iterator first, std::vector< unsigned char >::iterator last) -> std::vector< unsigned char >::iterator
        """
        return _PolyVoxCore.uint8Vector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(uint8_t)> self) -> uint8Vector
        __init__(std::vector<(uint8_t)> self, uint8Vector arg2) -> uint8Vector
        __init__(std::vector<(uint8_t)> self, std::vector< unsigned char >::size_type size) -> uint8Vector
        __init__(std::vector<(uint8_t)> self, std::vector< unsigned char >::size_type size, std::vector< unsigned char >::value_type const & value) -> uint8Vector
        """
        this = _PolyVoxCore.new_uint8Vector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x: 'std::vector< unsigned char >::value_type const &') -> "void":
        """push_back(uint8Vector self, std::vector< unsigned char >::value_type const & x)"""
        return _PolyVoxCore.uint8Vector_push_back(self, x)


    def front(self) -> "std::vector< unsigned char >::value_type const &":
        """front(uint8Vector self) -> std::vector< unsigned char >::value_type const &"""
        return _PolyVoxCore.uint8Vector_front(self)


    def back(self) -> "std::vector< unsigned char >::value_type const &":
        """back(uint8Vector self) -> std::vector< unsigned char >::value_type const &"""
        return _PolyVoxCore.uint8Vector_back(self)


    def assign(self, n: 'std::vector< unsigned char >::size_type', x: 'std::vector< unsigned char >::value_type const &') -> "void":
        """assign(uint8Vector self, std::vector< unsigned char >::size_type n, std::vector< unsigned char >::value_type const & x)"""
        return _PolyVoxCore.uint8Vector_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(uint8Vector self, std::vector< unsigned char >::size_type new_size)
        resize(uint8Vector self, std::vector< unsigned char >::size_type new_size, std::vector< unsigned char >::value_type const & x)
        """
        return _PolyVoxCore.uint8Vector_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(uint8Vector self, std::vector< unsigned char >::iterator pos, std::vector< unsigned char >::value_type const & x) -> std::vector< unsigned char >::iterator
        insert(uint8Vector self, std::vector< unsigned char >::iterator pos, std::vector< unsigned char >::size_type n, std::vector< unsigned char >::value_type const & x)
        """
        return _PolyVoxCore.uint8Vector_insert(self, *args)


    def reserve(self, n: 'std::vector< unsigned char >::size_type') -> "void":
        """reserve(uint8Vector self, std::vector< unsigned char >::size_type n)"""
        return _PolyVoxCore.uint8Vector_reserve(self, n)


    def capacity(self) -> "std::vector< unsigned char >::size_type":
        """capacity(uint8Vector self) -> std::vector< unsigned char >::size_type"""
        return _PolyVoxCore.uint8Vector_capacity(self)

    __swig_destroy__ = _PolyVoxCore.delete_uint8Vector
    __del__ = lambda self: None
uint8Vector_swigregister = _PolyVoxCore.uint8Vector_swigregister
uint8Vector_swigregister(uint8Vector)

class uint32Vector(_object):
    """Proxy of C++ std::vector<(uint32_t)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uint32Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uint32Vector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(uint32Vector self) -> SwigPyIterator"""
        return _PolyVoxCore.uint32Vector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(uint32Vector self) -> bool"""
        return _PolyVoxCore.uint32Vector___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(uint32Vector self) -> bool"""
        return _PolyVoxCore.uint32Vector___bool__(self)


    def __len__(self) -> "std::vector< unsigned int >::size_type":
        """__len__(uint32Vector self) -> std::vector< unsigned int >::size_type"""
        return _PolyVoxCore.uint32Vector___len__(self)


    def __getslice__(self, i: 'std::vector< unsigned int >::difference_type', j: 'std::vector< unsigned int >::difference_type') -> "std::vector< unsigned int,std::allocator< unsigned int > > *":
        """__getslice__(uint32Vector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j) -> uint32Vector"""
        return _PolyVoxCore.uint32Vector___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(uint32Vector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j)
        __setslice__(uint32Vector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j, uint32Vector v)
        """
        return _PolyVoxCore.uint32Vector___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< unsigned int >::difference_type', j: 'std::vector< unsigned int >::difference_type') -> "void":
        """__delslice__(uint32Vector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j)"""
        return _PolyVoxCore.uint32Vector___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(uint32Vector self, std::vector< unsigned int >::difference_type i)
        __delitem__(uint32Vector self, PySliceObject * slice)
        """
        return _PolyVoxCore.uint32Vector___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< unsigned int >::value_type const &":
        """
        __getitem__(uint32Vector self, PySliceObject * slice) -> uint32Vector
        __getitem__(uint32Vector self, std::vector< unsigned int >::difference_type i) -> std::vector< unsigned int >::value_type const &
        """
        return _PolyVoxCore.uint32Vector___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(uint32Vector self, PySliceObject * slice, uint32Vector v)
        __setitem__(uint32Vector self, PySliceObject * slice)
        __setitem__(uint32Vector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::value_type const & x)
        """
        return _PolyVoxCore.uint32Vector___setitem__(self, *args)


    def pop(self) -> "std::vector< unsigned int >::value_type":
        """pop(uint32Vector self) -> std::vector< unsigned int >::value_type"""
        return _PolyVoxCore.uint32Vector_pop(self)


    def append(self, x: 'std::vector< unsigned int >::value_type const &') -> "void":
        """append(uint32Vector self, std::vector< unsigned int >::value_type const & x)"""
        return _PolyVoxCore.uint32Vector_append(self, x)


    def empty(self) -> "bool":
        """empty(uint32Vector self) -> bool"""
        return _PolyVoxCore.uint32Vector_empty(self)


    def size(self) -> "std::vector< unsigned int >::size_type":
        """size(uint32Vector self) -> std::vector< unsigned int >::size_type"""
        return _PolyVoxCore.uint32Vector_size(self)


    def swap(self, v: 'uint32Vector') -> "void":
        """swap(uint32Vector self, uint32Vector v)"""
        return _PolyVoxCore.uint32Vector_swap(self, v)


    def begin(self) -> "std::vector< unsigned int >::iterator":
        """begin(uint32Vector self) -> std::vector< unsigned int >::iterator"""
        return _PolyVoxCore.uint32Vector_begin(self)


    def end(self) -> "std::vector< unsigned int >::iterator":
        """end(uint32Vector self) -> std::vector< unsigned int >::iterator"""
        return _PolyVoxCore.uint32Vector_end(self)


    def rbegin(self) -> "std::vector< unsigned int >::reverse_iterator":
        """rbegin(uint32Vector self) -> std::vector< unsigned int >::reverse_iterator"""
        return _PolyVoxCore.uint32Vector_rbegin(self)


    def rend(self) -> "std::vector< unsigned int >::reverse_iterator":
        """rend(uint32Vector self) -> std::vector< unsigned int >::reverse_iterator"""
        return _PolyVoxCore.uint32Vector_rend(self)


    def clear(self) -> "void":
        """clear(uint32Vector self)"""
        return _PolyVoxCore.uint32Vector_clear(self)


    def get_allocator(self) -> "std::vector< unsigned int >::allocator_type":
        """get_allocator(uint32Vector self) -> std::vector< unsigned int >::allocator_type"""
        return _PolyVoxCore.uint32Vector_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(uint32Vector self)"""
        return _PolyVoxCore.uint32Vector_pop_back(self)


    def erase(self, *args) -> "std::vector< unsigned int >::iterator":
        """
        erase(uint32Vector self, std::vector< unsigned int >::iterator pos) -> std::vector< unsigned int >::iterator
        erase(uint32Vector self, std::vector< unsigned int >::iterator first, std::vector< unsigned int >::iterator last) -> std::vector< unsigned int >::iterator
        """
        return _PolyVoxCore.uint32Vector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(uint32_t)> self) -> uint32Vector
        __init__(std::vector<(uint32_t)> self, uint32Vector arg2) -> uint32Vector
        __init__(std::vector<(uint32_t)> self, std::vector< unsigned int >::size_type size) -> uint32Vector
        __init__(std::vector<(uint32_t)> self, std::vector< unsigned int >::size_type size, std::vector< unsigned int >::value_type const & value) -> uint32Vector
        """
        this = _PolyVoxCore.new_uint32Vector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x: 'std::vector< unsigned int >::value_type const &') -> "void":
        """push_back(uint32Vector self, std::vector< unsigned int >::value_type const & x)"""
        return _PolyVoxCore.uint32Vector_push_back(self, x)


    def front(self) -> "std::vector< unsigned int >::value_type const &":
        """front(uint32Vector self) -> std::vector< unsigned int >::value_type const &"""
        return _PolyVoxCore.uint32Vector_front(self)


    def back(self) -> "std::vector< unsigned int >::value_type const &":
        """back(uint32Vector self) -> std::vector< unsigned int >::value_type const &"""
        return _PolyVoxCore.uint32Vector_back(self)


    def assign(self, n: 'std::vector< unsigned int >::size_type', x: 'std::vector< unsigned int >::value_type const &') -> "void":
        """assign(uint32Vector self, std::vector< unsigned int >::size_type n, std::vector< unsigned int >::value_type const & x)"""
        return _PolyVoxCore.uint32Vector_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(uint32Vector self, std::vector< unsigned int >::size_type new_size)
        resize(uint32Vector self, std::vector< unsigned int >::size_type new_size, std::vector< unsigned int >::value_type const & x)
        """
        return _PolyVoxCore.uint32Vector_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(uint32Vector self, std::vector< unsigned int >::iterator pos, std::vector< unsigned int >::value_type const & x) -> std::vector< unsigned int >::iterator
        insert(uint32Vector self, std::vector< unsigned int >::iterator pos, std::vector< unsigned int >::size_type n, std::vector< unsigned int >::value_type const & x)
        """
        return _PolyVoxCore.uint32Vector_insert(self, *args)


    def reserve(self, n: 'std::vector< unsigned int >::size_type') -> "void":
        """reserve(uint32Vector self, std::vector< unsigned int >::size_type n)"""
        return _PolyVoxCore.uint32Vector_reserve(self, n)


    def capacity(self) -> "std::vector< unsigned int >::size_type":
        """capacity(uint32Vector self) -> std::vector< unsigned int >::size_type"""
        return _PolyVoxCore.uint32Vector_capacity(self)

    __swig_destroy__ = _PolyVoxCore.delete_uint32Vector
    __del__ = lambda self: None
uint32Vector_swigregister = _PolyVoxCore.uint32Vector_swigregister
uint32Vector_swigregister(uint32Vector)

class SurfaceMeshPositionMaterial(_object):
    """Proxy of C++ PolyVox::SurfaceMesh<(PolyVox::PositionMaterial)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SurfaceMeshPositionMaterial, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SurfaceMeshPositionMaterial, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(PolyVox::SurfaceMesh<(PolyVox::PositionMaterial)> self) -> SurfaceMeshPositionMaterial"""
        this = _PolyVoxCore.new_SurfaceMeshPositionMaterial()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _PolyVoxCore.delete_SurfaceMeshPositionMaterial
    __del__ = lambda self: None

    def getIndices(self) -> "std::vector< uint32_t,std::allocator< uint32_t > > const &":
        """getIndices(SurfaceMeshPositionMaterial self) -> uint32Vector"""
        return _PolyVoxCore.SurfaceMeshPositionMaterial_getIndices(self)


    def getNoOfIndices(self) -> "uint32_t":
        """getNoOfIndices(SurfaceMeshPositionMaterial self) -> uint32_t"""
        return _PolyVoxCore.SurfaceMeshPositionMaterial_getNoOfIndices(self)


    def getNoOfNonUniformTrianges(self) -> "uint32_t":
        """getNoOfNonUniformTrianges(SurfaceMeshPositionMaterial self) -> uint32_t"""
        return _PolyVoxCore.SurfaceMeshPositionMaterial_getNoOfNonUniformTrianges(self)


    def getNoOfUniformTrianges(self) -> "uint32_t":
        """getNoOfUniformTrianges(SurfaceMeshPositionMaterial self) -> uint32_t"""
        return _PolyVoxCore.SurfaceMeshPositionMaterial_getNoOfUniformTrianges(self)


    def getNoOfVertices(self) -> "uint32_t":
        """getNoOfVertices(SurfaceMeshPositionMaterial self) -> uint32_t"""
        return _PolyVoxCore.SurfaceMeshPositionMaterial_getNoOfVertices(self)


    def getRawVertexData(self) -> "std::vector< PolyVox::PositionMaterial,std::allocator< PolyVox::PositionMaterial > > &":
        """getRawVertexData(SurfaceMeshPositionMaterial self) -> PositionMaterialVector"""
        return _PolyVoxCore.SurfaceMeshPositionMaterial_getRawVertexData(self)


    def getVertices(self) -> "std::vector< PolyVox::PositionMaterial,std::allocator< PolyVox::PositionMaterial > > const &":
        """getVertices(SurfaceMeshPositionMaterial self) -> PositionMaterialVector"""
        return _PolyVoxCore.SurfaceMeshPositionMaterial_getVertices(self)


    def addTriangle(self, index0: 'uint32_t', index1: 'uint32_t', index2: 'uint32_t') -> "void":
        """addTriangle(SurfaceMeshPositionMaterial self, uint32_t index0, uint32_t index1, uint32_t index2)"""
        return _PolyVoxCore.SurfaceMeshPositionMaterial_addTriangle(self, index0, index1, index2)


    def addTriangleCubic(self, index0: 'uint32_t', index1: 'uint32_t', index2: 'uint32_t') -> "void":
        """addTriangleCubic(SurfaceMeshPositionMaterial self, uint32_t index0, uint32_t index1, uint32_t index2)"""
        return _PolyVoxCore.SurfaceMeshPositionMaterial_addTriangleCubic(self, index0, index1, index2)


    def addVertex(self, vertex: 'PositionMaterial') -> "uint32_t":
        """addVertex(SurfaceMeshPositionMaterial self, PositionMaterial vertex) -> uint32_t"""
        return _PolyVoxCore.SurfaceMeshPositionMaterial_addVertex(self, vertex)


    def clear(self) -> "void":
        """clear(SurfaceMeshPositionMaterial self)"""
        return _PolyVoxCore.SurfaceMeshPositionMaterial_clear(self)


    def isEmpty(self) -> "bool":
        """isEmpty(SurfaceMeshPositionMaterial self) -> bool"""
        return _PolyVoxCore.SurfaceMeshPositionMaterial_isEmpty(self)


    def scaleVertices(self, amount: 'float') -> "void":
        """scaleVertices(SurfaceMeshPositionMaterial self, float amount)"""
        return _PolyVoxCore.SurfaceMeshPositionMaterial_scaleVertices(self, amount)


    def translateVertices(self, amount: 'Vector3Dfloat') -> "void":
        """translateVertices(SurfaceMeshPositionMaterial self, Vector3Dfloat amount)"""
        return _PolyVoxCore.SurfaceMeshPositionMaterial_translateVertices(self, amount)


    def noOfDegenerateTris(self) -> "int":
        """noOfDegenerateTris(SurfaceMeshPositionMaterial self) -> int"""
        return _PolyVoxCore.SurfaceMeshPositionMaterial_noOfDegenerateTris(self)


    def removeDegenerateTris(self) -> "void":
        """removeDegenerateTris(SurfaceMeshPositionMaterial self)"""
        return _PolyVoxCore.SurfaceMeshPositionMaterial_removeDegenerateTris(self)


    def removeUnusedVertices(self) -> "void":
        """removeUnusedVertices(SurfaceMeshPositionMaterial self)"""
        return _PolyVoxCore.SurfaceMeshPositionMaterial_removeUnusedVertices(self)

    __swig_setmethods__["m_Region"] = _PolyVoxCore.SurfaceMeshPositionMaterial_m_Region_set
    __swig_getmethods__["m_Region"] = _PolyVoxCore.SurfaceMeshPositionMaterial_m_Region_get
    if _newclass:
        m_Region = _swig_property(_PolyVoxCore.SurfaceMeshPositionMaterial_m_Region_get, _PolyVoxCore.SurfaceMeshPositionMaterial_m_Region_set)
    __swig_setmethods__["m_iTimeStamp"] = _PolyVoxCore.SurfaceMeshPositionMaterial_m_iTimeStamp_set
    __swig_getmethods__["m_iTimeStamp"] = _PolyVoxCore.SurfaceMeshPositionMaterial_m_iTimeStamp_get
    if _newclass:
        m_iTimeStamp = _swig_property(_PolyVoxCore.SurfaceMeshPositionMaterial_m_iTimeStamp_get, _PolyVoxCore.SurfaceMeshPositionMaterial_m_iTimeStamp_set)
    __swig_setmethods__["m_iNoOfLod0Tris"] = _PolyVoxCore.SurfaceMeshPositionMaterial_m_iNoOfLod0Tris_set
    __swig_getmethods__["m_iNoOfLod0Tris"] = _PolyVoxCore.SurfaceMeshPositionMaterial_m_iNoOfLod0Tris_get
    if _newclass:
        m_iNoOfLod0Tris = _swig_property(_PolyVoxCore.SurfaceMeshPositionMaterial_m_iNoOfLod0Tris_get, _PolyVoxCore.SurfaceMeshPositionMaterial_m_iNoOfLod0Tris_set)
    __swig_setmethods__["m_vecTriangleIndices"] = _PolyVoxCore.SurfaceMeshPositionMaterial_m_vecTriangleIndices_set
    __swig_getmethods__["m_vecTriangleIndices"] = _PolyVoxCore.SurfaceMeshPositionMaterial_m_vecTriangleIndices_get
    if _newclass:
        m_vecTriangleIndices = _swig_property(_PolyVoxCore.SurfaceMeshPositionMaterial_m_vecTriangleIndices_get, _PolyVoxCore.SurfaceMeshPositionMaterial_m_vecTriangleIndices_set)
    __swig_setmethods__["m_vecVertices"] = _PolyVoxCore.SurfaceMeshPositionMaterial_m_vecVertices_set
    __swig_getmethods__["m_vecVertices"] = _PolyVoxCore.SurfaceMeshPositionMaterial_m_vecVertices_get
    if _newclass:
        m_vecVertices = _swig_property(_PolyVoxCore.SurfaceMeshPositionMaterial_m_vecVertices_get, _PolyVoxCore.SurfaceMeshPositionMaterial_m_vecVertices_set)
    __swig_setmethods__["m_vecLodRecords"] = _PolyVoxCore.SurfaceMeshPositionMaterial_m_vecLodRecords_set
    __swig_getmethods__["m_vecLodRecords"] = _PolyVoxCore.SurfaceMeshPositionMaterial_m_vecLodRecords_get
    if _newclass:
        m_vecLodRecords = _swig_property(_PolyVoxCore.SurfaceMeshPositionMaterial_m_vecLodRecords_get, _PolyVoxCore.SurfaceMeshPositionMaterial_m_vecLodRecords_set)
SurfaceMeshPositionMaterial_swigregister = _PolyVoxCore.SurfaceMeshPositionMaterial_swigregister
SurfaceMeshPositionMaterial_swigregister(SurfaceMeshPositionMaterial)

class SurfaceMeshPositionMaterialNormal(_object):
    """Proxy of C++ PolyVox::SurfaceMesh<(PolyVox::PositionMaterialNormal)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SurfaceMeshPositionMaterialNormal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SurfaceMeshPositionMaterialNormal, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(PolyVox::SurfaceMesh<(PolyVox::PositionMaterialNormal)> self) -> SurfaceMeshPositionMaterialNormal"""
        this = _PolyVoxCore.new_SurfaceMeshPositionMaterialNormal()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _PolyVoxCore.delete_SurfaceMeshPositionMaterialNormal
    __del__ = lambda self: None

    def getIndices(self) -> "std::vector< uint32_t,std::allocator< uint32_t > > const &":
        """getIndices(SurfaceMeshPositionMaterialNormal self) -> uint32Vector"""
        return _PolyVoxCore.SurfaceMeshPositionMaterialNormal_getIndices(self)


    def getNoOfIndices(self) -> "uint32_t":
        """getNoOfIndices(SurfaceMeshPositionMaterialNormal self) -> uint32_t"""
        return _PolyVoxCore.SurfaceMeshPositionMaterialNormal_getNoOfIndices(self)


    def getNoOfNonUniformTrianges(self) -> "uint32_t":
        """getNoOfNonUniformTrianges(SurfaceMeshPositionMaterialNormal self) -> uint32_t"""
        return _PolyVoxCore.SurfaceMeshPositionMaterialNormal_getNoOfNonUniformTrianges(self)


    def getNoOfUniformTrianges(self) -> "uint32_t":
        """getNoOfUniformTrianges(SurfaceMeshPositionMaterialNormal self) -> uint32_t"""
        return _PolyVoxCore.SurfaceMeshPositionMaterialNormal_getNoOfUniformTrianges(self)


    def getNoOfVertices(self) -> "uint32_t":
        """getNoOfVertices(SurfaceMeshPositionMaterialNormal self) -> uint32_t"""
        return _PolyVoxCore.SurfaceMeshPositionMaterialNormal_getNoOfVertices(self)


    def getRawVertexData(self) -> "std::vector< PolyVox::PositionMaterialNormal,std::allocator< PolyVox::PositionMaterialNormal > > &":
        """getRawVertexData(SurfaceMeshPositionMaterialNormal self) -> PositionMaterialNormalVector"""
        return _PolyVoxCore.SurfaceMeshPositionMaterialNormal_getRawVertexData(self)


    def getVertices(self) -> "std::vector< PolyVox::PositionMaterialNormal,std::allocator< PolyVox::PositionMaterialNormal > > const &":
        """getVertices(SurfaceMeshPositionMaterialNormal self) -> PositionMaterialNormalVector"""
        return _PolyVoxCore.SurfaceMeshPositionMaterialNormal_getVertices(self)


    def addTriangle(self, index0: 'uint32_t', index1: 'uint32_t', index2: 'uint32_t') -> "void":
        """addTriangle(SurfaceMeshPositionMaterialNormal self, uint32_t index0, uint32_t index1, uint32_t index2)"""
        return _PolyVoxCore.SurfaceMeshPositionMaterialNormal_addTriangle(self, index0, index1, index2)


    def addTriangleCubic(self, index0: 'uint32_t', index1: 'uint32_t', index2: 'uint32_t') -> "void":
        """addTriangleCubic(SurfaceMeshPositionMaterialNormal self, uint32_t index0, uint32_t index1, uint32_t index2)"""
        return _PolyVoxCore.SurfaceMeshPositionMaterialNormal_addTriangleCubic(self, index0, index1, index2)


    def addVertex(self, vertex: 'PositionMaterialNormal') -> "uint32_t":
        """addVertex(SurfaceMeshPositionMaterialNormal self, PositionMaterialNormal vertex) -> uint32_t"""
        return _PolyVoxCore.SurfaceMeshPositionMaterialNormal_addVertex(self, vertex)


    def clear(self) -> "void":
        """clear(SurfaceMeshPositionMaterialNormal self)"""
        return _PolyVoxCore.SurfaceMeshPositionMaterialNormal_clear(self)


    def isEmpty(self) -> "bool":
        """isEmpty(SurfaceMeshPositionMaterialNormal self) -> bool"""
        return _PolyVoxCore.SurfaceMeshPositionMaterialNormal_isEmpty(self)


    def scaleVertices(self, amount: 'float') -> "void":
        """scaleVertices(SurfaceMeshPositionMaterialNormal self, float amount)"""
        return _PolyVoxCore.SurfaceMeshPositionMaterialNormal_scaleVertices(self, amount)


    def translateVertices(self, amount: 'Vector3Dfloat') -> "void":
        """translateVertices(SurfaceMeshPositionMaterialNormal self, Vector3Dfloat amount)"""
        return _PolyVoxCore.SurfaceMeshPositionMaterialNormal_translateVertices(self, amount)


    def noOfDegenerateTris(self) -> "int":
        """noOfDegenerateTris(SurfaceMeshPositionMaterialNormal self) -> int"""
        return _PolyVoxCore.SurfaceMeshPositionMaterialNormal_noOfDegenerateTris(self)


    def removeDegenerateTris(self) -> "void":
        """removeDegenerateTris(SurfaceMeshPositionMaterialNormal self)"""
        return _PolyVoxCore.SurfaceMeshPositionMaterialNormal_removeDegenerateTris(self)


    def removeUnusedVertices(self) -> "void":
        """removeUnusedVertices(SurfaceMeshPositionMaterialNormal self)"""
        return _PolyVoxCore.SurfaceMeshPositionMaterialNormal_removeUnusedVertices(self)

    __swig_setmethods__["m_Region"] = _PolyVoxCore.SurfaceMeshPositionMaterialNormal_m_Region_set
    __swig_getmethods__["m_Region"] = _PolyVoxCore.SurfaceMeshPositionMaterialNormal_m_Region_get
    if _newclass:
        m_Region = _swig_property(_PolyVoxCore.SurfaceMeshPositionMaterialNormal_m_Region_get, _PolyVoxCore.SurfaceMeshPositionMaterialNormal_m_Region_set)
    __swig_setmethods__["m_iTimeStamp"] = _PolyVoxCore.SurfaceMeshPositionMaterialNormal_m_iTimeStamp_set
    __swig_getmethods__["m_iTimeStamp"] = _PolyVoxCore.SurfaceMeshPositionMaterialNormal_m_iTimeStamp_get
    if _newclass:
        m_iTimeStamp = _swig_property(_PolyVoxCore.SurfaceMeshPositionMaterialNormal_m_iTimeStamp_get, _PolyVoxCore.SurfaceMeshPositionMaterialNormal_m_iTimeStamp_set)
    __swig_setmethods__["m_iNoOfLod0Tris"] = _PolyVoxCore.SurfaceMeshPositionMaterialNormal_m_iNoOfLod0Tris_set
    __swig_getmethods__["m_iNoOfLod0Tris"] = _PolyVoxCore.SurfaceMeshPositionMaterialNormal_m_iNoOfLod0Tris_get
    if _newclass:
        m_iNoOfLod0Tris = _swig_property(_PolyVoxCore.SurfaceMeshPositionMaterialNormal_m_iNoOfLod0Tris_get, _PolyVoxCore.SurfaceMeshPositionMaterialNormal_m_iNoOfLod0Tris_set)
    __swig_setmethods__["m_vecTriangleIndices"] = _PolyVoxCore.SurfaceMeshPositionMaterialNormal_m_vecTriangleIndices_set
    __swig_getmethods__["m_vecTriangleIndices"] = _PolyVoxCore.SurfaceMeshPositionMaterialNormal_m_vecTriangleIndices_get
    if _newclass:
        m_vecTriangleIndices = _swig_property(_PolyVoxCore.SurfaceMeshPositionMaterialNormal_m_vecTriangleIndices_get, _PolyVoxCore.SurfaceMeshPositionMaterialNormal_m_vecTriangleIndices_set)
    __swig_setmethods__["m_vecVertices"] = _PolyVoxCore.SurfaceMeshPositionMaterialNormal_m_vecVertices_set
    __swig_getmethods__["m_vecVertices"] = _PolyVoxCore.SurfaceMeshPositionMaterialNormal_m_vecVertices_get
    if _newclass:
        m_vecVertices = _swig_property(_PolyVoxCore.SurfaceMeshPositionMaterialNormal_m_vecVertices_get, _PolyVoxCore.SurfaceMeshPositionMaterialNormal_m_vecVertices_set)
    __swig_setmethods__["m_vecLodRecords"] = _PolyVoxCore.SurfaceMeshPositionMaterialNormal_m_vecLodRecords_set
    __swig_getmethods__["m_vecLodRecords"] = _PolyVoxCore.SurfaceMeshPositionMaterialNormal_m_vecLodRecords_get
    if _newclass:
        m_vecLodRecords = _swig_property(_PolyVoxCore.SurfaceMeshPositionMaterialNormal_m_vecLodRecords_get, _PolyVoxCore.SurfaceMeshPositionMaterialNormal_m_vecLodRecords_set)
SurfaceMeshPositionMaterialNormal_swigregister = _PolyVoxCore.SurfaceMeshPositionMaterialNormal_swigregister
SurfaceMeshPositionMaterialNormal_swigregister(SurfaceMeshPositionMaterialNormal)

class MarchingCubesSurfaceExtractorSimpleVolumeint8(_object):
    """Proxy of C++ PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::SimpleVolume<(int8_t)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarchingCubesSurfaceExtractorSimpleVolumeint8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MarchingCubesSurfaceExtractorSimpleVolumeint8, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::SimpleVolume<(int8_t)>)> self, SimpleVolumeint8 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::SimpleVolume< int8_t >::VoxelType tBorderValue, PolyVox::DefaultMarchingCubesController< PolyVox::SimpleVolume< signed char >::VoxelType > controller) -> MarchingCubesSurfaceExtractorSimpleVolumeint8
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::SimpleVolume<(int8_t)>)> self, SimpleVolumeint8 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::SimpleVolume< int8_t >::VoxelType tBorderValue) -> MarchingCubesSurfaceExtractorSimpleVolumeint8
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::SimpleVolume<(int8_t)>)> self, SimpleVolumeint8 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode) -> MarchingCubesSurfaceExtractorSimpleVolumeint8
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::SimpleVolume<(int8_t)>)> self, SimpleVolumeint8 volData, Region region, SurfaceMeshPositionMaterialNormal result) -> MarchingCubesSurfaceExtractorSimpleVolumeint8
        """
        this = _PolyVoxCore.new_MarchingCubesSurfaceExtractorSimpleVolumeint8(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def execute(self) -> "void":
        """execute(MarchingCubesSurfaceExtractorSimpleVolumeint8 self)"""
        return _PolyVoxCore.MarchingCubesSurfaceExtractorSimpleVolumeint8_execute(self)

    __swig_destroy__ = _PolyVoxCore.delete_MarchingCubesSurfaceExtractorSimpleVolumeint8
    __del__ = lambda self: None
MarchingCubesSurfaceExtractorSimpleVolumeint8_swigregister = _PolyVoxCore.MarchingCubesSurfaceExtractorSimpleVolumeint8_swigregister
MarchingCubesSurfaceExtractorSimpleVolumeint8_swigregister(MarchingCubesSurfaceExtractorSimpleVolumeint8)

class MarchingCubesSurfaceExtractorSimpleVolumeint16(_object):
    """Proxy of C++ PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::SimpleVolume<(int16_t)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarchingCubesSurfaceExtractorSimpleVolumeint16, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MarchingCubesSurfaceExtractorSimpleVolumeint16, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::SimpleVolume<(int16_t)>)> self, SimpleVolumeint16 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::SimpleVolume< int16_t >::VoxelType tBorderValue, PolyVox::DefaultMarchingCubesController< PolyVox::SimpleVolume< short >::VoxelType > controller) -> MarchingCubesSurfaceExtractorSimpleVolumeint16
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::SimpleVolume<(int16_t)>)> self, SimpleVolumeint16 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::SimpleVolume< int16_t >::VoxelType tBorderValue) -> MarchingCubesSurfaceExtractorSimpleVolumeint16
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::SimpleVolume<(int16_t)>)> self, SimpleVolumeint16 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode) -> MarchingCubesSurfaceExtractorSimpleVolumeint16
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::SimpleVolume<(int16_t)>)> self, SimpleVolumeint16 volData, Region region, SurfaceMeshPositionMaterialNormal result) -> MarchingCubesSurfaceExtractorSimpleVolumeint16
        """
        this = _PolyVoxCore.new_MarchingCubesSurfaceExtractorSimpleVolumeint16(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def execute(self) -> "void":
        """execute(MarchingCubesSurfaceExtractorSimpleVolumeint16 self)"""
        return _PolyVoxCore.MarchingCubesSurfaceExtractorSimpleVolumeint16_execute(self)

    __swig_destroy__ = _PolyVoxCore.delete_MarchingCubesSurfaceExtractorSimpleVolumeint16
    __del__ = lambda self: None
MarchingCubesSurfaceExtractorSimpleVolumeint16_swigregister = _PolyVoxCore.MarchingCubesSurfaceExtractorSimpleVolumeint16_swigregister
MarchingCubesSurfaceExtractorSimpleVolumeint16_swigregister(MarchingCubesSurfaceExtractorSimpleVolumeint16)

class MarchingCubesSurfaceExtractorSimpleVolumeint32(_object):
    """Proxy of C++ PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::SimpleVolume<(int32_t)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarchingCubesSurfaceExtractorSimpleVolumeint32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MarchingCubesSurfaceExtractorSimpleVolumeint32, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::SimpleVolume<(int32_t)>)> self, SimpleVolumeint32 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::SimpleVolume< int32_t >::VoxelType tBorderValue, PolyVox::DefaultMarchingCubesController< PolyVox::SimpleVolume< int >::VoxelType > controller) -> MarchingCubesSurfaceExtractorSimpleVolumeint32
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::SimpleVolume<(int32_t)>)> self, SimpleVolumeint32 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::SimpleVolume< int32_t >::VoxelType tBorderValue) -> MarchingCubesSurfaceExtractorSimpleVolumeint32
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::SimpleVolume<(int32_t)>)> self, SimpleVolumeint32 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode) -> MarchingCubesSurfaceExtractorSimpleVolumeint32
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::SimpleVolume<(int32_t)>)> self, SimpleVolumeint32 volData, Region region, SurfaceMeshPositionMaterialNormal result) -> MarchingCubesSurfaceExtractorSimpleVolumeint32
        """
        this = _PolyVoxCore.new_MarchingCubesSurfaceExtractorSimpleVolumeint32(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def execute(self) -> "void":
        """execute(MarchingCubesSurfaceExtractorSimpleVolumeint32 self)"""
        return _PolyVoxCore.MarchingCubesSurfaceExtractorSimpleVolumeint32_execute(self)

    __swig_destroy__ = _PolyVoxCore.delete_MarchingCubesSurfaceExtractorSimpleVolumeint32
    __del__ = lambda self: None
MarchingCubesSurfaceExtractorSimpleVolumeint32_swigregister = _PolyVoxCore.MarchingCubesSurfaceExtractorSimpleVolumeint32_swigregister
MarchingCubesSurfaceExtractorSimpleVolumeint32_swigregister(MarchingCubesSurfaceExtractorSimpleVolumeint32)

class MarchingCubesSurfaceExtractorSimpleVolumeuint8(_object):
    """Proxy of C++ PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::SimpleVolume<(uint8_t)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarchingCubesSurfaceExtractorSimpleVolumeuint8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MarchingCubesSurfaceExtractorSimpleVolumeuint8, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::SimpleVolume<(uint8_t)>)> self, SimpleVolumeuint8 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::SimpleVolume< uint8_t >::VoxelType tBorderValue, PolyVox::DefaultMarchingCubesController< PolyVox::SimpleVolume< unsigned char >::VoxelType > controller) -> MarchingCubesSurfaceExtractorSimpleVolumeuint8
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::SimpleVolume<(uint8_t)>)> self, SimpleVolumeuint8 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::SimpleVolume< uint8_t >::VoxelType tBorderValue) -> MarchingCubesSurfaceExtractorSimpleVolumeuint8
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::SimpleVolume<(uint8_t)>)> self, SimpleVolumeuint8 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode) -> MarchingCubesSurfaceExtractorSimpleVolumeuint8
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::SimpleVolume<(uint8_t)>)> self, SimpleVolumeuint8 volData, Region region, SurfaceMeshPositionMaterialNormal result) -> MarchingCubesSurfaceExtractorSimpleVolumeuint8
        """
        this = _PolyVoxCore.new_MarchingCubesSurfaceExtractorSimpleVolumeuint8(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def execute(self) -> "void":
        """execute(MarchingCubesSurfaceExtractorSimpleVolumeuint8 self)"""
        return _PolyVoxCore.MarchingCubesSurfaceExtractorSimpleVolumeuint8_execute(self)

    __swig_destroy__ = _PolyVoxCore.delete_MarchingCubesSurfaceExtractorSimpleVolumeuint8
    __del__ = lambda self: None
MarchingCubesSurfaceExtractorSimpleVolumeuint8_swigregister = _PolyVoxCore.MarchingCubesSurfaceExtractorSimpleVolumeuint8_swigregister
MarchingCubesSurfaceExtractorSimpleVolumeuint8_swigregister(MarchingCubesSurfaceExtractorSimpleVolumeuint8)

class MarchingCubesSurfaceExtractorSimpleVolumeuint16(_object):
    """Proxy of C++ PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::SimpleVolume<(uint16_t)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarchingCubesSurfaceExtractorSimpleVolumeuint16, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MarchingCubesSurfaceExtractorSimpleVolumeuint16, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::SimpleVolume<(uint16_t)>)> self, SimpleVolumeuint16 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::SimpleVolume< uint16_t >::VoxelType tBorderValue, PolyVox::DefaultMarchingCubesController< PolyVox::SimpleVolume< unsigned short >::VoxelType > controller) -> MarchingCubesSurfaceExtractorSimpleVolumeuint16
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::SimpleVolume<(uint16_t)>)> self, SimpleVolumeuint16 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::SimpleVolume< uint16_t >::VoxelType tBorderValue) -> MarchingCubesSurfaceExtractorSimpleVolumeuint16
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::SimpleVolume<(uint16_t)>)> self, SimpleVolumeuint16 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode) -> MarchingCubesSurfaceExtractorSimpleVolumeuint16
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::SimpleVolume<(uint16_t)>)> self, SimpleVolumeuint16 volData, Region region, SurfaceMeshPositionMaterialNormal result) -> MarchingCubesSurfaceExtractorSimpleVolumeuint16
        """
        this = _PolyVoxCore.new_MarchingCubesSurfaceExtractorSimpleVolumeuint16(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def execute(self) -> "void":
        """execute(MarchingCubesSurfaceExtractorSimpleVolumeuint16 self)"""
        return _PolyVoxCore.MarchingCubesSurfaceExtractorSimpleVolumeuint16_execute(self)

    __swig_destroy__ = _PolyVoxCore.delete_MarchingCubesSurfaceExtractorSimpleVolumeuint16
    __del__ = lambda self: None
MarchingCubesSurfaceExtractorSimpleVolumeuint16_swigregister = _PolyVoxCore.MarchingCubesSurfaceExtractorSimpleVolumeuint16_swigregister
MarchingCubesSurfaceExtractorSimpleVolumeuint16_swigregister(MarchingCubesSurfaceExtractorSimpleVolumeuint16)

class MarchingCubesSurfaceExtractorSimpleVolumeuint32(_object):
    """Proxy of C++ PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::SimpleVolume<(uint32_t)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarchingCubesSurfaceExtractorSimpleVolumeuint32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MarchingCubesSurfaceExtractorSimpleVolumeuint32, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::SimpleVolume<(uint32_t)>)> self, SimpleVolumeuint32 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::SimpleVolume< uint32_t >::VoxelType tBorderValue, PolyVox::DefaultMarchingCubesController< PolyVox::SimpleVolume< unsigned int >::VoxelType > controller) -> MarchingCubesSurfaceExtractorSimpleVolumeuint32
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::SimpleVolume<(uint32_t)>)> self, SimpleVolumeuint32 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::SimpleVolume< uint32_t >::VoxelType tBorderValue) -> MarchingCubesSurfaceExtractorSimpleVolumeuint32
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::SimpleVolume<(uint32_t)>)> self, SimpleVolumeuint32 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode) -> MarchingCubesSurfaceExtractorSimpleVolumeuint32
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::SimpleVolume<(uint32_t)>)> self, SimpleVolumeuint32 volData, Region region, SurfaceMeshPositionMaterialNormal result) -> MarchingCubesSurfaceExtractorSimpleVolumeuint32
        """
        this = _PolyVoxCore.new_MarchingCubesSurfaceExtractorSimpleVolumeuint32(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def execute(self) -> "void":
        """execute(MarchingCubesSurfaceExtractorSimpleVolumeuint32 self)"""
        return _PolyVoxCore.MarchingCubesSurfaceExtractorSimpleVolumeuint32_execute(self)

    __swig_destroy__ = _PolyVoxCore.delete_MarchingCubesSurfaceExtractorSimpleVolumeuint32
    __del__ = lambda self: None
MarchingCubesSurfaceExtractorSimpleVolumeuint32_swigregister = _PolyVoxCore.MarchingCubesSurfaceExtractorSimpleVolumeuint32_swigregister
MarchingCubesSurfaceExtractorSimpleVolumeuint32_swigregister(MarchingCubesSurfaceExtractorSimpleVolumeuint32)

class MarchingCubesSurfaceExtractorSimpleVolumefloat(_object):
    """Proxy of C++ PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::SimpleVolume<(float)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarchingCubesSurfaceExtractorSimpleVolumefloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MarchingCubesSurfaceExtractorSimpleVolumefloat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::SimpleVolume<(float)>)> self, SimpleVolumefloat volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::SimpleVolume< float >::VoxelType tBorderValue, PolyVox::DefaultMarchingCubesController< float > controller) -> MarchingCubesSurfaceExtractorSimpleVolumefloat
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::SimpleVolume<(float)>)> self, SimpleVolumefloat volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::SimpleVolume< float >::VoxelType tBorderValue) -> MarchingCubesSurfaceExtractorSimpleVolumefloat
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::SimpleVolume<(float)>)> self, SimpleVolumefloat volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode) -> MarchingCubesSurfaceExtractorSimpleVolumefloat
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::SimpleVolume<(float)>)> self, SimpleVolumefloat volData, Region region, SurfaceMeshPositionMaterialNormal result) -> MarchingCubesSurfaceExtractorSimpleVolumefloat
        """
        this = _PolyVoxCore.new_MarchingCubesSurfaceExtractorSimpleVolumefloat(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def execute(self) -> "void":
        """execute(MarchingCubesSurfaceExtractorSimpleVolumefloat self)"""
        return _PolyVoxCore.MarchingCubesSurfaceExtractorSimpleVolumefloat_execute(self)

    __swig_destroy__ = _PolyVoxCore.delete_MarchingCubesSurfaceExtractorSimpleVolumefloat
    __del__ = lambda self: None
MarchingCubesSurfaceExtractorSimpleVolumefloat_swigregister = _PolyVoxCore.MarchingCubesSurfaceExtractorSimpleVolumefloat_swigregister
MarchingCubesSurfaceExtractorSimpleVolumefloat_swigregister(MarchingCubesSurfaceExtractorSimpleVolumefloat)

class MarchingCubesSurfaceExtractorRawVolumeint8(_object):
    """Proxy of C++ PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::RawVolume<(int8_t)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarchingCubesSurfaceExtractorRawVolumeint8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MarchingCubesSurfaceExtractorRawVolumeint8, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::RawVolume<(int8_t)>)> self, RawVolumeint8 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::RawVolume< int8_t >::VoxelType tBorderValue, PolyVox::DefaultMarchingCubesController< PolyVox::RawVolume< signed char >::VoxelType > controller) -> MarchingCubesSurfaceExtractorRawVolumeint8
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::RawVolume<(int8_t)>)> self, RawVolumeint8 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::RawVolume< int8_t >::VoxelType tBorderValue) -> MarchingCubesSurfaceExtractorRawVolumeint8
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::RawVolume<(int8_t)>)> self, RawVolumeint8 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode) -> MarchingCubesSurfaceExtractorRawVolumeint8
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::RawVolume<(int8_t)>)> self, RawVolumeint8 volData, Region region, SurfaceMeshPositionMaterialNormal result) -> MarchingCubesSurfaceExtractorRawVolumeint8
        """
        this = _PolyVoxCore.new_MarchingCubesSurfaceExtractorRawVolumeint8(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def execute(self) -> "void":
        """execute(MarchingCubesSurfaceExtractorRawVolumeint8 self)"""
        return _PolyVoxCore.MarchingCubesSurfaceExtractorRawVolumeint8_execute(self)

    __swig_destroy__ = _PolyVoxCore.delete_MarchingCubesSurfaceExtractorRawVolumeint8
    __del__ = lambda self: None
MarchingCubesSurfaceExtractorRawVolumeint8_swigregister = _PolyVoxCore.MarchingCubesSurfaceExtractorRawVolumeint8_swigregister
MarchingCubesSurfaceExtractorRawVolumeint8_swigregister(MarchingCubesSurfaceExtractorRawVolumeint8)

class MarchingCubesSurfaceExtractorRawVolumeint16(_object):
    """Proxy of C++ PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::RawVolume<(int16_t)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarchingCubesSurfaceExtractorRawVolumeint16, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MarchingCubesSurfaceExtractorRawVolumeint16, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::RawVolume<(int16_t)>)> self, RawVolumeint16 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::RawVolume< int16_t >::VoxelType tBorderValue, PolyVox::DefaultMarchingCubesController< PolyVox::RawVolume< short >::VoxelType > controller) -> MarchingCubesSurfaceExtractorRawVolumeint16
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::RawVolume<(int16_t)>)> self, RawVolumeint16 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::RawVolume< int16_t >::VoxelType tBorderValue) -> MarchingCubesSurfaceExtractorRawVolumeint16
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::RawVolume<(int16_t)>)> self, RawVolumeint16 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode) -> MarchingCubesSurfaceExtractorRawVolumeint16
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::RawVolume<(int16_t)>)> self, RawVolumeint16 volData, Region region, SurfaceMeshPositionMaterialNormal result) -> MarchingCubesSurfaceExtractorRawVolumeint16
        """
        this = _PolyVoxCore.new_MarchingCubesSurfaceExtractorRawVolumeint16(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def execute(self) -> "void":
        """execute(MarchingCubesSurfaceExtractorRawVolumeint16 self)"""
        return _PolyVoxCore.MarchingCubesSurfaceExtractorRawVolumeint16_execute(self)

    __swig_destroy__ = _PolyVoxCore.delete_MarchingCubesSurfaceExtractorRawVolumeint16
    __del__ = lambda self: None
MarchingCubesSurfaceExtractorRawVolumeint16_swigregister = _PolyVoxCore.MarchingCubesSurfaceExtractorRawVolumeint16_swigregister
MarchingCubesSurfaceExtractorRawVolumeint16_swigregister(MarchingCubesSurfaceExtractorRawVolumeint16)

class MarchingCubesSurfaceExtractorRawVolumeint32(_object):
    """Proxy of C++ PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::RawVolume<(int32_t)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarchingCubesSurfaceExtractorRawVolumeint32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MarchingCubesSurfaceExtractorRawVolumeint32, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::RawVolume<(int32_t)>)> self, RawVolumeint32 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::RawVolume< int32_t >::VoxelType tBorderValue, PolyVox::DefaultMarchingCubesController< PolyVox::RawVolume< int >::VoxelType > controller) -> MarchingCubesSurfaceExtractorRawVolumeint32
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::RawVolume<(int32_t)>)> self, RawVolumeint32 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::RawVolume< int32_t >::VoxelType tBorderValue) -> MarchingCubesSurfaceExtractorRawVolumeint32
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::RawVolume<(int32_t)>)> self, RawVolumeint32 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode) -> MarchingCubesSurfaceExtractorRawVolumeint32
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::RawVolume<(int32_t)>)> self, RawVolumeint32 volData, Region region, SurfaceMeshPositionMaterialNormal result) -> MarchingCubesSurfaceExtractorRawVolumeint32
        """
        this = _PolyVoxCore.new_MarchingCubesSurfaceExtractorRawVolumeint32(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def execute(self) -> "void":
        """execute(MarchingCubesSurfaceExtractorRawVolumeint32 self)"""
        return _PolyVoxCore.MarchingCubesSurfaceExtractorRawVolumeint32_execute(self)

    __swig_destroy__ = _PolyVoxCore.delete_MarchingCubesSurfaceExtractorRawVolumeint32
    __del__ = lambda self: None
MarchingCubesSurfaceExtractorRawVolumeint32_swigregister = _PolyVoxCore.MarchingCubesSurfaceExtractorRawVolumeint32_swigregister
MarchingCubesSurfaceExtractorRawVolumeint32_swigregister(MarchingCubesSurfaceExtractorRawVolumeint32)

class MarchingCubesSurfaceExtractorRawVolumeuint8(_object):
    """Proxy of C++ PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::RawVolume<(uint8_t)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarchingCubesSurfaceExtractorRawVolumeuint8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MarchingCubesSurfaceExtractorRawVolumeuint8, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::RawVolume<(uint8_t)>)> self, RawVolumeuint8 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::RawVolume< uint8_t >::VoxelType tBorderValue, PolyVox::DefaultMarchingCubesController< PolyVox::RawVolume< unsigned char >::VoxelType > controller) -> MarchingCubesSurfaceExtractorRawVolumeuint8
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::RawVolume<(uint8_t)>)> self, RawVolumeuint8 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::RawVolume< uint8_t >::VoxelType tBorderValue) -> MarchingCubesSurfaceExtractorRawVolumeuint8
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::RawVolume<(uint8_t)>)> self, RawVolumeuint8 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode) -> MarchingCubesSurfaceExtractorRawVolumeuint8
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::RawVolume<(uint8_t)>)> self, RawVolumeuint8 volData, Region region, SurfaceMeshPositionMaterialNormal result) -> MarchingCubesSurfaceExtractorRawVolumeuint8
        """
        this = _PolyVoxCore.new_MarchingCubesSurfaceExtractorRawVolumeuint8(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def execute(self) -> "void":
        """execute(MarchingCubesSurfaceExtractorRawVolumeuint8 self)"""
        return _PolyVoxCore.MarchingCubesSurfaceExtractorRawVolumeuint8_execute(self)

    __swig_destroy__ = _PolyVoxCore.delete_MarchingCubesSurfaceExtractorRawVolumeuint8
    __del__ = lambda self: None
MarchingCubesSurfaceExtractorRawVolumeuint8_swigregister = _PolyVoxCore.MarchingCubesSurfaceExtractorRawVolumeuint8_swigregister
MarchingCubesSurfaceExtractorRawVolumeuint8_swigregister(MarchingCubesSurfaceExtractorRawVolumeuint8)

class MarchingCubesSurfaceExtractorRawVolumeuint16(_object):
    """Proxy of C++ PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::RawVolume<(uint16_t)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarchingCubesSurfaceExtractorRawVolumeuint16, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MarchingCubesSurfaceExtractorRawVolumeuint16, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::RawVolume<(uint16_t)>)> self, RawVolumeuint16 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::RawVolume< uint16_t >::VoxelType tBorderValue, PolyVox::DefaultMarchingCubesController< PolyVox::RawVolume< unsigned short >::VoxelType > controller) -> MarchingCubesSurfaceExtractorRawVolumeuint16
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::RawVolume<(uint16_t)>)> self, RawVolumeuint16 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::RawVolume< uint16_t >::VoxelType tBorderValue) -> MarchingCubesSurfaceExtractorRawVolumeuint16
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::RawVolume<(uint16_t)>)> self, RawVolumeuint16 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode) -> MarchingCubesSurfaceExtractorRawVolumeuint16
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::RawVolume<(uint16_t)>)> self, RawVolumeuint16 volData, Region region, SurfaceMeshPositionMaterialNormal result) -> MarchingCubesSurfaceExtractorRawVolumeuint16
        """
        this = _PolyVoxCore.new_MarchingCubesSurfaceExtractorRawVolumeuint16(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def execute(self) -> "void":
        """execute(MarchingCubesSurfaceExtractorRawVolumeuint16 self)"""
        return _PolyVoxCore.MarchingCubesSurfaceExtractorRawVolumeuint16_execute(self)

    __swig_destroy__ = _PolyVoxCore.delete_MarchingCubesSurfaceExtractorRawVolumeuint16
    __del__ = lambda self: None
MarchingCubesSurfaceExtractorRawVolumeuint16_swigregister = _PolyVoxCore.MarchingCubesSurfaceExtractorRawVolumeuint16_swigregister
MarchingCubesSurfaceExtractorRawVolumeuint16_swigregister(MarchingCubesSurfaceExtractorRawVolumeuint16)

class MarchingCubesSurfaceExtractorRawVolumeuint32(_object):
    """Proxy of C++ PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::RawVolume<(uint32_t)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarchingCubesSurfaceExtractorRawVolumeuint32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MarchingCubesSurfaceExtractorRawVolumeuint32, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::RawVolume<(uint32_t)>)> self, RawVolumeuint32 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::RawVolume< uint32_t >::VoxelType tBorderValue, PolyVox::DefaultMarchingCubesController< PolyVox::RawVolume< unsigned int >::VoxelType > controller) -> MarchingCubesSurfaceExtractorRawVolumeuint32
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::RawVolume<(uint32_t)>)> self, RawVolumeuint32 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::RawVolume< uint32_t >::VoxelType tBorderValue) -> MarchingCubesSurfaceExtractorRawVolumeuint32
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::RawVolume<(uint32_t)>)> self, RawVolumeuint32 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode) -> MarchingCubesSurfaceExtractorRawVolumeuint32
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::RawVolume<(uint32_t)>)> self, RawVolumeuint32 volData, Region region, SurfaceMeshPositionMaterialNormal result) -> MarchingCubesSurfaceExtractorRawVolumeuint32
        """
        this = _PolyVoxCore.new_MarchingCubesSurfaceExtractorRawVolumeuint32(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def execute(self) -> "void":
        """execute(MarchingCubesSurfaceExtractorRawVolumeuint32 self)"""
        return _PolyVoxCore.MarchingCubesSurfaceExtractorRawVolumeuint32_execute(self)

    __swig_destroy__ = _PolyVoxCore.delete_MarchingCubesSurfaceExtractorRawVolumeuint32
    __del__ = lambda self: None
MarchingCubesSurfaceExtractorRawVolumeuint32_swigregister = _PolyVoxCore.MarchingCubesSurfaceExtractorRawVolumeuint32_swigregister
MarchingCubesSurfaceExtractorRawVolumeuint32_swigregister(MarchingCubesSurfaceExtractorRawVolumeuint32)

class MarchingCubesSurfaceExtractorRawVolumefloat(_object):
    """Proxy of C++ PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::RawVolume<(float)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarchingCubesSurfaceExtractorRawVolumefloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MarchingCubesSurfaceExtractorRawVolumefloat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::RawVolume<(float)>)> self, RawVolumefloat volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::RawVolume< float >::VoxelType tBorderValue, PolyVox::DefaultMarchingCubesController< float > controller) -> MarchingCubesSurfaceExtractorRawVolumefloat
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::RawVolume<(float)>)> self, RawVolumefloat volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::RawVolume< float >::VoxelType tBorderValue) -> MarchingCubesSurfaceExtractorRawVolumefloat
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::RawVolume<(float)>)> self, RawVolumefloat volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode) -> MarchingCubesSurfaceExtractorRawVolumefloat
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::RawVolume<(float)>)> self, RawVolumefloat volData, Region region, SurfaceMeshPositionMaterialNormal result) -> MarchingCubesSurfaceExtractorRawVolumefloat
        """
        this = _PolyVoxCore.new_MarchingCubesSurfaceExtractorRawVolumefloat(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def execute(self) -> "void":
        """execute(MarchingCubesSurfaceExtractorRawVolumefloat self)"""
        return _PolyVoxCore.MarchingCubesSurfaceExtractorRawVolumefloat_execute(self)

    __swig_destroy__ = _PolyVoxCore.delete_MarchingCubesSurfaceExtractorRawVolumefloat
    __del__ = lambda self: None
MarchingCubesSurfaceExtractorRawVolumefloat_swigregister = _PolyVoxCore.MarchingCubesSurfaceExtractorRawVolumefloat_swigregister
MarchingCubesSurfaceExtractorRawVolumefloat_swigregister(MarchingCubesSurfaceExtractorRawVolumefloat)

class MarchingCubesSurfaceExtractorLargeVolumeint8(_object):
    """Proxy of C++ PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::LargeVolume<(int8_t)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarchingCubesSurfaceExtractorLargeVolumeint8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MarchingCubesSurfaceExtractorLargeVolumeint8, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::LargeVolume<(int8_t)>)> self, LargeVolumeint8 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::LargeVolume< int8_t >::VoxelType tBorderValue, PolyVox::DefaultMarchingCubesController< PolyVox::LargeVolume< signed char >::VoxelType > controller) -> MarchingCubesSurfaceExtractorLargeVolumeint8
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::LargeVolume<(int8_t)>)> self, LargeVolumeint8 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::LargeVolume< int8_t >::VoxelType tBorderValue) -> MarchingCubesSurfaceExtractorLargeVolumeint8
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::LargeVolume<(int8_t)>)> self, LargeVolumeint8 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode) -> MarchingCubesSurfaceExtractorLargeVolumeint8
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::LargeVolume<(int8_t)>)> self, LargeVolumeint8 volData, Region region, SurfaceMeshPositionMaterialNormal result) -> MarchingCubesSurfaceExtractorLargeVolumeint8
        """
        this = _PolyVoxCore.new_MarchingCubesSurfaceExtractorLargeVolumeint8(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def execute(self) -> "void":
        """execute(MarchingCubesSurfaceExtractorLargeVolumeint8 self)"""
        return _PolyVoxCore.MarchingCubesSurfaceExtractorLargeVolumeint8_execute(self)

    __swig_destroy__ = _PolyVoxCore.delete_MarchingCubesSurfaceExtractorLargeVolumeint8
    __del__ = lambda self: None
MarchingCubesSurfaceExtractorLargeVolumeint8_swigregister = _PolyVoxCore.MarchingCubesSurfaceExtractorLargeVolumeint8_swigregister
MarchingCubesSurfaceExtractorLargeVolumeint8_swigregister(MarchingCubesSurfaceExtractorLargeVolumeint8)

class MarchingCubesSurfaceExtractorLargeVolumeint16(_object):
    """Proxy of C++ PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::LargeVolume<(int16_t)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarchingCubesSurfaceExtractorLargeVolumeint16, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MarchingCubesSurfaceExtractorLargeVolumeint16, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::LargeVolume<(int16_t)>)> self, LargeVolumeint16 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::LargeVolume< int16_t >::VoxelType tBorderValue, PolyVox::DefaultMarchingCubesController< PolyVox::LargeVolume< short >::VoxelType > controller) -> MarchingCubesSurfaceExtractorLargeVolumeint16
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::LargeVolume<(int16_t)>)> self, LargeVolumeint16 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::LargeVolume< int16_t >::VoxelType tBorderValue) -> MarchingCubesSurfaceExtractorLargeVolumeint16
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::LargeVolume<(int16_t)>)> self, LargeVolumeint16 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode) -> MarchingCubesSurfaceExtractorLargeVolumeint16
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::LargeVolume<(int16_t)>)> self, LargeVolumeint16 volData, Region region, SurfaceMeshPositionMaterialNormal result) -> MarchingCubesSurfaceExtractorLargeVolumeint16
        """
        this = _PolyVoxCore.new_MarchingCubesSurfaceExtractorLargeVolumeint16(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def execute(self) -> "void":
        """execute(MarchingCubesSurfaceExtractorLargeVolumeint16 self)"""
        return _PolyVoxCore.MarchingCubesSurfaceExtractorLargeVolumeint16_execute(self)

    __swig_destroy__ = _PolyVoxCore.delete_MarchingCubesSurfaceExtractorLargeVolumeint16
    __del__ = lambda self: None
MarchingCubesSurfaceExtractorLargeVolumeint16_swigregister = _PolyVoxCore.MarchingCubesSurfaceExtractorLargeVolumeint16_swigregister
MarchingCubesSurfaceExtractorLargeVolumeint16_swigregister(MarchingCubesSurfaceExtractorLargeVolumeint16)

class MarchingCubesSurfaceExtractorLargeVolumeint32(_object):
    """Proxy of C++ PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::LargeVolume<(int32_t)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarchingCubesSurfaceExtractorLargeVolumeint32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MarchingCubesSurfaceExtractorLargeVolumeint32, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::LargeVolume<(int32_t)>)> self, LargeVolumeint32 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::LargeVolume< int32_t >::VoxelType tBorderValue, PolyVox::DefaultMarchingCubesController< PolyVox::LargeVolume< int >::VoxelType > controller) -> MarchingCubesSurfaceExtractorLargeVolumeint32
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::LargeVolume<(int32_t)>)> self, LargeVolumeint32 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::LargeVolume< int32_t >::VoxelType tBorderValue) -> MarchingCubesSurfaceExtractorLargeVolumeint32
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::LargeVolume<(int32_t)>)> self, LargeVolumeint32 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode) -> MarchingCubesSurfaceExtractorLargeVolumeint32
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::LargeVolume<(int32_t)>)> self, LargeVolumeint32 volData, Region region, SurfaceMeshPositionMaterialNormal result) -> MarchingCubesSurfaceExtractorLargeVolumeint32
        """
        this = _PolyVoxCore.new_MarchingCubesSurfaceExtractorLargeVolumeint32(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def execute(self) -> "void":
        """execute(MarchingCubesSurfaceExtractorLargeVolumeint32 self)"""
        return _PolyVoxCore.MarchingCubesSurfaceExtractorLargeVolumeint32_execute(self)

    __swig_destroy__ = _PolyVoxCore.delete_MarchingCubesSurfaceExtractorLargeVolumeint32
    __del__ = lambda self: None
MarchingCubesSurfaceExtractorLargeVolumeint32_swigregister = _PolyVoxCore.MarchingCubesSurfaceExtractorLargeVolumeint32_swigregister
MarchingCubesSurfaceExtractorLargeVolumeint32_swigregister(MarchingCubesSurfaceExtractorLargeVolumeint32)

class MarchingCubesSurfaceExtractorLargeVolumeuint8(_object):
    """Proxy of C++ PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::LargeVolume<(uint8_t)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarchingCubesSurfaceExtractorLargeVolumeuint8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MarchingCubesSurfaceExtractorLargeVolumeuint8, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::LargeVolume<(uint8_t)>)> self, LargeVolumeuint8 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::LargeVolume< uint8_t >::VoxelType tBorderValue, PolyVox::DefaultMarchingCubesController< PolyVox::LargeVolume< unsigned char >::VoxelType > controller) -> MarchingCubesSurfaceExtractorLargeVolumeuint8
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::LargeVolume<(uint8_t)>)> self, LargeVolumeuint8 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::LargeVolume< uint8_t >::VoxelType tBorderValue) -> MarchingCubesSurfaceExtractorLargeVolumeuint8
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::LargeVolume<(uint8_t)>)> self, LargeVolumeuint8 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode) -> MarchingCubesSurfaceExtractorLargeVolumeuint8
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::LargeVolume<(uint8_t)>)> self, LargeVolumeuint8 volData, Region region, SurfaceMeshPositionMaterialNormal result) -> MarchingCubesSurfaceExtractorLargeVolumeuint8
        """
        this = _PolyVoxCore.new_MarchingCubesSurfaceExtractorLargeVolumeuint8(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def execute(self) -> "void":
        """execute(MarchingCubesSurfaceExtractorLargeVolumeuint8 self)"""
        return _PolyVoxCore.MarchingCubesSurfaceExtractorLargeVolumeuint8_execute(self)

    __swig_destroy__ = _PolyVoxCore.delete_MarchingCubesSurfaceExtractorLargeVolumeuint8
    __del__ = lambda self: None
MarchingCubesSurfaceExtractorLargeVolumeuint8_swigregister = _PolyVoxCore.MarchingCubesSurfaceExtractorLargeVolumeuint8_swigregister
MarchingCubesSurfaceExtractorLargeVolumeuint8_swigregister(MarchingCubesSurfaceExtractorLargeVolumeuint8)

class MarchingCubesSurfaceExtractorLargeVolumeuint16(_object):
    """Proxy of C++ PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::LargeVolume<(uint16_t)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarchingCubesSurfaceExtractorLargeVolumeuint16, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MarchingCubesSurfaceExtractorLargeVolumeuint16, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::LargeVolume<(uint16_t)>)> self, LargeVolumeuint16 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::LargeVolume< uint16_t >::VoxelType tBorderValue, PolyVox::DefaultMarchingCubesController< PolyVox::LargeVolume< unsigned short >::VoxelType > controller) -> MarchingCubesSurfaceExtractorLargeVolumeuint16
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::LargeVolume<(uint16_t)>)> self, LargeVolumeuint16 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::LargeVolume< uint16_t >::VoxelType tBorderValue) -> MarchingCubesSurfaceExtractorLargeVolumeuint16
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::LargeVolume<(uint16_t)>)> self, LargeVolumeuint16 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode) -> MarchingCubesSurfaceExtractorLargeVolumeuint16
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::LargeVolume<(uint16_t)>)> self, LargeVolumeuint16 volData, Region region, SurfaceMeshPositionMaterialNormal result) -> MarchingCubesSurfaceExtractorLargeVolumeuint16
        """
        this = _PolyVoxCore.new_MarchingCubesSurfaceExtractorLargeVolumeuint16(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def execute(self) -> "void":
        """execute(MarchingCubesSurfaceExtractorLargeVolumeuint16 self)"""
        return _PolyVoxCore.MarchingCubesSurfaceExtractorLargeVolumeuint16_execute(self)

    __swig_destroy__ = _PolyVoxCore.delete_MarchingCubesSurfaceExtractorLargeVolumeuint16
    __del__ = lambda self: None
MarchingCubesSurfaceExtractorLargeVolumeuint16_swigregister = _PolyVoxCore.MarchingCubesSurfaceExtractorLargeVolumeuint16_swigregister
MarchingCubesSurfaceExtractorLargeVolumeuint16_swigregister(MarchingCubesSurfaceExtractorLargeVolumeuint16)

class MarchingCubesSurfaceExtractorLargeVolumeuint32(_object):
    """Proxy of C++ PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::LargeVolume<(uint32_t)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarchingCubesSurfaceExtractorLargeVolumeuint32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MarchingCubesSurfaceExtractorLargeVolumeuint32, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::LargeVolume<(uint32_t)>)> self, LargeVolumeuint32 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::LargeVolume< uint32_t >::VoxelType tBorderValue, PolyVox::DefaultMarchingCubesController< PolyVox::LargeVolume< unsigned int >::VoxelType > controller) -> MarchingCubesSurfaceExtractorLargeVolumeuint32
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::LargeVolume<(uint32_t)>)> self, LargeVolumeuint32 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::LargeVolume< uint32_t >::VoxelType tBorderValue) -> MarchingCubesSurfaceExtractorLargeVolumeuint32
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::LargeVolume<(uint32_t)>)> self, LargeVolumeuint32 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode) -> MarchingCubesSurfaceExtractorLargeVolumeuint32
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::LargeVolume<(uint32_t)>)> self, LargeVolumeuint32 volData, Region region, SurfaceMeshPositionMaterialNormal result) -> MarchingCubesSurfaceExtractorLargeVolumeuint32
        """
        this = _PolyVoxCore.new_MarchingCubesSurfaceExtractorLargeVolumeuint32(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def execute(self) -> "void":
        """execute(MarchingCubesSurfaceExtractorLargeVolumeuint32 self)"""
        return _PolyVoxCore.MarchingCubesSurfaceExtractorLargeVolumeuint32_execute(self)

    __swig_destroy__ = _PolyVoxCore.delete_MarchingCubesSurfaceExtractorLargeVolumeuint32
    __del__ = lambda self: None
MarchingCubesSurfaceExtractorLargeVolumeuint32_swigregister = _PolyVoxCore.MarchingCubesSurfaceExtractorLargeVolumeuint32_swigregister
MarchingCubesSurfaceExtractorLargeVolumeuint32_swigregister(MarchingCubesSurfaceExtractorLargeVolumeuint32)

class MarchingCubesSurfaceExtractorLargeVolumefloat(_object):
    """Proxy of C++ PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::LargeVolume<(float)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarchingCubesSurfaceExtractorLargeVolumefloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MarchingCubesSurfaceExtractorLargeVolumefloat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::LargeVolume<(float)>)> self, LargeVolumefloat volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::LargeVolume< float >::VoxelType tBorderValue, PolyVox::DefaultMarchingCubesController< float > controller) -> MarchingCubesSurfaceExtractorLargeVolumefloat
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::LargeVolume<(float)>)> self, LargeVolumefloat volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::LargeVolume< float >::VoxelType tBorderValue) -> MarchingCubesSurfaceExtractorLargeVolumefloat
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::LargeVolume<(float)>)> self, LargeVolumefloat volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode) -> MarchingCubesSurfaceExtractorLargeVolumefloat
        __init__(PolyVox::MarchingCubesSurfaceExtractor<(PolyVox::LargeVolume<(float)>)> self, LargeVolumefloat volData, Region region, SurfaceMeshPositionMaterialNormal result) -> MarchingCubesSurfaceExtractorLargeVolumefloat
        """
        this = _PolyVoxCore.new_MarchingCubesSurfaceExtractorLargeVolumefloat(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def execute(self) -> "void":
        """execute(MarchingCubesSurfaceExtractorLargeVolumefloat self)"""
        return _PolyVoxCore.MarchingCubesSurfaceExtractorLargeVolumefloat_execute(self)

    __swig_destroy__ = _PolyVoxCore.delete_MarchingCubesSurfaceExtractorLargeVolumefloat
    __del__ = lambda self: None
MarchingCubesSurfaceExtractorLargeVolumefloat_swigregister = _PolyVoxCore.MarchingCubesSurfaceExtractorLargeVolumefloat_swigregister
MarchingCubesSurfaceExtractorLargeVolumefloat_swigregister(MarchingCubesSurfaceExtractorLargeVolumefloat)

class CubicSurfaceExtractorSimpleVolumeuint8(_object):
    """Proxy of C++ PolyVox::CubicSurfaceExtractor<(PolyVox::SimpleVolume<(uint8_t)>,PolyVox::DefaultIsQuadNeeded<(uint8_t)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CubicSurfaceExtractorSimpleVolumeuint8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CubicSurfaceExtractorSimpleVolumeuint8, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::CubicSurfaceExtractor<(PolyVox::SimpleVolume<(uint8_t)>,PolyVox::DefaultIsQuadNeeded<(uint8_t)>)> self, SimpleVolumeuint8 volData, Region region, SurfaceMeshPositionMaterial result, PolyVox::WrapMode eWrapMode, PolyVox::SimpleVolume< uint8_t >::VoxelType tBorderValue, bool bMergeQuads=True, PolyVox::DefaultIsQuadNeeded< unsigned char > isQuadNeeded) -> CubicSurfaceExtractorSimpleVolumeuint8
        __init__(PolyVox::CubicSurfaceExtractor<(PolyVox::SimpleVolume<(uint8_t)>,PolyVox::DefaultIsQuadNeeded<(uint8_t)>)> self, SimpleVolumeuint8 volData, Region region, SurfaceMeshPositionMaterial result, PolyVox::WrapMode eWrapMode, PolyVox::SimpleVolume< uint8_t >::VoxelType tBorderValue, bool bMergeQuads=True) -> CubicSurfaceExtractorSimpleVolumeuint8
        __init__(PolyVox::CubicSurfaceExtractor<(PolyVox::SimpleVolume<(uint8_t)>,PolyVox::DefaultIsQuadNeeded<(uint8_t)>)> self, SimpleVolumeuint8 volData, Region region, SurfaceMeshPositionMaterial result, PolyVox::WrapMode eWrapMode, PolyVox::SimpleVolume< uint8_t >::VoxelType tBorderValue) -> CubicSurfaceExtractorSimpleVolumeuint8
        __init__(PolyVox::CubicSurfaceExtractor<(PolyVox::SimpleVolume<(uint8_t)>,PolyVox::DefaultIsQuadNeeded<(uint8_t)>)> self, SimpleVolumeuint8 volData, Region region, SurfaceMeshPositionMaterial result, PolyVox::WrapMode eWrapMode) -> CubicSurfaceExtractorSimpleVolumeuint8
        __init__(PolyVox::CubicSurfaceExtractor<(PolyVox::SimpleVolume<(uint8_t)>,PolyVox::DefaultIsQuadNeeded<(uint8_t)>)> self, SimpleVolumeuint8 volData, Region region, SurfaceMeshPositionMaterial result) -> CubicSurfaceExtractorSimpleVolumeuint8
        """
        this = _PolyVoxCore.new_CubicSurfaceExtractorSimpleVolumeuint8(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def execute(self) -> "void":
        """execute(CubicSurfaceExtractorSimpleVolumeuint8 self)"""
        return _PolyVoxCore.CubicSurfaceExtractorSimpleVolumeuint8_execute(self)

    __swig_destroy__ = _PolyVoxCore.delete_CubicSurfaceExtractorSimpleVolumeuint8
    __del__ = lambda self: None
CubicSurfaceExtractorSimpleVolumeuint8_swigregister = _PolyVoxCore.CubicSurfaceExtractorSimpleVolumeuint8_swigregister
CubicSurfaceExtractorSimpleVolumeuint8_swigregister(CubicSurfaceExtractorSimpleVolumeuint8)

class CubicSurfaceExtractorWithNormalsSimpleVolumeuint8(_object):
    """Proxy of C++ PolyVox::CubicSurfaceExtractorWithNormals<(PolyVox::SimpleVolume<(uint8_t)>,PolyVox::DefaultIsQuadNeeded<(uint8_t)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CubicSurfaceExtractorWithNormalsSimpleVolumeuint8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CubicSurfaceExtractorWithNormalsSimpleVolumeuint8, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PolyVox::CubicSurfaceExtractorWithNormals<(PolyVox::SimpleVolume<(uint8_t)>,PolyVox::DefaultIsQuadNeeded<(uint8_t)>)> self, SimpleVolumeuint8 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::SimpleVolume< uint8_t >::VoxelType tBorderValue, PolyVox::DefaultIsQuadNeeded< unsigned char > isQuadNeeded) -> CubicSurfaceExtractorWithNormalsSimpleVolumeuint8
        __init__(PolyVox::CubicSurfaceExtractorWithNormals<(PolyVox::SimpleVolume<(uint8_t)>,PolyVox::DefaultIsQuadNeeded<(uint8_t)>)> self, SimpleVolumeuint8 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode, PolyVox::SimpleVolume< uint8_t >::VoxelType tBorderValue) -> CubicSurfaceExtractorWithNormalsSimpleVolumeuint8
        __init__(PolyVox::CubicSurfaceExtractorWithNormals<(PolyVox::SimpleVolume<(uint8_t)>,PolyVox::DefaultIsQuadNeeded<(uint8_t)>)> self, SimpleVolumeuint8 volData, Region region, SurfaceMeshPositionMaterialNormal result, PolyVox::WrapMode eWrapMode) -> CubicSurfaceExtractorWithNormalsSimpleVolumeuint8
        __init__(PolyVox::CubicSurfaceExtractorWithNormals<(PolyVox::SimpleVolume<(uint8_t)>,PolyVox::DefaultIsQuadNeeded<(uint8_t)>)> self, SimpleVolumeuint8 volData, Region region, SurfaceMeshPositionMaterialNormal result) -> CubicSurfaceExtractorWithNormalsSimpleVolumeuint8
        """
        this = _PolyVoxCore.new_CubicSurfaceExtractorWithNormalsSimpleVolumeuint8(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def execute(self) -> "void":
        """execute(CubicSurfaceExtractorWithNormalsSimpleVolumeuint8 self)"""
        return _PolyVoxCore.CubicSurfaceExtractorWithNormalsSimpleVolumeuint8_execute(self)

    __swig_destroy__ = _PolyVoxCore.delete_CubicSurfaceExtractorWithNormalsSimpleVolumeuint8
    __del__ = lambda self: None
CubicSurfaceExtractorWithNormalsSimpleVolumeuint8_swigregister = _PolyVoxCore.CubicSurfaceExtractorWithNormalsSimpleVolumeuint8_swigregister
CubicSurfaceExtractorWithNormalsSimpleVolumeuint8_swigregister(CubicSurfaceExtractorWithNormalsSimpleVolumeuint8)


_PolyVoxCore.Completed_swigconstant(_PolyVoxCore)
Completed = _PolyVoxCore.Completed

_PolyVoxCore.Interupted_swigconstant(_PolyVoxCore)
Interupted = _PolyVoxCore.Interupted

def raycastWithEndpointsSimpleVolumeuint8(volData: 'SimpleVolumeuint8', v3dStart: 'Vector3Dfloat', v3dEnd: 'Vector3Dfloat', callback: 'PyObject *') -> "PolyVox::RaycastResult":
    """raycastWithEndpointsSimpleVolumeuint8(SimpleVolumeuint8 volData, Vector3Dfloat v3dStart, Vector3Dfloat v3dEnd, PyObject * callback) -> PolyVox::RaycastResult"""
    return _PolyVoxCore.raycastWithEndpointsSimpleVolumeuint8(volData, v3dStart, v3dEnd, callback)
# This file is compatible with both classic and new-style classes.


